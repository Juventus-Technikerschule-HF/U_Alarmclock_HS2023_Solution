
Alarmclock_2023_Solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00802000  00006a84  00006b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000145c  00802112  00802112  00006c2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000818  00000000  00000000  00006cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000adb4  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004756  00000000  00000000  00012294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a8a  00000000  00000000  000169ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f38  00000000  00000000  0001c474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005414  00000000  00000000  0001e3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000422a  00000000  00000000  000237c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000740  00000000  00000000  000279ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__ctors_end>
       4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
       8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
       c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      10:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      14:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      18:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      1c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      20:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      24:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      28:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      2c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      30:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      34:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      38:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_14>
      3c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      40:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      44:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      48:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      4c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      50:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      54:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      58:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      5c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      60:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      64:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      68:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      6c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      70:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      74:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      78:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      7c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      80:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      84:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      88:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      8c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      90:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      94:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      98:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      9c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      a0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      a4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      a8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      ac:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      b0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      b4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      b8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      bc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      c0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      c4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      c8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      cc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      d0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      d4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      d8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      dc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      e0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      e4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      e8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      ec:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      f0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      f4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      f8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      fc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     100:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     104:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     108:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     10c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     110:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     114:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     118:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     11c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     120:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     124:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     128:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     12c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     130:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     134:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     138:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     13c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     140:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     144:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     148:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     14c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     150:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     154:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     158:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     15c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     160:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     164:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     168:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     16c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     170:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     174:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     178:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     17c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     180:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     184:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     188:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     18c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     190:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     194:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     198:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     19c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1a0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1a4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1a8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1ac:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1b0:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__vector_108>
     1b4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1b8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1bc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1c0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1c4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1c8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1cc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1d0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1d4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1d8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1dc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1e0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1e4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1e8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1ec:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1f0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1f4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1f8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1fc:	37 1e       	adc	r3, r23
     1fe:	37 1e       	adc	r3, r23
     200:	37 1e       	adc	r3, r23
     202:	be 1e       	adc	r11, r30
     204:	8a 1e       	adc	r8, r26
     206:	b8 1e       	adc	r11, r24
     208:	37 1e       	adc	r3, r23
     20a:	37 1e       	adc	r3, r23
     20c:	be 1e       	adc	r11, r30
     20e:	8a 1e       	adc	r8, r26
     210:	4f 22       	and	r4, r31
     212:	4c 22       	and	r4, r28
     214:	49 22       	and	r4, r25
     216:	46 22       	and	r4, r22
     218:	43 22       	and	r4, r19
     21a:	40 22       	and	r4, r16
     21c:	3d 22       	and	r3, r29
     21e:	3a 22       	and	r3, r26
     220:	37 22       	and	r3, r23
     222:	34 22       	and	r3, r20

00000224 <__trampolines_start>:
     224:	0c 94 3d 22 	jmp	0x447a	; 0x447a <vUIHandler+0x110>
     228:	0c 94 37 22 	jmp	0x446e	; 0x446e <vUIHandler+0x104>
     22c:	0c 94 34 22 	jmp	0x4468	; 0x4468 <vUIHandler+0xfe>
     230:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <prvProcessReceivedCommands+0x1d0>
     234:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <vUIHandler+0x10a>
     238:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <prvIdleTask>
     23c:	0c 94 b5 21 	jmp	0x436a	; 0x436a <vUIHandler>
     240:	0c 94 43 22 	jmp	0x4486	; 0x4486 <vUIHandler+0x11c>
     244:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <prvProcessReceivedCommands+0x1dc>
     248:	0c 94 40 22 	jmp	0x4480	; 0x4480 <vUIHandler+0x116>
     24c:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <vLedBlink>
     250:	0c 94 91 25 	jmp	0x4b22	; 0x4b22 <vButtonHandler>
     254:	0c 94 49 22 	jmp	0x4492	; 0x4492 <vUIHandler+0x128>
     258:	0c 94 0c 29 	jmp	0x5218	; 0x5218 <vDisplayUpdateTask>
     25c:	0c 94 4c 22 	jmp	0x4498	; 0x4498 <vUIHandler+0x12e>
     260:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <prvTimerTask>
     264:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <vEventGroupSetBitsCallback>
     268:	0c 94 be 20 	jmp	0x417c	; 0x417c <vTimeHandler>
     26c:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <prvProcessReceivedCommands+0x174>
     270:	0c 94 4f 22 	jmp	0x449e	; 0x449e <vUIHandler+0x134>
     274:	0c 94 37 1e 	jmp	0x3c6e	; 0x3c6e <prvProcessReceivedCommands+0xce>
     278:	0c 94 46 22 	jmp	0x448c	; 0x448c <vUIHandler+0x122>

0000027c <__ctors_end>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf ef       	ldi	r28, 0xFF	; 255
     282:	cd bf       	out	0x3d, r28	; 61
     284:	df e3       	ldi	r29, 0x3F	; 63
     286:	de bf       	out	0x3e, r29	; 62
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	0c bf       	out	0x3c, r16	; 60

0000028c <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     28c:	ee e6       	ldi	r30, 0x6E	; 110
     28e:	f5 e3       	ldi	r31, 0x35	; 53
     290:	8a ea       	ldi	r24, 0xAA	; 170
     292:	90 e4       	ldi	r25, 0x40	; 64
     294:	81 93       	st	Z+, r24
     296:	e0 30       	cpi	r30, 0x00	; 0
     298:	f9 07       	cpc	r31, r25
     29a:	e0 f3       	brcs	.-8      	; 0x294 <init_mem+0x8>
	...

0000029e <__do_copy_data>:
     29e:	11 e2       	ldi	r17, 0x21	; 33
     2a0:	a0 e0       	ldi	r26, 0x00	; 0
     2a2:	b0 e2       	ldi	r27, 0x20	; 32
     2a4:	e4 e8       	ldi	r30, 0x84	; 132
     2a6:	fa e6       	ldi	r31, 0x6A	; 106
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	0b bf       	out	0x3b, r16	; 59
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <__do_copy_data+0x14>
     2ae:	07 90       	elpm	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	a2 31       	cpi	r26, 0x12	; 18
     2b4:	b1 07       	cpc	r27, r17
     2b6:	d9 f7       	brne	.-10     	; 0x2ae <__do_copy_data+0x10>

000002b8 <__do_clear_bss>:
     2b8:	25 e3       	ldi	r18, 0x35	; 53
     2ba:	a2 e1       	ldi	r26, 0x12	; 18
     2bc:	b1 e2       	ldi	r27, 0x21	; 33
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <.do_clear_bss_start>

000002c0 <.do_clear_bss_loop>:
     2c0:	1d 92       	st	X+, r1

000002c2 <.do_clear_bss_start>:
     2c2:	ae 36       	cpi	r26, 0x6E	; 110
     2c4:	b2 07       	cpc	r27, r18
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <.do_clear_bss_loop>
     2c8:	0e 94 69 20 	call	0x40d2	; 0x40d2 <main>
     2cc:	0c 94 40 35 	jmp	0x6a80	; 0x6a80 <_exit>

000002d0 <__bad_interrupt>:
     2d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d4 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     2dc:	80 ea       	ldi	r24, 0xA0	; 160
     2de:	96 e0       	ldi	r25, 0x06	; 6
     2e0:	20 e1       	ldi	r18, 0x10	; 16
     2e2:	fc 01       	movw	r30, r24
     2e4:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     2e6:	80 ea       	ldi	r24, 0xA0	; 160
     2e8:	96 e0       	ldi	r25, 0x06	; 6
     2ea:	20 e2       	ldi	r18, 0x20	; 32
     2ec:	fc 01       	movw	r30, r24
     2ee:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     2f0:	80 ea       	ldi	r24, 0xA0	; 160
     2f2:	96 e0       	ldi	r25, 0x06	; 6
     2f4:	20 e4       	ldi	r18, 0x40	; 64
     2f6:	fc 01       	movw	r30, r24
     2f8:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     2fa:	80 ea       	ldi	r24, 0xA0	; 160
     2fc:	96 e0       	ldi	r25, 0x06	; 6
     2fe:	20 e8       	ldi	r18, 0x80	; 128
     300:	fc 01       	movw	r30, r24
     302:	22 83       	std	Z+2, r18	; 0x02
 }
     304:	00 00       	nop
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     314:	80 ea       	ldi	r24, 0xA0	; 160
     316:	96 e0       	ldi	r25, 0x06	; 6
     318:	fc 01       	movw	r30, r24
     31a:	80 85       	ldd	r24, Z+8	; 0x08
     31c:	88 2f       	mov	r24, r24
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	80 71       	andi	r24, 0x10	; 16
     322:	99 27       	eor	r25, r25
     324:	95 95       	asr	r25
     326:	87 95       	ror	r24
     328:	95 95       	asr	r25
     32a:	87 95       	ror	r24
     32c:	95 95       	asr	r25
     32e:	87 95       	ror	r24
     330:	95 95       	asr	r25
     332:	87 95       	ror	r24
     334:	89 2b       	or	r24, r25
     336:	89 f4       	brne	.+34     	; 0x35a <updateButtons+0x4e>
		if(b1Count < 60000) {
     338:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <__data_end>
     33c:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <__data_end+0x1>
     340:	80 36       	cpi	r24, 0x60	; 96
     342:	9a 4e       	sbci	r25, 0xEA	; 234
     344:	20 f5       	brcc	.+72     	; 0x38e <updateButtons+0x82>
			b1Count++;
     346:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <__data_end>
     34a:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <__data_end+0x1>
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <__data_end>
     354:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <__data_end+0x1>
     358:	1a c0       	rjmp	.+52     	; 0x38e <updateButtons+0x82>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     35a:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <__data_end>
     35e:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <__data_end+0x1>
     362:	0b 97       	sbiw	r24, 0x0b	; 11
     364:	68 f0       	brcs	.+26     	; 0x380 <updateButtons+0x74>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     366:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <__data_end>
     36a:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <__data_end+0x1>
     36e:	c3 97       	sbiw	r24, 0x33	; 51
     370:	18 f0       	brcs	.+6      	; 0x378 <updateButtons+0x6c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     372:	10 92 61 35 	sts	0x3561, r1	; 0x803561 <b1Status>
     376:	07 c0       	rjmp	.+14     	; 0x386 <updateButtons+0x7a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 61 35 	sts	0x3561, r24	; 0x803561 <b1Status>
     37e:	03 c0       	rjmp	.+6      	; 0x386 <updateButtons+0x7a>
			}
		} else {
			b1Status = NOT_PRESSED;
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	80 93 61 35 	sts	0x3561, r24	; 0x803561 <b1Status>
		}
		b1Count = 0;
     386:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <__data_end>
     38a:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     38e:	80 ea       	ldi	r24, 0xA0	; 160
     390:	96 e0       	ldi	r25, 0x06	; 6
     392:	fc 01       	movw	r30, r24
     394:	80 85       	ldd	r24, Z+8	; 0x08
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	80 72       	andi	r24, 0x20	; 32
     39c:	99 27       	eor	r25, r25
     39e:	95 95       	asr	r25
     3a0:	87 95       	ror	r24
     3a2:	95 95       	asr	r25
     3a4:	87 95       	ror	r24
     3a6:	95 95       	asr	r25
     3a8:	87 95       	ror	r24
     3aa:	95 95       	asr	r25
     3ac:	87 95       	ror	r24
     3ae:	95 95       	asr	r25
     3b0:	87 95       	ror	r24
     3b2:	89 2b       	or	r24, r25
     3b4:	89 f4       	brne	.+34     	; 0x3d8 <updateButtons+0xcc>
		if(b2Count < 60000) {
     3b6:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b2Count.3622>
     3ba:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b2Count.3622+0x1>
     3be:	80 36       	cpi	r24, 0x60	; 96
     3c0:	9a 4e       	sbci	r25, 0xEA	; 234
     3c2:	20 f5       	brcc	.+72     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			b2Count++;
     3c4:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b2Count.3622>
     3c8:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b2Count.3622+0x1>
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <b2Count.3622>
     3d2:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <b2Count.3622+0x1>
     3d6:	1a c0       	rjmp	.+52     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3d8:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b2Count.3622>
     3dc:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b2Count.3622+0x1>
     3e0:	0b 97       	sbiw	r24, 0x0b	; 11
     3e2:	68 f0       	brcs	.+26     	; 0x3fe <updateButtons+0xf2>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3e4:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <b2Count.3622>
     3e8:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <b2Count.3622+0x1>
     3ec:	c3 97       	sbiw	r24, 0x33	; 51
     3ee:	18 f0       	brcs	.+6      	; 0x3f6 <updateButtons+0xea>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     3f0:	10 92 62 35 	sts	0x3562, r1	; 0x803562 <b2Status>
     3f4:	07 c0       	rjmp	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 62 35 	sts	0x3562, r24	; 0x803562 <b2Status>
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			}
		} else {
			b2Status = NOT_PRESSED;			
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	80 93 62 35 	sts	0x3562, r24	; 0x803562 <b2Status>
		}
		b2Count = 0;
     404:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <b2Count.3622>
     408:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <b2Count.3622+0x1>
	}
	if(Button3_Value == 0) {
     40c:	80 ea       	ldi	r24, 0xA0	; 160
     40e:	96 e0       	ldi	r25, 0x06	; 6
     410:	fc 01       	movw	r30, r24
     412:	80 85       	ldd	r24, Z+8	; 0x08
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	80 74       	andi	r24, 0x40	; 64
     41a:	99 27       	eor	r25, r25
     41c:	08 2e       	mov	r0, r24
     41e:	89 2f       	mov	r24, r25
     420:	00 0c       	add	r0, r0
     422:	88 1f       	adc	r24, r24
     424:	99 0b       	sbc	r25, r25
     426:	00 0c       	add	r0, r0
     428:	88 1f       	adc	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	89 2b       	or	r24, r25
     42e:	89 f4       	brne	.+34     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		if(b3Count < 60000) {
     430:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b3Count.3623>
     434:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b3Count.3623+0x1>
     438:	80 36       	cpi	r24, 0x60	; 96
     43a:	9a 4e       	sbci	r25, 0xEA	; 234
     43c:	20 f5       	brcc	.+72     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			b3Count++;
     43e:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b3Count.3623>
     442:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b3Count.3623+0x1>
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <b3Count.3623>
     44c:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <b3Count.3623+0x1>
     450:	1a c0       	rjmp	.+52     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     452:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b3Count.3623>
     456:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b3Count.3623+0x1>
     45a:	0b 97       	sbiw	r24, 0x0b	; 11
     45c:	68 f0       	brcs	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     45e:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <b3Count.3623>
     462:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <b3Count.3623+0x1>
     466:	c3 97       	sbiw	r24, 0x33	; 51
     468:	18 f0       	brcs	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     46a:	10 92 63 35 	sts	0x3563, r1	; 0x803563 <b3Status>
     46e:	07 c0       	rjmp	.+14     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 63 35 	sts	0x3563, r24	; 0x803563 <b3Status>
     476:	03 c0       	rjmp	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			}
		} else {
			b3Status = NOT_PRESSED;
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	80 93 63 35 	sts	0x3563, r24	; 0x803563 <b3Status>
		}
		b3Count = 0;
     47e:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <b3Count.3623>
     482:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <b3Count.3623+0x1>
	}
	if(Button4_Value == 0) {
     486:	80 ea       	ldi	r24, 0xA0	; 160
     488:	96 e0       	ldi	r25, 0x06	; 6
     48a:	fc 01       	movw	r30, r24
     48c:	80 85       	ldd	r24, Z+8	; 0x08
     48e:	88 23       	and	r24, r24
     490:	8c f0       	brlt	.+34     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		if(b4Count < 60000) {
     492:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <b4Count.3624>
     496:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <b4Count.3624+0x1>
     49a:	80 36       	cpi	r24, 0x60	; 96
     49c:	9a 4e       	sbci	r25, 0xEA	; 234
     49e:	20 f5       	brcc	.+72     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			b4Count++;
     4a0:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <b4Count.3624>
     4a4:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <b4Count.3624+0x1>
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <b4Count.3624>
     4ae:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <b4Count.3624+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     4b2:	1a c0       	rjmp	.+52     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4b4:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <b4Count.3624>
     4b8:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <b4Count.3624+0x1>
     4bc:	0b 97       	sbiw	r24, 0x0b	; 11
     4be:	68 f0       	brcs	.+26     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4c0:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <b4Count.3624>
     4c4:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <b4Count.3624+0x1>
     4c8:	c3 97       	sbiw	r24, 0x33	; 51
     4ca:	18 f0       	brcs	.+6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     4cc:	10 92 64 35 	sts	0x3564, r1	; 0x803564 <b4Status>
     4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 64 35 	sts	0x3564, r24	; 0x803564 <b4Status>
     4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}
		} else {
			b4Status = NOT_PRESSED;
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	80 93 64 35 	sts	0x3564, r24	; 0x803564 <b4Status>
		}
		b4Count = 0;
     4e0:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <b4Count.3624>
     4e4:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <b4Count.3624+0x1>
	}
 }
     4e8:	00 00       	nop
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	1f 92       	push	r1
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	88 2f       	mov	r24, r24
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	91 05       	cpc	r25, r1
     506:	79 f0       	breq	.+30     	; 0x526 <getButtonPress+0x36>
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	91 05       	cpc	r25, r1
     50c:	1c f4       	brge	.+6      	; 0x514 <getButtonPress+0x24>
     50e:	89 2b       	or	r24, r25
     510:	39 f0       	breq	.+14     	; 0x520 <getButtonPress+0x30>
     512:	12 c0       	rjmp	.+36     	; 0x538 <getButtonPress+0x48>
     514:	82 30       	cpi	r24, 0x02	; 2
     516:	91 05       	cpc	r25, r1
     518:	49 f0       	breq	.+18     	; 0x52c <getButtonPress+0x3c>
     51a:	03 97       	sbiw	r24, 0x03	; 3
     51c:	51 f0       	breq	.+20     	; 0x532 <getButtonPress+0x42>
     51e:	0c c0       	rjmp	.+24     	; 0x538 <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     520:	80 91 61 35 	lds	r24, 0x3561	; 0x803561 <b1Status>
     524:	0a c0       	rjmp	.+20     	; 0x53a <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     526:	80 91 62 35 	lds	r24, 0x3562	; 0x803562 <b2Status>
     52a:	07 c0       	rjmp	.+14     	; 0x53a <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     52c:	80 91 63 35 	lds	r24, 0x3563	; 0x803563 <b3Status>
     530:	04 c0       	rjmp	.+8      	; 0x53a <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     532:	80 91 64 35 	lds	r24, 0x3564	; 0x803564 <b4Status>
     536:	01 c0       	rjmp	.+2      	; 0x53a <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	0f 90       	pop	r0
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     542:	0f 93       	push	r16
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <CCPWrite+0x8>
     54a:	00 d0       	rcall	.+0      	; 0x54c <CCPWrite+0xa>
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	8c 83       	std	Y+4, r24	; 0x04
     552:	9d 83       	std	Y+5, r25	; 0x05
     554:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     556:	8f e3       	ldi	r24, 0x3F	; 63
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	fc 01       	movw	r30, r24
     55c:	80 81       	ld	r24, Z
     55e:	8b 83       	std	Y+3, r24	; 0x03
     560:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     562:	8c 81       	ldd	r24, Y+4	; 0x04
     564:	9d 81       	ldd	r25, Y+5	; 0x05
     566:	89 83       	std	Y+1, r24	; 0x01
     568:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     56a:	8b e3       	ldi	r24, 0x3B	; 59
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	fc 01       	movw	r30, r24
     570:	10 82       	st	Z, r1
#endif
	asm volatile(
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	9a 81       	ldd	r25, Y+2	; 0x02
     576:	2e 81       	ldd	r18, Y+6	; 0x06
     578:	fc 01       	movw	r30, r24
     57a:	08 ed       	ldi	r16, 0xD8	; 216
     57c:	04 bf       	out	0x34, r16	; 52
     57e:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     580:	8f e3       	ldi	r24, 0x3F	; 63
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	2b 81       	ldd	r18, Y+3	; 0x03
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
#endif
}
     58a:	00 00       	nop
     58c:	26 96       	adiw	r28, 0x06	; 6
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	de bf       	out	0x3e, r29	; 62
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	0f 91       	pop	r16
     598:	08 95       	ret

0000059a <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <CLKSYS_XOSC_Config+0x6>
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	6a 83       	std	Y+2, r22	; 0x02
     5a8:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     5aa:	80 e5       	ldi	r24, 0x50	; 80
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	2a 81       	ldd	r18, Y+2	; 0x02
     5b0:	22 23       	and	r18, r18
     5b2:	11 f0       	breq	.+4      	; 0x5b8 <CLKSYS_XOSC_Config+0x1e>
     5b4:	20 e2       	ldi	r18, 0x20	; 32
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <CLKSYS_XOSC_Config+0x20>
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	39 81       	ldd	r19, Y+1	; 0x01
     5bc:	32 2b       	or	r19, r18
     5be:	2b 81       	ldd	r18, Y+3	; 0x03
     5c0:	23 2b       	or	r18, r19
     5c2:	fc 01       	movw	r30, r24
     5c4:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     5c6:	00 00       	nop
     5c8:	23 96       	adiw	r28, 0x03	; 3
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	1f 92       	push	r1
     5da:	1f 92       	push	r1
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     5e4:	8a 81       	ldd	r24, Y+2	; 0x02
     5e6:	8f 71       	andi	r24, 0x1F	; 31
     5e8:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     5ea:	80 e5       	ldi	r24, 0x50	; 80
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	39 81       	ldd	r19, Y+1	; 0x01
     5f0:	2a 81       	ldd	r18, Y+2	; 0x02
     5f2:	23 2b       	or	r18, r19
     5f4:	fc 01       	movw	r30, r24
     5f6:	25 83       	std	Z+5, r18	; 0x05
}
     5f8:	00 00       	nop
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	1f 92       	push	r1
     60a:	1f 92       	push	r1
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     612:	80 e5       	ldi	r24, 0x50	; 80
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	20 e5       	ldi	r18, 0x50	; 80
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	32 2f       	mov	r19, r18
     620:	2a 81       	ldd	r18, Y+2	; 0x02
     622:	20 95       	com	r18
     624:	23 23       	and	r18, r19
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     62a:	80 e5       	ldi	r24, 0x50	; 80
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	90 81       	ld	r25, Z
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	89 23       	and	r24, r25
     636:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     638:	89 81       	ldd	r24, Y+1	; 0x01
}
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	00 d0       	rcall	.+0      	; 0x64a <CLKSYS_Prescalers_Config+0x6>
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	8a 83       	std	Y+2, r24	; 0x02
     650:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	8b 81       	ldd	r24, Y+3	; 0x03
     656:	89 2b       	or	r24, r25
     658:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     65a:	69 81       	ldd	r22, Y+1	; 0x01
     65c:	81 e4       	ldi	r24, 0x41	; 65
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 a1 02 	call	0x542	; 0x542 <CCPWrite>
}
     664:	00 00       	nop
     666:	23 96       	adiw	r28, 0x03	; 3
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	1f 92       	push	r1
     678:	1f 92       	push	r1
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     680:	80 e4       	ldi	r24, 0x40	; 64
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	fc 01       	movw	r30, r24
     686:	80 81       	ld	r24, Z
     688:	98 2f       	mov	r25, r24
     68a:	98 7f       	andi	r25, 0xF8	; 248
     68c:	8a 81       	ldd	r24, Y+2	; 0x02
     68e:	89 2b       	or	r24, r25
     690:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     692:	69 81       	ldd	r22, Y+1	; 0x01
     694:	80 e4       	ldi	r24, 0x40	; 64
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 a1 02 	call	0x542	; 0x542 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     69c:	80 e4       	ldi	r24, 0x40	; 64
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	fc 01       	movw	r30, r24
     6a2:	90 81       	ld	r25, Z
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	89 23       	and	r24, r25
     6a8:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
}
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <TC0_ConfigClockSource+0x6>
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	9a 83       	std	Y+2, r25	; 0x02
     6c4:	6b 83       	std	Y+3, r22	; 0x03
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	98 2f       	mov	r25, r24
     6d0:	90 7f       	andi	r25, 0xF0	; 240
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	89 2b       	or	r24, r25
     6d6:	28 2f       	mov	r18, r24
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
     6e0:	00 00       	nop
     6e2:	23 96       	adiw	r28, 0x03	; 3
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <TC0_ConfigWGM>:
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <TC0_ConfigWGM+0x6>
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	6b 83       	std	Y+3, r22	; 0x03
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	9a 81       	ldd	r25, Y+2	; 0x02
     702:	fc 01       	movw	r30, r24
     704:	81 81       	ldd	r24, Z+1	; 0x01
     706:	98 2f       	mov	r25, r24
     708:	98 7f       	andi	r25, 0xF8	; 248
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	89 2b       	or	r24, r25
     70e:	28 2f       	mov	r18, r24
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	fc 01       	movw	r30, r24
     716:	21 83       	std	Z+1, r18	; 0x01
     718:	00 00       	nop
     71a:	23 96       	adiw	r28, 0x03	; 3
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	de bf       	out	0x3e, r29	; 62
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <TC0_SetOverflowIntLevel+0x6>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	9a 81       	ldd	r25, Y+2	; 0x02
     73a:	fc 01       	movw	r30, r24
     73c:	86 81       	ldd	r24, Z+6	; 0x06
     73e:	98 2f       	mov	r25, r24
     740:	9c 7f       	andi	r25, 0xFC	; 252
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	89 2b       	or	r24, r25
     746:	28 2f       	mov	r18, r24
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	fc 01       	movw	r30, r24
     74e:	26 83       	std	Z+6, r18	; 0x06
}
     750:	00 00       	nop
     752:	23 96       	adiw	r28, 0x03	; 3
     754:	cd bf       	out	0x3d, r28	; 61
     756:	de bf       	out	0x3e, r29	; 62
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	00 d0       	rcall	.+0      	; 0x764 <vApplicationStackOverflowHook+0x6>
     764:	1f 92       	push	r1
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	6b 83       	std	Y+3, r22	; 0x03
     770:	7c 83       	std	Y+4, r23	; 0x04
     772:	8b e2       	ldi	r24, 0x2B	; 43
     774:	0e 94 c3 03 	call	0x786	; 0x786 <error>
     778:	00 00       	nop
     77a:	24 96       	adiw	r28, 0x04	; 4
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	de bf       	out	0x3e, r29	; 62
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	1f 92       	push	r1
     78c:	1f 92       	push	r1
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	8b 32       	cpi	r24, 0x2B	; 43
     798:	19 f4       	brne	.+6      	; 0x7a0 <error+0x1a>
	 a = 1;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	89 83       	std	Y+1, r24	; 0x01
     79e:	0e c0       	rjmp	.+28     	; 0x7bc <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	8c 32       	cpi	r24, 0x2C	; 44
     7a4:	19 f4       	brne	.+6      	; 0x7ac <error+0x26>
	 a = 2;
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	08 c0       	rjmp	.+16     	; 0x7bc <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	8f 32       	cpi	r24, 0x2F	; 47
     7b0:	19 f4       	brne	.+6      	; 0x7b8 <error+0x32>
	 a = 3;
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <error+0x36>
	 else
	 a = 4;
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     7bc:	0e 94 e6 03 	call	0x7cc	; 0x7cc <software_reset>
 }
     7c0:	00 00       	nop
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     7d4:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     7d6:	84 e3       	ldi	r24, 0x34	; 52
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	28 ed       	ldi	r18, 0xD8	; 216
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     7e0:	88 e7       	ldi	r24, 0x78	; 120
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	fc 01       	movw	r30, r24
     7e8:	21 83       	std	Z+1, r18	; 0x01
     7ea:	00 00       	nop
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	1f 92       	push	r1
     7f8:	1f 92       	push	r1
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	80 e1       	ldi	r24, 0x10	; 16
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 36 07 	call	0xe6c	; 0xe6c <pvPortMalloc>
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	89 2b       	or	r24, r25
     810:	61 f0       	breq	.+24     	; 0x82a <__EEPROM_REGION_LENGTH__+0x2a>
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	fc 01       	movw	r30, r24
     818:	10 82       	st	Z, r1
     81a:	11 82       	std	Z+1, r1	; 0x01
     81c:	12 82       	std	Z+2, r1	; 0x02
     81e:	13 82       	std	Z+3, r1	; 0x03
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	04 96       	adiw	r24, 0x04	; 4
     826:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <xEventGroupWaitBits>:
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	6d 97       	sbiw	r28, 0x1d	; 29
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	de bf       	out	0x3e, r29	; 62
     852:	8a 8b       	std	Y+18, r24	; 0x12
     854:	9b 8b       	std	Y+19, r25	; 0x13
     856:	4c 8b       	std	Y+20, r20	; 0x14
     858:	5d 8b       	std	Y+21, r21	; 0x15
     85a:	6e 8b       	std	Y+22, r22	; 0x16
     85c:	7f 8b       	std	Y+23, r23	; 0x17
     85e:	28 8f       	std	Y+24, r18	; 0x18
     860:	09 8f       	std	Y+25, r16	; 0x19
     862:	ca 8e       	std	Y+26, r12	; 0x1a
     864:	db 8e       	std	Y+27, r13	; 0x1b
     866:	ec 8e       	std	Y+28, r14	; 0x1c
     868:	fd 8e       	std	Y+29, r15	; 0x1d
     86a:	8a 89       	ldd	r24, Y+18	; 0x12
     86c:	9b 89       	ldd	r25, Y+19	; 0x13
     86e:	89 87       	std	Y+9, r24	; 0x09
     870:	9a 87       	std	Y+10, r25	; 0x0a
     872:	1d 82       	std	Y+5, r1	; 0x05
     874:	1e 82       	std	Y+6, r1	; 0x06
     876:	1f 82       	std	Y+7, r1	; 0x07
     878:	18 86       	std	Y+8, r1	; 0x08
     87a:	1b 86       	std	Y+11, r1	; 0x0b
     87c:	0e 94 8b 14 	call	0x2916	; 0x2916 <vTaskSuspendAll>
     880:	89 85       	ldd	r24, Y+9	; 0x09
     882:	9a 85       	ldd	r25, Y+10	; 0x0a
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	a2 81       	ldd	r26, Z+2	; 0x02
     88c:	b3 81       	ldd	r27, Z+3	; 0x03
     88e:	8c 87       	std	Y+12, r24	; 0x0c
     890:	9d 87       	std	Y+13, r25	; 0x0d
     892:	ae 87       	std	Y+14, r26	; 0x0e
     894:	bf 87       	std	Y+15, r27	; 0x0f
     896:	2c 89       	ldd	r18, Y+20	; 0x14
     898:	3d 89       	ldd	r19, Y+21	; 0x15
     89a:	4e 89       	ldd	r20, Y+22	; 0x16
     89c:	5f 89       	ldd	r21, Y+23	; 0x17
     89e:	8c 85       	ldd	r24, Y+12	; 0x0c
     8a0:	9d 85       	ldd	r25, Y+13	; 0x0d
     8a2:	ae 85       	ldd	r26, Y+14	; 0x0e
     8a4:	bf 85       	ldd	r27, Y+15	; 0x0f
     8a6:	09 8d       	ldd	r16, Y+25	; 0x19
     8a8:	bc 01       	movw	r22, r24
     8aa:	cd 01       	movw	r24, r26
     8ac:	0e 94 c5 06 	call	0xd8a	; 0xd8a <prvTestWaitCondition>
     8b0:	88 8b       	std	Y+16, r24	; 0x10
     8b2:	88 89       	ldd	r24, Y+16	; 0x10
     8b4:	88 23       	and	r24, r24
     8b6:	59 f1       	breq	.+86     	; 0x90e <xEventGroupWaitBits+0xd6>
     8b8:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ba:	9d 85       	ldd	r25, Y+13	; 0x0d
     8bc:	ae 85       	ldd	r26, Y+14	; 0x0e
     8be:	bf 85       	ldd	r27, Y+15	; 0x0f
     8c0:	89 83       	std	Y+1, r24	; 0x01
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	ab 83       	std	Y+3, r26	; 0x03
     8c6:	bc 83       	std	Y+4, r27	; 0x04
     8c8:	1a 8e       	std	Y+26, r1	; 0x1a
     8ca:	1b 8e       	std	Y+27, r1	; 0x1b
     8cc:	1c 8e       	std	Y+28, r1	; 0x1c
     8ce:	1d 8e       	std	Y+29, r1	; 0x1d
     8d0:	88 8d       	ldd	r24, Y+24	; 0x18
     8d2:	88 23       	and	r24, r24
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <xEventGroupWaitBits+0xa0>
     8d6:	65 c0       	rjmp	.+202    	; 0x9a2 <xEventGroupWaitBits+0x16a>
     8d8:	89 85       	ldd	r24, Y+9	; 0x09
     8da:	9a 85       	ldd	r25, Y+10	; 0x0a
     8dc:	fc 01       	movw	r30, r24
     8de:	20 81       	ld	r18, Z
     8e0:	31 81       	ldd	r19, Z+1	; 0x01
     8e2:	42 81       	ldd	r20, Z+2	; 0x02
     8e4:	53 81       	ldd	r21, Z+3	; 0x03
     8e6:	8c 89       	ldd	r24, Y+20	; 0x14
     8e8:	9d 89       	ldd	r25, Y+21	; 0x15
     8ea:	ae 89       	ldd	r26, Y+22	; 0x16
     8ec:	bf 89       	ldd	r27, Y+23	; 0x17
     8ee:	80 95       	com	r24
     8f0:	90 95       	com	r25
     8f2:	a0 95       	com	r26
     8f4:	b0 95       	com	r27
     8f6:	82 23       	and	r24, r18
     8f8:	93 23       	and	r25, r19
     8fa:	a4 23       	and	r26, r20
     8fc:	b5 23       	and	r27, r21
     8fe:	29 85       	ldd	r18, Y+9	; 0x09
     900:	3a 85       	ldd	r19, Y+10	; 0x0a
     902:	f9 01       	movw	r30, r18
     904:	80 83       	st	Z, r24
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	a2 83       	std	Z+2, r26	; 0x02
     90a:	b3 83       	std	Z+3, r27	; 0x03
     90c:	4a c0       	rjmp	.+148    	; 0x9a2 <xEventGroupWaitBits+0x16a>
     90e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     910:	9b 8d       	ldd	r25, Y+27	; 0x1b
     912:	ac 8d       	ldd	r26, Y+28	; 0x1c
     914:	bd 8d       	ldd	r27, Y+29	; 0x1d
     916:	89 2b       	or	r24, r25
     918:	8a 2b       	or	r24, r26
     91a:	8b 2b       	or	r24, r27
     91c:	59 f4       	brne	.+22     	; 0x934 <xEventGroupWaitBits+0xfc>
     91e:	8c 85       	ldd	r24, Y+12	; 0x0c
     920:	9d 85       	ldd	r25, Y+13	; 0x0d
     922:	ae 85       	ldd	r26, Y+14	; 0x0e
     924:	bf 85       	ldd	r27, Y+15	; 0x0f
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	9a 83       	std	Y+2, r25	; 0x02
     92a:	ab 83       	std	Y+3, r26	; 0x03
     92c:	bc 83       	std	Y+4, r27	; 0x04
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	8b 87       	std	Y+11, r24	; 0x0b
     932:	37 c0       	rjmp	.+110    	; 0x9a2 <xEventGroupWaitBits+0x16a>
     934:	88 8d       	ldd	r24, Y+24	; 0x18
     936:	88 23       	and	r24, r24
     938:	49 f0       	breq	.+18     	; 0x94c <xEventGroupWaitBits+0x114>
     93a:	8d 81       	ldd	r24, Y+5	; 0x05
     93c:	9e 81       	ldd	r25, Y+6	; 0x06
     93e:	af 81       	ldd	r26, Y+7	; 0x07
     940:	b8 85       	ldd	r27, Y+8	; 0x08
     942:	b1 60       	ori	r27, 0x01	; 1
     944:	8d 83       	std	Y+5, r24	; 0x05
     946:	9e 83       	std	Y+6, r25	; 0x06
     948:	af 83       	std	Y+7, r26	; 0x07
     94a:	b8 87       	std	Y+8, r27	; 0x08
     94c:	89 8d       	ldd	r24, Y+25	; 0x19
     94e:	88 23       	and	r24, r24
     950:	49 f0       	breq	.+18     	; 0x964 <xEventGroupWaitBits+0x12c>
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	af 81       	ldd	r26, Y+7	; 0x07
     958:	b8 85       	ldd	r27, Y+8	; 0x08
     95a:	b4 60       	ori	r27, 0x04	; 4
     95c:	8d 83       	std	Y+5, r24	; 0x05
     95e:	9e 83       	std	Y+6, r25	; 0x06
     960:	af 83       	std	Y+7, r26	; 0x07
     962:	b8 87       	std	Y+8, r27	; 0x08
     964:	2c 89       	ldd	r18, Y+20	; 0x14
     966:	3d 89       	ldd	r19, Y+21	; 0x15
     968:	4e 89       	ldd	r20, Y+22	; 0x16
     96a:	5f 89       	ldd	r21, Y+23	; 0x17
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	9e 81       	ldd	r25, Y+6	; 0x06
     970:	af 81       	ldd	r26, Y+7	; 0x07
     972:	b8 85       	ldd	r27, Y+8	; 0x08
     974:	82 2b       	or	r24, r18
     976:	93 2b       	or	r25, r19
     978:	a4 2b       	or	r26, r20
     97a:	b5 2b       	or	r27, r21
     97c:	29 85       	ldd	r18, Y+9	; 0x09
     97e:	3a 85       	ldd	r19, Y+10	; 0x0a
     980:	f9 01       	movw	r30, r18
     982:	34 96       	adiw	r30, 0x04	; 4
     984:	2a 8d       	ldd	r18, Y+26	; 0x1a
     986:	3b 8d       	ldd	r19, Y+27	; 0x1b
     988:	4c 8d       	ldd	r20, Y+28	; 0x1c
     98a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     98c:	89 01       	movw	r16, r18
     98e:	9a 01       	movw	r18, r20
     990:	ac 01       	movw	r20, r24
     992:	bd 01       	movw	r22, r26
     994:	cf 01       	movw	r24, r30
     996:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <vTaskPlaceOnUnorderedEventList>
     99a:	19 82       	std	Y+1, r1	; 0x01
     99c:	1a 82       	std	Y+2, r1	; 0x02
     99e:	1b 82       	std	Y+3, r1	; 0x03
     9a0:	1c 82       	std	Y+4, r1	; 0x04
     9a2:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
     9a6:	89 8b       	std	Y+17, r24	; 0x11
     9a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9ac:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9ae:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9b0:	89 2b       	or	r24, r25
     9b2:	8a 2b       	or	r24, r26
     9b4:	8b 2b       	or	r24, r27
     9b6:	09 f4       	brne	.+2      	; 0x9ba <xEventGroupWaitBits+0x182>
     9b8:	65 c0       	rjmp	.+202    	; 0xa84 <xEventGroupWaitBits+0x24c>
     9ba:	89 89       	ldd	r24, Y+17	; 0x11
     9bc:	88 23       	and	r24, r24
     9be:	11 f4       	brne	.+4      	; 0x9c4 <xEventGroupWaitBits+0x18c>
     9c0:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
     9c4:	0e 94 1c 1a 	call	0x3438	; 0x3438 <uxTaskResetEventItemValue>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	ab 83       	std	Y+3, r26	; 0x03
     9d2:	bc 83       	std	Y+4, r27	; 0x04
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	9a 81       	ldd	r25, Y+2	; 0x02
     9d8:	ab 81       	ldd	r26, Y+3	; 0x03
     9da:	bc 81       	ldd	r27, Y+4	; 0x04
     9dc:	88 27       	eor	r24, r24
     9de:	99 27       	eor	r25, r25
     9e0:	aa 27       	eor	r26, r26
     9e2:	b2 70       	andi	r27, 0x02	; 2
     9e4:	89 2b       	or	r24, r25
     9e6:	8a 2b       	or	r24, r26
     9e8:	8b 2b       	or	r24, r27
     9ea:	09 f0       	breq	.+2      	; 0x9ee <xEventGroupWaitBits+0x1b6>
     9ec:	42 c0       	rjmp	.+132    	; 0xa72 <xEventGroupWaitBits+0x23a>
     9ee:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9f2:	ff 93       	push	r31
     9f4:	f8 7f       	andi	r31, 0xF8	; 248
     9f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9fa:	89 85       	ldd	r24, Y+9	; 0x09
     9fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     9fe:	fc 01       	movw	r30, r24
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	a2 81       	ldd	r26, Z+2	; 0x02
     a06:	b3 81       	ldd	r27, Z+3	; 0x03
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	9a 83       	std	Y+2, r25	; 0x02
     a0c:	ab 83       	std	Y+3, r26	; 0x03
     a0e:	bc 83       	std	Y+4, r27	; 0x04
     a10:	2c 89       	ldd	r18, Y+20	; 0x14
     a12:	3d 89       	ldd	r19, Y+21	; 0x15
     a14:	4e 89       	ldd	r20, Y+22	; 0x16
     a16:	5f 89       	ldd	r21, Y+23	; 0x17
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	ab 81       	ldd	r26, Y+3	; 0x03
     a1e:	bc 81       	ldd	r27, Y+4	; 0x04
     a20:	09 8d       	ldd	r16, Y+25	; 0x19
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	0e 94 c5 06 	call	0xd8a	; 0xd8a <prvTestWaitCondition>
     a2a:	88 23       	and	r24, r24
     a2c:	e9 f0       	breq	.+58     	; 0xa68 <xEventGroupWaitBits+0x230>
     a2e:	88 8d       	ldd	r24, Y+24	; 0x18
     a30:	88 23       	and	r24, r24
     a32:	d1 f0       	breq	.+52     	; 0xa68 <xEventGroupWaitBits+0x230>
     a34:	89 85       	ldd	r24, Y+9	; 0x09
     a36:	9a 85       	ldd	r25, Y+10	; 0x0a
     a38:	fc 01       	movw	r30, r24
     a3a:	20 81       	ld	r18, Z
     a3c:	31 81       	ldd	r19, Z+1	; 0x01
     a3e:	42 81       	ldd	r20, Z+2	; 0x02
     a40:	53 81       	ldd	r21, Z+3	; 0x03
     a42:	8c 89       	ldd	r24, Y+20	; 0x14
     a44:	9d 89       	ldd	r25, Y+21	; 0x15
     a46:	ae 89       	ldd	r26, Y+22	; 0x16
     a48:	bf 89       	ldd	r27, Y+23	; 0x17
     a4a:	80 95       	com	r24
     a4c:	90 95       	com	r25
     a4e:	a0 95       	com	r26
     a50:	b0 95       	com	r27
     a52:	82 23       	and	r24, r18
     a54:	93 23       	and	r25, r19
     a56:	a4 23       	and	r26, r20
     a58:	b5 23       	and	r27, r21
     a5a:	29 85       	ldd	r18, Y+9	; 0x09
     a5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a5e:	f9 01       	movw	r30, r18
     a60:	80 83       	st	Z, r24
     a62:	91 83       	std	Z+1, r25	; 0x01
     a64:	a2 83       	std	Z+2, r26	; 0x02
     a66:	b3 83       	std	Z+3, r27	; 0x03
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	8b 87       	std	Y+11, r24	; 0x0b
     a6c:	ff 91       	pop	r31
     a6e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	9a 81       	ldd	r25, Y+2	; 0x02
     a76:	ab 81       	ldd	r26, Y+3	; 0x03
     a78:	bc 81       	ldd	r27, Y+4	; 0x04
     a7a:	bb 27       	eor	r27, r27
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	ab 83       	std	Y+3, r26	; 0x03
     a82:	bc 83       	std	Y+4, r27	; 0x04
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	9a 81       	ldd	r25, Y+2	; 0x02
     a88:	ab 81       	ldd	r26, Y+3	; 0x03
     a8a:	bc 81       	ldd	r27, Y+4	; 0x04
     a8c:	bc 01       	movw	r22, r24
     a8e:	cd 01       	movw	r24, r26
     a90:	6d 96       	adiw	r28, 0x1d	; 29
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	08 95       	ret

00000aa8 <xEventGroupClearBits>:
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	2c 97       	sbiw	r28, 0x0c	; 12
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	8f 83       	std	Y+7, r24	; 0x07
     ab8:	98 87       	std	Y+8, r25	; 0x08
     aba:	49 87       	std	Y+9, r20	; 0x09
     abc:	5a 87       	std	Y+10, r21	; 0x0a
     abe:	6b 87       	std	Y+11, r22	; 0x0b
     ac0:	7c 87       	std	Y+12, r23	; 0x0c
     ac2:	8f 81       	ldd	r24, Y+7	; 0x07
     ac4:	98 85       	ldd	r25, Y+8	; 0x08
     ac6:	89 83       	std	Y+1, r24	; 0x01
     ac8:	9a 83       	std	Y+2, r25	; 0x02
     aca:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ace:	ff 93       	push	r31
     ad0:	f8 7f       	andi	r31, 0xF8	; 248
     ad2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	fc 01       	movw	r30, r24
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	a2 81       	ldd	r26, Z+2	; 0x02
     ae2:	b3 81       	ldd	r27, Z+3	; 0x03
     ae4:	8b 83       	std	Y+3, r24	; 0x03
     ae6:	9c 83       	std	Y+4, r25	; 0x04
     ae8:	ad 83       	std	Y+5, r26	; 0x05
     aea:	be 83       	std	Y+6, r27	; 0x06
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	fc 01       	movw	r30, r24
     af2:	20 81       	ld	r18, Z
     af4:	31 81       	ldd	r19, Z+1	; 0x01
     af6:	42 81       	ldd	r20, Z+2	; 0x02
     af8:	53 81       	ldd	r21, Z+3	; 0x03
     afa:	89 85       	ldd	r24, Y+9	; 0x09
     afc:	9a 85       	ldd	r25, Y+10	; 0x0a
     afe:	ab 85       	ldd	r26, Y+11	; 0x0b
     b00:	bc 85       	ldd	r27, Y+12	; 0x0c
     b02:	80 95       	com	r24
     b04:	90 95       	com	r25
     b06:	a0 95       	com	r26
     b08:	b0 95       	com	r27
     b0a:	82 23       	and	r24, r18
     b0c:	93 23       	and	r25, r19
     b0e:	a4 23       	and	r26, r20
     b10:	b5 23       	and	r27, r21
     b12:	29 81       	ldd	r18, Y+1	; 0x01
     b14:	3a 81       	ldd	r19, Y+2	; 0x02
     b16:	f9 01       	movw	r30, r18
     b18:	80 83       	st	Z, r24
     b1a:	91 83       	std	Z+1, r25	; 0x01
     b1c:	a2 83       	std	Z+2, r26	; 0x02
     b1e:	b3 83       	std	Z+3, r27	; 0x03
     b20:	ff 91       	pop	r31
     b22:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	ad 81       	ldd	r26, Y+5	; 0x05
     b2c:	be 81       	ldd	r27, Y+6	; 0x06
     b2e:	bc 01       	movw	r22, r24
     b30:	cd 01       	movw	r24, r26
     b32:	2c 96       	adiw	r28, 0x0c	; 12
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <xEventGroupSetBits>:
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	6d 97       	sbiw	r28, 0x1d	; 29
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	88 8f       	std	Y+24, r24	; 0x18
     b4e:	99 8f       	std	Y+25, r25	; 0x19
     b50:	4a 8f       	std	Y+26, r20	; 0x1a
     b52:	5b 8f       	std	Y+27, r21	; 0x1b
     b54:	6c 8f       	std	Y+28, r22	; 0x1c
     b56:	7d 8f       	std	Y+29, r23	; 0x1d
     b58:	1b 82       	std	Y+3, r1	; 0x03
     b5a:	1c 82       	std	Y+4, r1	; 0x04
     b5c:	1d 82       	std	Y+5, r1	; 0x05
     b5e:	1e 82       	std	Y+6, r1	; 0x06
     b60:	88 8d       	ldd	r24, Y+24	; 0x18
     b62:	99 8d       	ldd	r25, Y+25	; 0x19
     b64:	88 87       	std	Y+8, r24	; 0x08
     b66:	99 87       	std	Y+9, r25	; 0x09
     b68:	1f 82       	std	Y+7, r1	; 0x07
     b6a:	88 85       	ldd	r24, Y+8	; 0x08
     b6c:	99 85       	ldd	r25, Y+9	; 0x09
     b6e:	04 96       	adiw	r24, 0x04	; 4
     b70:	8a 87       	std	Y+10, r24	; 0x0a
     b72:	9b 87       	std	Y+11, r25	; 0x0b
     b74:	8a 85       	ldd	r24, Y+10	; 0x0a
     b76:	9b 85       	ldd	r25, Y+11	; 0x0b
     b78:	03 96       	adiw	r24, 0x03	; 3
     b7a:	8c 87       	std	Y+12, r24	; 0x0c
     b7c:	9d 87       	std	Y+13, r25	; 0x0d
     b7e:	0e 94 8b 14 	call	0x2916	; 0x2916 <vTaskSuspendAll>
     b82:	8a 85       	ldd	r24, Y+10	; 0x0a
     b84:	9b 85       	ldd	r25, Y+11	; 0x0b
     b86:	fc 01       	movw	r30, r24
     b88:	87 81       	ldd	r24, Z+7	; 0x07
     b8a:	90 85       	ldd	r25, Z+8	; 0x08
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	88 85       	ldd	r24, Y+8	; 0x08
     b92:	99 85       	ldd	r25, Y+9	; 0x09
     b94:	fc 01       	movw	r30, r24
     b96:	20 81       	ld	r18, Z
     b98:	31 81       	ldd	r19, Z+1	; 0x01
     b9a:	42 81       	ldd	r20, Z+2	; 0x02
     b9c:	53 81       	ldd	r21, Z+3	; 0x03
     b9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ba0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ba2:	ac 8d       	ldd	r26, Y+28	; 0x1c
     ba4:	bd 8d       	ldd	r27, Y+29	; 0x1d
     ba6:	82 2b       	or	r24, r18
     ba8:	93 2b       	or	r25, r19
     baa:	a4 2b       	or	r26, r20
     bac:	b5 2b       	or	r27, r21
     bae:	28 85       	ldd	r18, Y+8	; 0x08
     bb0:	39 85       	ldd	r19, Y+9	; 0x09
     bb2:	f9 01       	movw	r30, r18
     bb4:	80 83       	st	Z, r24
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	a2 83       	std	Z+2, r26	; 0x02
     bba:	b3 83       	std	Z+3, r27	; 0x03
     bbc:	95 c0       	rjmp	.+298    	; 0xce8 <xEventGroupSetBits+0x1aa>
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	9a 81       	ldd	r25, Y+2	; 0x02
     bc2:	fc 01       	movw	r30, r24
     bc4:	84 81       	ldd	r24, Z+4	; 0x04
     bc6:	95 81       	ldd	r25, Z+5	; 0x05
     bc8:	8e 87       	std	Y+14, r24	; 0x0e
     bca:	9f 87       	std	Y+15, r25	; 0x0f
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 81       	ld	r24, Z
     bd4:	91 81       	ldd	r25, Z+1	; 0x01
     bd6:	a2 81       	ldd	r26, Z+2	; 0x02
     bd8:	b3 81       	ldd	r27, Z+3	; 0x03
     bda:	88 8b       	std	Y+16, r24	; 0x10
     bdc:	99 8b       	std	Y+17, r25	; 0x11
     bde:	aa 8b       	std	Y+18, r26	; 0x12
     be0:	bb 8b       	std	Y+19, r27	; 0x13
     be2:	1f 82       	std	Y+7, r1	; 0x07
     be4:	88 89       	ldd	r24, Y+16	; 0x10
     be6:	99 89       	ldd	r25, Y+17	; 0x11
     be8:	aa 89       	ldd	r26, Y+18	; 0x12
     bea:	bb 89       	ldd	r27, Y+19	; 0x13
     bec:	88 27       	eor	r24, r24
     bee:	99 27       	eor	r25, r25
     bf0:	aa 27       	eor	r26, r26
     bf2:	8c 8b       	std	Y+20, r24	; 0x14
     bf4:	9d 8b       	std	Y+21, r25	; 0x15
     bf6:	ae 8b       	std	Y+22, r26	; 0x16
     bf8:	bf 8b       	std	Y+23, r27	; 0x17
     bfa:	88 89       	ldd	r24, Y+16	; 0x10
     bfc:	99 89       	ldd	r25, Y+17	; 0x11
     bfe:	aa 89       	ldd	r26, Y+18	; 0x12
     c00:	bb 89       	ldd	r27, Y+19	; 0x13
     c02:	bb 27       	eor	r27, r27
     c04:	88 8b       	std	Y+16, r24	; 0x10
     c06:	99 8b       	std	Y+17, r25	; 0x11
     c08:	aa 8b       	std	Y+18, r26	; 0x12
     c0a:	bb 8b       	std	Y+19, r27	; 0x13
     c0c:	8c 89       	ldd	r24, Y+20	; 0x14
     c0e:	9d 89       	ldd	r25, Y+21	; 0x15
     c10:	ae 89       	ldd	r26, Y+22	; 0x16
     c12:	bf 89       	ldd	r27, Y+23	; 0x17
     c14:	88 27       	eor	r24, r24
     c16:	99 27       	eor	r25, r25
     c18:	aa 27       	eor	r26, r26
     c1a:	b4 70       	andi	r27, 0x04	; 4
     c1c:	89 2b       	or	r24, r25
     c1e:	8a 2b       	or	r24, r26
     c20:	8b 2b       	or	r24, r27
     c22:	b1 f4       	brne	.+44     	; 0xc50 <xEventGroupSetBits+0x112>
     c24:	88 85       	ldd	r24, Y+8	; 0x08
     c26:	99 85       	ldd	r25, Y+9	; 0x09
     c28:	fc 01       	movw	r30, r24
     c2a:	20 81       	ld	r18, Z
     c2c:	31 81       	ldd	r19, Z+1	; 0x01
     c2e:	42 81       	ldd	r20, Z+2	; 0x02
     c30:	53 81       	ldd	r21, Z+3	; 0x03
     c32:	88 89       	ldd	r24, Y+16	; 0x10
     c34:	99 89       	ldd	r25, Y+17	; 0x11
     c36:	aa 89       	ldd	r26, Y+18	; 0x12
     c38:	bb 89       	ldd	r27, Y+19	; 0x13
     c3a:	82 23       	and	r24, r18
     c3c:	93 23       	and	r25, r19
     c3e:	a4 23       	and	r26, r20
     c40:	b5 23       	and	r27, r21
     c42:	89 2b       	or	r24, r25
     c44:	8a 2b       	or	r24, r26
     c46:	8b 2b       	or	r24, r27
     c48:	e9 f0       	breq	.+58     	; 0xc84 <xEventGroupSetBits+0x146>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	8f 83       	std	Y+7, r24	; 0x07
     c4e:	1a c0       	rjmp	.+52     	; 0xc84 <xEventGroupSetBits+0x146>
     c50:	88 85       	ldd	r24, Y+8	; 0x08
     c52:	99 85       	ldd	r25, Y+9	; 0x09
     c54:	fc 01       	movw	r30, r24
     c56:	20 81       	ld	r18, Z
     c58:	31 81       	ldd	r19, Z+1	; 0x01
     c5a:	42 81       	ldd	r20, Z+2	; 0x02
     c5c:	53 81       	ldd	r21, Z+3	; 0x03
     c5e:	88 89       	ldd	r24, Y+16	; 0x10
     c60:	99 89       	ldd	r25, Y+17	; 0x11
     c62:	aa 89       	ldd	r26, Y+18	; 0x12
     c64:	bb 89       	ldd	r27, Y+19	; 0x13
     c66:	28 23       	and	r18, r24
     c68:	39 23       	and	r19, r25
     c6a:	4a 23       	and	r20, r26
     c6c:	5b 23       	and	r21, r27
     c6e:	88 89       	ldd	r24, Y+16	; 0x10
     c70:	99 89       	ldd	r25, Y+17	; 0x11
     c72:	aa 89       	ldd	r26, Y+18	; 0x12
     c74:	bb 89       	ldd	r27, Y+19	; 0x13
     c76:	28 17       	cp	r18, r24
     c78:	39 07       	cpc	r19, r25
     c7a:	4a 07       	cpc	r20, r26
     c7c:	5b 07       	cpc	r21, r27
     c7e:	11 f4       	brne	.+4      	; 0xc84 <xEventGroupSetBits+0x146>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	8f 83       	std	Y+7, r24	; 0x07
     c84:	8f 81       	ldd	r24, Y+7	; 0x07
     c86:	88 23       	and	r24, r24
     c88:	59 f1       	breq	.+86     	; 0xce0 <xEventGroupSetBits+0x1a2>
     c8a:	8c 89       	ldd	r24, Y+20	; 0x14
     c8c:	9d 89       	ldd	r25, Y+21	; 0x15
     c8e:	ae 89       	ldd	r26, Y+22	; 0x16
     c90:	bf 89       	ldd	r27, Y+23	; 0x17
     c92:	88 27       	eor	r24, r24
     c94:	99 27       	eor	r25, r25
     c96:	aa 27       	eor	r26, r26
     c98:	b1 70       	andi	r27, 0x01	; 1
     c9a:	89 2b       	or	r24, r25
     c9c:	8a 2b       	or	r24, r26
     c9e:	8b 2b       	or	r24, r27
     ca0:	81 f0       	breq	.+32     	; 0xcc2 <xEventGroupSetBits+0x184>
     ca2:	2b 81       	ldd	r18, Y+3	; 0x03
     ca4:	3c 81       	ldd	r19, Y+4	; 0x04
     ca6:	4d 81       	ldd	r20, Y+5	; 0x05
     ca8:	5e 81       	ldd	r21, Y+6	; 0x06
     caa:	88 89       	ldd	r24, Y+16	; 0x10
     cac:	99 89       	ldd	r25, Y+17	; 0x11
     cae:	aa 89       	ldd	r26, Y+18	; 0x12
     cb0:	bb 89       	ldd	r27, Y+19	; 0x13
     cb2:	82 2b       	or	r24, r18
     cb4:	93 2b       	or	r25, r19
     cb6:	a4 2b       	or	r26, r20
     cb8:	b5 2b       	or	r27, r21
     cba:	8b 83       	std	Y+3, r24	; 0x03
     cbc:	9c 83       	std	Y+4, r25	; 0x04
     cbe:	ad 83       	std	Y+5, r26	; 0x05
     cc0:	be 83       	std	Y+6, r27	; 0x06
     cc2:	88 85       	ldd	r24, Y+8	; 0x08
     cc4:	99 85       	ldd	r25, Y+9	; 0x09
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	a2 81       	ldd	r26, Z+2	; 0x02
     cce:	b3 81       	ldd	r27, Z+3	; 0x03
     cd0:	b2 60       	ori	r27, 0x02	; 2
     cd2:	29 81       	ldd	r18, Y+1	; 0x01
     cd4:	3a 81       	ldd	r19, Y+2	; 0x02
     cd6:	ac 01       	movw	r20, r24
     cd8:	bd 01       	movw	r22, r26
     cda:	c9 01       	movw	r24, r18
     cdc:	0e 94 39 18 	call	0x3072	; 0x3072 <vTaskRemoveFromUnorderedEventList>
     ce0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ce2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	29 81       	ldd	r18, Y+1	; 0x01
     cea:	3a 81       	ldd	r19, Y+2	; 0x02
     cec:	8c 85       	ldd	r24, Y+12	; 0x0c
     cee:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf0:	28 17       	cp	r18, r24
     cf2:	39 07       	cpc	r19, r25
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <xEventGroupSetBits+0x1ba>
     cf6:	63 cf       	rjmp	.-314    	; 0xbbe <xEventGroupSetBits+0x80>
     cf8:	88 85       	ldd	r24, Y+8	; 0x08
     cfa:	99 85       	ldd	r25, Y+9	; 0x09
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 81       	ld	r18, Z
     d00:	31 81       	ldd	r19, Z+1	; 0x01
     d02:	42 81       	ldd	r20, Z+2	; 0x02
     d04:	53 81       	ldd	r21, Z+3	; 0x03
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	ad 81       	ldd	r26, Y+5	; 0x05
     d0c:	be 81       	ldd	r27, Y+6	; 0x06
     d0e:	80 95       	com	r24
     d10:	90 95       	com	r25
     d12:	a0 95       	com	r26
     d14:	b0 95       	com	r27
     d16:	82 23       	and	r24, r18
     d18:	93 23       	and	r25, r19
     d1a:	a4 23       	and	r26, r20
     d1c:	b5 23       	and	r27, r21
     d1e:	28 85       	ldd	r18, Y+8	; 0x08
     d20:	39 85       	ldd	r19, Y+9	; 0x09
     d22:	f9 01       	movw	r30, r18
     d24:	80 83       	st	Z, r24
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	a2 83       	std	Z+2, r26	; 0x02
     d2a:	b3 83       	std	Z+3, r27	; 0x03
     d2c:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
     d30:	88 85       	ldd	r24, Y+8	; 0x08
     d32:	99 85       	ldd	r25, Y+9	; 0x09
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	a2 81       	ldd	r26, Z+2	; 0x02
     d3c:	b3 81       	ldd	r27, Z+3	; 0x03
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	6d 96       	adiw	r28, 0x1d	; 29
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <vEventGroupSetBitsCallback>:
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <vEventGroupSetBitsCallback+0x6>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <vEventGroupSetBitsCallback+0x8>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
     d60:	5c 83       	std	Y+4, r21	; 0x04
     d62:	6d 83       	std	Y+5, r22	; 0x05
     d64:	7e 83       	std	Y+6, r23	; 0x06
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	ad 81       	ldd	r26, Y+5	; 0x05
     d6c:	be 81       	ldd	r27, Y+6	; 0x06
     d6e:	29 81       	ldd	r18, Y+1	; 0x01
     d70:	3a 81       	ldd	r19, Y+2	; 0x02
     d72:	ac 01       	movw	r20, r24
     d74:	bd 01       	movw	r22, r26
     d76:	c9 01       	movw	r24, r18
     d78:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
     d7c:	00 00       	nop
     d7e:	26 96       	adiw	r28, 0x06	; 6
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     d8a:	0f 93       	push	r16
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	2a 97       	sbiw	r28, 0x0a	; 10
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	6a 83       	std	Y+2, r22	; 0x02
     d9c:	7b 83       	std	Y+3, r23	; 0x03
     d9e:	8c 83       	std	Y+4, r24	; 0x04
     da0:	9d 83       	std	Y+5, r25	; 0x05
     da2:	2e 83       	std	Y+6, r18	; 0x06
     da4:	3f 83       	std	Y+7, r19	; 0x07
     da6:	48 87       	std	Y+8, r20	; 0x08
     da8:	59 87       	std	Y+9, r21	; 0x09
     daa:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     dac:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     dae:	8a 85       	ldd	r24, Y+10	; 0x0a
     db0:	88 23       	and	r24, r24
     db2:	99 f4       	brne	.+38     	; 0xdda <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     db4:	2a 81       	ldd	r18, Y+2	; 0x02
     db6:	3b 81       	ldd	r19, Y+3	; 0x03
     db8:	4c 81       	ldd	r20, Y+4	; 0x04
     dba:	5d 81       	ldd	r21, Y+5	; 0x05
     dbc:	8e 81       	ldd	r24, Y+6	; 0x06
     dbe:	9f 81       	ldd	r25, Y+7	; 0x07
     dc0:	a8 85       	ldd	r26, Y+8	; 0x08
     dc2:	b9 85       	ldd	r27, Y+9	; 0x09
     dc4:	82 23       	and	r24, r18
     dc6:	93 23       	and	r25, r19
     dc8:	a4 23       	and	r26, r20
     dca:	b5 23       	and	r27, r21
     dcc:	89 2b       	or	r24, r25
     dce:	8a 2b       	or	r24, r26
     dd0:	8b 2b       	or	r24, r27
     dd2:	d1 f0       	breq	.+52     	; 0xe08 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	17 c0       	rjmp	.+46     	; 0xe08 <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     dda:	2a 81       	ldd	r18, Y+2	; 0x02
     ddc:	3b 81       	ldd	r19, Y+3	; 0x03
     dde:	4c 81       	ldd	r20, Y+4	; 0x04
     de0:	5d 81       	ldd	r21, Y+5	; 0x05
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	9f 81       	ldd	r25, Y+7	; 0x07
     de6:	a8 85       	ldd	r26, Y+8	; 0x08
     de8:	b9 85       	ldd	r27, Y+9	; 0x09
     dea:	28 23       	and	r18, r24
     dec:	39 23       	and	r19, r25
     dee:	4a 23       	and	r20, r26
     df0:	5b 23       	and	r21, r27
     df2:	8e 81       	ldd	r24, Y+6	; 0x06
     df4:	9f 81       	ldd	r25, Y+7	; 0x07
     df6:	a8 85       	ldd	r26, Y+8	; 0x08
     df8:	b9 85       	ldd	r27, Y+9	; 0x09
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	11 f4       	brne	.+4      	; 0xe08 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
}
     e0a:	2a 96       	adiw	r28, 0x0a	; 10
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	29 97       	sbiw	r28, 0x09	; 9
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	8a 83       	std	Y+2, r24	; 0x02
     e2c:	9b 83       	std	Y+3, r25	; 0x03
     e2e:	4c 83       	std	Y+4, r20	; 0x04
     e30:	5d 83       	std	Y+5, r21	; 0x05
     e32:	6e 83       	std	Y+6, r22	; 0x06
     e34:	7f 83       	std	Y+7, r23	; 0x07
     e36:	28 87       	std	Y+8, r18	; 0x08
     e38:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     e3a:	28 85       	ldd	r18, Y+8	; 0x08
     e3c:	39 85       	ldd	r19, Y+9	; 0x09
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	9d 81       	ldd	r25, Y+5	; 0x05
     e42:	ae 81       	ldd	r26, Y+6	; 0x06
     e44:	bf 81       	ldd	r27, Y+7	; 0x07
     e46:	6a 81       	ldd	r22, Y+2	; 0x02
     e48:	7b 81       	ldd	r23, Y+3	; 0x03
     e4a:	89 01       	movw	r16, r18
     e4c:	9c 01       	movw	r18, r24
     e4e:	ad 01       	movw	r20, r26
     e50:	87 ea       	ldi	r24, 0xA7	; 167
     e52:	96 e0       	ldi	r25, 0x06	; 6
     e54:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <xTimerPendFunctionCallFromISR>
     e58:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
	}
     e5c:	29 96       	adiw	r28, 0x09	; 9
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	00 d0       	rcall	.+0      	; 0xe72 <pvPortMalloc+0x6>
     e72:	1f 92       	push	r1
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	8b 83       	std	Y+3, r24	; 0x03
     e7a:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     e7c:	19 82       	std	Y+1, r1	; 0x01
     e7e:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     e80:	0e 94 8b 14 	call	0x2916	; 0x2916 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     e84:	20 91 a2 34 	lds	r18, 0x34A2	; 0x8034a2 <xNextFreeByte>
     e88:	30 91 a3 34 	lds	r19, 0x34A3	; 0x8034a3 <xNextFreeByte+0x1>
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	88 38       	cpi	r24, 0x88	; 136
     e96:	93 41       	sbci	r25, 0x13	; 19
     e98:	18 f5       	brcc	.+70     	; 0xee0 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     e9a:	20 91 a2 34 	lds	r18, 0x34A2	; 0x8034a2 <xNextFreeByte>
     e9e:	30 91 a3 34 	lds	r19, 0x34A3	; 0x8034a3 <xNextFreeByte+0x1>
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	28 0f       	add	r18, r24
     ea8:	39 1f       	adc	r19, r25
     eaa:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <xNextFreeByte>
     eae:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     eb2:	82 17       	cp	r24, r18
     eb4:	93 07       	cpc	r25, r19
     eb6:	a0 f4       	brcc	.+40     	; 0xee0 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     eb8:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <xNextFreeByte>
     ebc:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <xNextFreeByte+0x1>
     ec0:	86 5e       	subi	r24, 0xE6	; 230
     ec2:	9e 4d       	sbci	r25, 0xDE	; 222
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     ec8:	20 91 a2 34 	lds	r18, 0x34A2	; 0x8034a2 <xNextFreeByte>
     ecc:	30 91 a3 34 	lds	r19, 0x34A3	; 0x8034a3 <xNextFreeByte+0x1>
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	82 0f       	add	r24, r18
     ed6:	93 1f       	adc	r25, r19
     ed8:	80 93 a2 34 	sts	0x34A2, r24	; 0x8034a2 <xNextFreeByte>
     edc:	90 93 a3 34 	sts	0x34A3, r25	; 0x8034a3 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     ee0:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ee8:	24 96       	adiw	r28, 0x04	; 4
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	1f 92       	push	r1
     efa:	1f 92       	push	r1
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     f04:	00 00       	nop
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	1f 92       	push	r1
     f16:	1f 92       	push	r1
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	9c 01       	movw	r18, r24
     f26:	2d 5f       	subi	r18, 0xFD	; 253
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	fc 01       	movw	r30, r24
     f30:	21 83       	std	Z+1, r18	; 0x01
     f32:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     f34:	29 81       	ldd	r18, Y+1	; 0x01
     f36:	3a 81       	ldd	r19, Y+2	; 0x02
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	dc 01       	movw	r26, r24
     f3e:	f9 01       	movw	r30, r18
     f40:	83 83       	std	Z+3, r24	; 0x03
     f42:	94 83       	std	Z+4, r25	; 0x04
     f44:	a5 83       	std	Z+5, r26	; 0x05
     f46:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	9c 01       	movw	r18, r24
     f4e:	2d 5f       	subi	r18, 0xFD	; 253
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	fc 01       	movw	r30, r24
     f58:	27 83       	std	Z+7, r18	; 0x07
     f5a:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	9c 01       	movw	r18, r24
     f62:	2d 5f       	subi	r18, 0xFD	; 253
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	fc 01       	movw	r30, r24
     f6c:	21 87       	std	Z+9, r18	; 0x09
     f6e:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	fc 01       	movw	r30, r24
     f76:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     f78:	00 00       	nop
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	1f 92       	push	r1
     f8a:	1f 92       	push	r1
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	fc 01       	movw	r30, r24
     f9a:	12 86       	std	Z+10, r1	; 0x0a
     f9c:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     f9e:	00 00       	nop
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <vListInsertEnd+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <vListInsertEnd+0x8>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	6d 83       	std	Y+5, r22	; 0x05
     fbc:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	fc 01       	movw	r30, r24
     fc4:	81 81       	ldd	r24, Z+1	; 0x01
     fc6:	92 81       	ldd	r25, Z+2	; 0x02
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	29 81       	ldd	r18, Y+1	; 0x01
     fd2:	3a 81       	ldd	r19, Y+2	; 0x02
     fd4:	fc 01       	movw	r30, r24
     fd6:	24 83       	std	Z+4, r18	; 0x04
     fd8:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	fc 01       	movw	r30, r24
     fe0:	26 81       	ldd	r18, Z+6	; 0x06
     fe2:	37 81       	ldd	r19, Z+7	; 0x07
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	fc 01       	movw	r30, r24
     fea:	26 83       	std	Z+6, r18	; 0x06
     fec:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	fc 01       	movw	r30, r24
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	97 81       	ldd	r25, Z+7	; 0x07
     ff8:	2d 81       	ldd	r18, Y+5	; 0x05
     ffa:	3e 81       	ldd	r19, Y+6	; 0x06
     ffc:	fc 01       	movw	r30, r24
     ffe:	24 83       	std	Z+4, r18	; 0x04
    1000:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	2d 81       	ldd	r18, Y+5	; 0x05
    1008:	3e 81       	ldd	r19, Y+6	; 0x06
    100a:	fc 01       	movw	r30, r24
    100c:	26 83       	std	Z+6, r18	; 0x06
    100e:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	2b 81       	ldd	r18, Y+3	; 0x03
    1016:	3c 81       	ldd	r19, Y+4	; 0x04
    1018:	fc 01       	movw	r30, r24
    101a:	22 87       	std	Z+10, r18	; 0x0a
    101c:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	fc 01       	movw	r30, r24
    1024:	80 81       	ld	r24, Z
    1026:	21 e0       	ldi	r18, 0x01	; 1
    1028:	28 0f       	add	r18, r24
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	fc 01       	movw	r30, r24
    1030:	20 83       	st	Z, r18
}
    1032:	00 00       	nop
    1034:	26 96       	adiw	r28, 0x06	; 6
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	2a 97       	sbiw	r28, 0x0a	; 10
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	8f 83       	std	Y+7, r24	; 0x07
    1050:	98 87       	std	Y+8, r25	; 0x08
    1052:	69 87       	std	Y+9, r22	; 0x09
    1054:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1056:	89 85       	ldd	r24, Y+9	; 0x09
    1058:	9a 85       	ldd	r25, Y+10	; 0x0a
    105a:	fc 01       	movw	r30, r24
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	a2 81       	ldd	r26, Z+2	; 0x02
    1062:	b3 81       	ldd	r27, Z+3	; 0x03
    1064:	8b 83       	std	Y+3, r24	; 0x03
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	ad 83       	std	Y+5, r26	; 0x05
    106a:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	ad 81       	ldd	r26, Y+5	; 0x05
    1072:	be 81       	ldd	r27, Y+6	; 0x06
    1074:	8f 3f       	cpi	r24, 0xFF	; 255
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	af 4f       	sbci	r26, 0xFF	; 255
    107a:	bf 4f       	sbci	r27, 0xFF	; 255
    107c:	41 f4       	brne	.+16     	; 0x108e <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	fc 01       	movw	r30, r24
    1084:	81 85       	ldd	r24, Z+9	; 0x09
    1086:	92 85       	ldd	r25, Z+10	; 0x0a
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	20 c0       	rjmp	.+64     	; 0x10ce <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    108e:	8f 81       	ldd	r24, Y+7	; 0x07
    1090:	98 85       	ldd	r25, Y+8	; 0x08
    1092:	03 96       	adiw	r24, 0x03	; 3
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	07 c0       	rjmp	.+14     	; 0x10a8 <vListInsert+0x68>
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	fc 01       	movw	r30, r24
    10a0:	84 81       	ldd	r24, Z+4	; 0x04
    10a2:	95 81       	ldd	r25, Z+5	; 0x05
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	fc 01       	movw	r30, r24
    10ae:	84 81       	ldd	r24, Z+4	; 0x04
    10b0:	95 81       	ldd	r25, Z+5	; 0x05
    10b2:	fc 01       	movw	r30, r24
    10b4:	20 81       	ld	r18, Z
    10b6:	31 81       	ldd	r19, Z+1	; 0x01
    10b8:	42 81       	ldd	r20, Z+2	; 0x02
    10ba:	53 81       	ldd	r21, Z+3	; 0x03
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	ad 81       	ldd	r26, Y+5	; 0x05
    10c2:	be 81       	ldd	r27, Y+6	; 0x06
    10c4:	82 17       	cp	r24, r18
    10c6:	93 07       	cpc	r25, r19
    10c8:	a4 07       	cpc	r26, r20
    10ca:	b5 07       	cpc	r27, r21
    10cc:	30 f7       	brcc	.-52     	; 0x109a <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	fc 01       	movw	r30, r24
    10d4:	24 81       	ldd	r18, Z+4	; 0x04
    10d6:	35 81       	ldd	r19, Z+5	; 0x05
    10d8:	89 85       	ldd	r24, Y+9	; 0x09
    10da:	9a 85       	ldd	r25, Y+10	; 0x0a
    10dc:	fc 01       	movw	r30, r24
    10de:	24 83       	std	Z+4, r18	; 0x04
    10e0:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	fc 01       	movw	r30, r24
    10e8:	84 81       	ldd	r24, Z+4	; 0x04
    10ea:	95 81       	ldd	r25, Z+5	; 0x05
    10ec:	29 85       	ldd	r18, Y+9	; 0x09
    10ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    10f0:	fc 01       	movw	r30, r24
    10f2:	26 83       	std	Z+6, r18	; 0x06
    10f4:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	29 81       	ldd	r18, Y+1	; 0x01
    10fc:	3a 81       	ldd	r19, Y+2	; 0x02
    10fe:	fc 01       	movw	r30, r24
    1100:	26 83       	std	Z+6, r18	; 0x06
    1102:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	29 85       	ldd	r18, Y+9	; 0x09
    110a:	3a 85       	ldd	r19, Y+10	; 0x0a
    110c:	fc 01       	movw	r30, r24
    110e:	24 83       	std	Z+4, r18	; 0x04
    1110:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	2f 81       	ldd	r18, Y+7	; 0x07
    1118:	38 85       	ldd	r19, Y+8	; 0x08
    111a:	fc 01       	movw	r30, r24
    111c:	22 87       	std	Z+10, r18	; 0x0a
    111e:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	98 85       	ldd	r25, Y+8	; 0x08
    1124:	fc 01       	movw	r30, r24
    1126:	80 81       	ld	r24, Z
    1128:	21 e0       	ldi	r18, 0x01	; 1
    112a:	28 0f       	add	r18, r24
    112c:	8f 81       	ldd	r24, Y+7	; 0x07
    112e:	98 85       	ldd	r25, Y+8	; 0x08
    1130:	fc 01       	movw	r30, r24
    1132:	20 83       	st	Z, r18
}
    1134:	00 00       	nop
    1136:	2a 96       	adiw	r28, 0x0a	; 10
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	00 d0       	rcall	.+0      	; 0x1148 <uxListRemove+0x6>
    1148:	1f 92       	push	r1
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	fc 01       	movw	r30, r24
    1158:	82 85       	ldd	r24, Z+10	; 0x0a
    115a:	93 85       	ldd	r25, Z+11	; 0x0b
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	fc 01       	movw	r30, r24
    1166:	84 81       	ldd	r24, Z+4	; 0x04
    1168:	95 81       	ldd	r25, Z+5	; 0x05
    116a:	2b 81       	ldd	r18, Y+3	; 0x03
    116c:	3c 81       	ldd	r19, Y+4	; 0x04
    116e:	f9 01       	movw	r30, r18
    1170:	26 81       	ldd	r18, Z+6	; 0x06
    1172:	37 81       	ldd	r19, Z+7	; 0x07
    1174:	fc 01       	movw	r30, r24
    1176:	26 83       	std	Z+6, r18	; 0x06
    1178:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	fc 01       	movw	r30, r24
    1180:	86 81       	ldd	r24, Z+6	; 0x06
    1182:	97 81       	ldd	r25, Z+7	; 0x07
    1184:	2b 81       	ldd	r18, Y+3	; 0x03
    1186:	3c 81       	ldd	r19, Y+4	; 0x04
    1188:	f9 01       	movw	r30, r18
    118a:	24 81       	ldd	r18, Z+4	; 0x04
    118c:	35 81       	ldd	r19, Z+5	; 0x05
    118e:	fc 01       	movw	r30, r24
    1190:	24 83       	std	Z+4, r18	; 0x04
    1192:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	fc 01       	movw	r30, r24
    119a:	21 81       	ldd	r18, Z+1	; 0x01
    119c:	32 81       	ldd	r19, Z+2	; 0x02
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	28 17       	cp	r18, r24
    11a4:	39 07       	cpc	r19, r25
    11a6:	51 f4       	brne	.+20     	; 0x11bc <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	fc 01       	movw	r30, r24
    11ae:	26 81       	ldd	r18, Z+6	; 0x06
    11b0:	37 81       	ldd	r19, Z+7	; 0x07
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	fc 01       	movw	r30, r24
    11b8:	21 83       	std	Z+1, r18	; 0x01
    11ba:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	fc 01       	movw	r30, r24
    11c2:	12 86       	std	Z+10, r1	; 0x0a
    11c4:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	fc 01       	movw	r30, r24
    11cc:	80 81       	ld	r24, Z
    11ce:	2f ef       	ldi	r18, 0xFF	; 255
    11d0:	28 0f       	add	r18, r24
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	fc 01       	movw	r30, r24
    11e0:	80 81       	ld	r24, Z
}
    11e2:	24 96       	adiw	r28, 0x04	; 4
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	80 ea       	ldi	r24, 0xA0	; 160
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	fc 01       	movw	r30, r24
    11fe:	12 81       	ldd	r17, Z+2	; 0x02
    1200:	80 ea       	ldi	r24, 0xA0	; 160
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	20 ea       	ldi	r18, 0xA0	; 160
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	f9 01       	movw	r30, r18
    120a:	22 81       	ldd	r18, Z+2	; 0x02
    120c:	28 7f       	andi	r18, 0xF8	; 248
    120e:	fc 01       	movw	r30, r24
    1210:	22 83       	std	Z+2, r18	; 0x02
    1212:	81 2f       	mov	r24, r17
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	08 95       	ret

0000121c <pxPortInitialiseStack>:
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	2a 97       	sbiw	r28, 0x0a	; 10
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	8d 83       	std	Y+5, r24	; 0x05
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	6f 83       	std	Y+7, r22	; 0x07
    1230:	78 87       	std	Y+8, r23	; 0x08
    1232:	49 87       	std	Y+9, r20	; 0x09
    1234:	5a 87       	std	Y+10, r21	; 0x0a
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	21 e1       	ldi	r18, 0x11	; 17
    123c:	fc 01       	movw	r30, r24
    123e:	20 83       	st	Z, r18
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	8d 83       	std	Y+5, r24	; 0x05
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	22 e2       	ldi	r18, 0x22	; 34
    1250:	fc 01       	movw	r30, r24
    1252:	20 83       	st	Z, r18
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	9e 81       	ldd	r25, Y+6	; 0x06
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	8d 83       	std	Y+5, r24	; 0x05
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	23 e3       	ldi	r18, 0x33	; 51
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	8d 83       	std	Y+5, r24	; 0x05
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8f 81       	ldd	r24, Y+7	; 0x07
    1274:	98 85       	ldd	r25, Y+8	; 0x08
    1276:	cc 01       	movw	r24, r24
    1278:	a0 e0       	ldi	r26, 0x00	; 0
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	ab 83       	std	Y+3, r26	; 0x03
    1282:	bc 83       	std	Y+4, r27	; 0x04
    1284:	29 81       	ldd	r18, Y+1	; 0x01
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	8d 83       	std	Y+5, r24	; 0x05
    1296:	9e 83       	std	Y+6, r25	; 0x06
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	ab 81       	ldd	r26, Y+3	; 0x03
    129e:	bc 81       	ldd	r27, Y+4	; 0x04
    12a0:	89 2f       	mov	r24, r25
    12a2:	9a 2f       	mov	r25, r26
    12a4:	ab 2f       	mov	r26, r27
    12a6:	bb 27       	eor	r27, r27
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	ab 83       	std	Y+3, r26	; 0x03
    12ae:	bc 83       	std	Y+4, r27	; 0x04
    12b0:	29 81       	ldd	r18, Y+1	; 0x01
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	ab 81       	ldd	r26, Y+3	; 0x03
    12ca:	bc 81       	ldd	r27, Y+4	; 0x04
    12cc:	89 2f       	mov	r24, r25
    12ce:	9a 2f       	mov	r25, r26
    12d0:	ab 2f       	mov	r26, r27
    12d2:	bb 27       	eor	r27, r27
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	ab 83       	std	Y+3, r26	; 0x03
    12da:	bc 83       	std	Y+4, r27	; 0x04
    12dc:	29 81       	ldd	r18, Y+1	; 0x01
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	fc 01       	movw	r30, r24
    12e4:	20 83       	st	Z, r18
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	21 e3       	ldi	r18, 0x31	; 49
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	20 e8       	ldi	r18, 0x80	; 128
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	8d 83       	std	Y+5, r24	; 0x05
    1316:	9e 83       	std	Y+6, r25	; 0x06
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	27 e8       	ldi	r18, 0x87	; 135
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	fc 01       	movw	r30, r24
    1332:	10 82       	st	Z, r1
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	fc 01       	movw	r30, r24
    1344:	10 82       	st	Z, r1
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	8d 83       	std	Y+5, r24	; 0x05
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	22 e0       	ldi	r18, 0x02	; 2
    1356:	fc 01       	movw	r30, r24
    1358:	20 83       	st	Z, r18
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	23 e0       	ldi	r18, 0x03	; 3
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	8d 83       	std	Y+5, r24	; 0x05
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	24 e0       	ldi	r18, 0x04	; 4
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	25 e0       	ldi	r18, 0x05	; 5
    1392:	fc 01       	movw	r30, r24
    1394:	20 83       	st	Z, r18
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	26 e0       	ldi	r18, 0x06	; 6
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	9e 83       	std	Y+6, r25	; 0x06
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	27 e0       	ldi	r18, 0x07	; 7
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 83       	st	Z, r18
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	9e 83       	std	Y+6, r25	; 0x06
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	28 e0       	ldi	r18, 0x08	; 8
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	8d 83       	std	Y+5, r24	; 0x05
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	29 e0       	ldi	r18, 0x09	; 9
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	20 e1       	ldi	r18, 0x10	; 16
    13f6:	fc 01       	movw	r30, r24
    13f8:	20 83       	st	Z, r18
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	21 e1       	ldi	r18, 0x11	; 17
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 81       	ldd	r24, Y+5	; 0x05
    141a:	9e 81       	ldd	r25, Y+6	; 0x06
    141c:	22 e1       	ldi	r18, 0x12	; 18
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	23 e1       	ldi	r18, 0x13	; 19
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	24 e1       	ldi	r18, 0x14	; 20
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	25 e1       	ldi	r18, 0x15	; 21
    145a:	fc 01       	movw	r30, r24
    145c:	20 83       	st	Z, r18
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	8d 83       	std	Y+5, r24	; 0x05
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	26 e1       	ldi	r18, 0x16	; 22
    146e:	fc 01       	movw	r30, r24
    1470:	20 83       	st	Z, r18
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	27 e1       	ldi	r18, 0x17	; 23
    1482:	fc 01       	movw	r30, r24
    1484:	20 83       	st	Z, r18
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	8d 83       	std	Y+5, r24	; 0x05
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	28 e1       	ldi	r18, 0x18	; 24
    1496:	fc 01       	movw	r30, r24
    1498:	20 83       	st	Z, r18
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	29 e1       	ldi	r18, 0x19	; 25
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 83       	st	Z, r18
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	9e 83       	std	Y+6, r25	; 0x06
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	20 e2       	ldi	r18, 0x20	; 32
    14be:	fc 01       	movw	r30, r24
    14c0:	20 83       	st	Z, r18
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	21 e2       	ldi	r18, 0x21	; 33
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 83       	st	Z, r18
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	8d 83       	std	Y+5, r24	; 0x05
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	22 e2       	ldi	r18, 0x22	; 34
    14e6:	fc 01       	movw	r30, r24
    14e8:	20 83       	st	Z, r18
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	23 e2       	ldi	r18, 0x23	; 35
    14fa:	fc 01       	movw	r30, r24
    14fc:	20 83       	st	Z, r18
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	8d 83       	std	Y+5, r24	; 0x05
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	cc 01       	movw	r24, r24
    150e:	a0 e0       	ldi	r26, 0x00	; 0
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	ab 83       	std	Y+3, r26	; 0x03
    1518:	bc 83       	std	Y+4, r27	; 0x04
    151a:	29 81       	ldd	r18, Y+1	; 0x01
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	fc 01       	movw	r30, r24
    1522:	20 83       	st	Z, r18
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	ab 81       	ldd	r26, Y+3	; 0x03
    1534:	bc 81       	ldd	r27, Y+4	; 0x04
    1536:	89 2f       	mov	r24, r25
    1538:	9a 2f       	mov	r25, r26
    153a:	ab 2f       	mov	r26, r27
    153c:	bb 27       	eor	r27, r27
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	ab 83       	std	Y+3, r26	; 0x03
    1544:	bc 83       	std	Y+4, r27	; 0x04
    1546:	29 81       	ldd	r18, Y+1	; 0x01
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	fc 01       	movw	r30, r24
    154e:	20 83       	st	Z, r18
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	26 e2       	ldi	r18, 0x26	; 38
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	27 e2       	ldi	r18, 0x27	; 39
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	28 e2       	ldi	r18, 0x28	; 40
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	29 e2       	ldi	r18, 0x29	; 41
    159c:	fc 01       	movw	r30, r24
    159e:	20 83       	st	Z, r18
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	8d 83       	std	Y+5, r24	; 0x05
    15a8:	9e 83       	std	Y+6, r25	; 0x06
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	20 e3       	ldi	r18, 0x30	; 48
    15b0:	fc 01       	movw	r30, r24
    15b2:	20 83       	st	Z, r18
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	2a 96       	adiw	r28, 0x0a	; 10
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <xPortStartScheduler>:
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	0e 94 2e 0c 	call	0x185c	; 0x185c <prvSetupTimerInterrupt>
    15da:	a0 91 a4 34 	lds	r26, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    15de:	b0 91 a5 34 	lds	r27, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    15e2:	0d 90       	ld	r0, X+
    15e4:	0d be       	out	0x3d, r0	; 61
    15e6:	0d 90       	ld	r0, X+
    15e8:	0e be       	out	0x3e, r0	; 62
    15ea:	ef 91       	pop	r30
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	bf 91       	pop	r27
    15f2:	af 91       	pop	r26
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	7f 91       	pop	r23
    15fa:	6f 91       	pop	r22
    15fc:	5f 91       	pop	r21
    15fe:	4f 91       	pop	r20
    1600:	3f 91       	pop	r19
    1602:	2f 91       	pop	r18
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	bf 90       	pop	r11
    1612:	af 90       	pop	r10
    1614:	9f 90       	pop	r9
    1616:	8f 90       	pop	r8
    1618:	7f 90       	pop	r7
    161a:	6f 90       	pop	r6
    161c:	5f 90       	pop	r5
    161e:	4f 90       	pop	r4
    1620:	3f 90       	pop	r3
    1622:	2f 90       	pop	r2
    1624:	1f 90       	pop	r1
    1626:	0f 90       	pop	r0
    1628:	ff 91       	pop	r31
    162a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    162e:	ff 91       	pop	r31
    1630:	ff bf       	out	0x3f, r31	; 63
    1632:	ff 91       	pop	r31
    1634:	08 95       	ret
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    163e:	ff 93       	push	r31
    1640:	ff b7       	in	r31, 0x3f	; 63
    1642:	ff 93       	push	r31
    1644:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1648:	ff 93       	push	r31
    164a:	f8 7f       	andi	r31, 0xF8	; 248
    164c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1650:	0f 92       	push	r0
    1652:	1f 92       	push	r1
    1654:	11 24       	eor	r1, r1
    1656:	2f 92       	push	r2
    1658:	3f 92       	push	r3
    165a:	4f 92       	push	r4
    165c:	5f 92       	push	r5
    165e:	6f 92       	push	r6
    1660:	7f 92       	push	r7
    1662:	8f 92       	push	r8
    1664:	9f 92       	push	r9
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ef 93       	push	r30
    1690:	a0 91 a4 34 	lds	r26, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    1694:	b0 91 a5 34 	lds	r27, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    1698:	0d b6       	in	r0, 0x3d	; 61
    169a:	0d 92       	st	X+, r0
    169c:	0e b6       	in	r0, 0x3e	; 62
    169e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    16a0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    16a4:	a0 91 a4 34 	lds	r26, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    16a8:	b0 91 a5 34 	lds	r27, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    16ac:	0d 90       	ld	r0, X+
    16ae:	0d be       	out	0x3d, r0	; 61
    16b0:	0d 90       	ld	r0, X+
    16b2:	0e be       	out	0x3e, r0	; 62
    16b4:	ef 91       	pop	r30
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	bf 91       	pop	r27
    16bc:	af 91       	pop	r26
    16be:	9f 91       	pop	r25
    16c0:	8f 91       	pop	r24
    16c2:	7f 91       	pop	r23
    16c4:	6f 91       	pop	r22
    16c6:	5f 91       	pop	r21
    16c8:	4f 91       	pop	r20
    16ca:	3f 91       	pop	r19
    16cc:	2f 91       	pop	r18
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	bf 90       	pop	r11
    16dc:	af 90       	pop	r10
    16de:	9f 90       	pop	r9
    16e0:	8f 90       	pop	r8
    16e2:	7f 90       	pop	r7
    16e4:	6f 90       	pop	r6
    16e6:	5f 90       	pop	r5
    16e8:	4f 90       	pop	r4
    16ea:	3f 90       	pop	r3
    16ec:	2f 90       	pop	r2
    16ee:	1f 90       	pop	r1
    16f0:	0f 90       	pop	r0
    16f2:	ff 91       	pop	r31
    16f4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    16f8:	ff 91       	pop	r31
    16fa:	ff bf       	out	0x3f, r31	; 63
    16fc:	ff 91       	pop	r31
	asm volatile ( "ret" );
    16fe:	08 95       	ret
	...

00001702 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	1f 92       	push	r1
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    1710:	80 91 65 35 	lds	r24, 0x3565	; 0x803565 <intTaskSwitchPending>
    1714:	98 2f       	mov	r25, r24
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	89 2b       	or	r24, r25
    171a:	80 93 65 35 	sts	0x3565, r24	; 0x803565 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    171e:	80 ea       	ldi	r24, 0xA0	; 160
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	61 f0       	breq	.+24     	; 0x1742 <portTaskSwitchContext+0x40>
    172a:	80 ea       	ldi	r24, 0xA0	; 160
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	fc 01       	movw	r30, r24
    1730:	80 81       	ld	r24, Z
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	31 f0       	breq	.+12     	; 0x1742 <portTaskSwitchContext+0x40>
    1736:	80 ea       	ldi	r24, 0xA0	; 160
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	fc 01       	movw	r30, r24
    173c:	80 81       	ld	r24, Z
    173e:	84 30       	cpi	r24, 0x04	; 4
    1740:	79 f4       	brne	.+30     	; 0x1760 <portTaskSwitchContext+0x5e>
    1742:	80 91 65 35 	lds	r24, 0x3565	; 0x803565 <intTaskSwitchPending>
    1746:	88 23       	and	r24, r24
    1748:	59 f0       	breq	.+22     	; 0x1760 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    174a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_portSetInterruptMaskFromIsr>
    174e:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    1750:	10 92 65 35 	sts	0x3565, r1	; 0x803565 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    1754:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    1758:	80 ea       	ldi	r24, 0xA0	; 160
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	fc 01       	movw	r30, r24
    175e:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    1760:	00 00       	nop
    1762:	0f 90       	pop	r0
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	08 95       	ret

0000176c <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    176c:	1f 93       	push	r17
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    1776:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_portSetInterruptMaskFromIsr>
    177a:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    177c:	0e 94 56 15 	call	0x2aac	; 0x2aac <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    1780:	80 ea       	ldi	r24, 0xA0	; 160
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	12 83       	std	Z+2, r17	; 0x02
	}
    1788:	00 00       	nop
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	08 95       	ret

00001792 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    1792:	ff 93       	push	r31
    1794:	ff b7       	in	r31, 0x3f	; 63
    1796:	ff 93       	push	r31
    1798:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    179c:	ff 93       	push	r31
    179e:	f8 7f       	andi	r31, 0xF8	; 248
    17a0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17a4:	0f 92       	push	r0
    17a6:	1f 92       	push	r1
    17a8:	11 24       	eor	r1, r1
    17aa:	2f 92       	push	r2
    17ac:	3f 92       	push	r3
    17ae:	4f 92       	push	r4
    17b0:	5f 92       	push	r5
    17b2:	6f 92       	push	r6
    17b4:	7f 92       	push	r7
    17b6:	8f 92       	push	r8
    17b8:	9f 92       	push	r9
    17ba:	af 92       	push	r10
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	2f 93       	push	r18
    17cc:	3f 93       	push	r19
    17ce:	4f 93       	push	r20
    17d0:	5f 93       	push	r21
    17d2:	6f 93       	push	r22
    17d4:	7f 93       	push	r23
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ef 93       	push	r30
    17e4:	a0 91 a4 34 	lds	r26, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    17e8:	b0 91 a5 34 	lds	r27, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    17ec:	0d b6       	in	r0, 0x3d	; 61
    17ee:	0d 92       	st	X+, r0
    17f0:	0e b6       	in	r0, 0x3e	; 62
    17f2:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    17f4:	0e 94 b6 0b 	call	0x176c	; 0x176c <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	0e 94 81 0b 	call	0x1702	; 0x1702 <portTaskSwitchContext>
    17fe:	a0 91 a4 34 	lds	r26, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    1802:	b0 91 a5 34 	lds	r27, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    1806:	0d 90       	ld	r0, X+
    1808:	0d be       	out	0x3d, r0	; 61
    180a:	0d 90       	ld	r0, X+
    180c:	0e be       	out	0x3e, r0	; 62
    180e:	ef 91       	pop	r30
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	bf 91       	pop	r27
    1816:	af 91       	pop	r26
    1818:	9f 91       	pop	r25
    181a:	8f 91       	pop	r24
    181c:	7f 91       	pop	r23
    181e:	6f 91       	pop	r22
    1820:	5f 91       	pop	r21
    1822:	4f 91       	pop	r20
    1824:	3f 91       	pop	r19
    1826:	2f 91       	pop	r18
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	9f 90       	pop	r9
    183a:	8f 90       	pop	r8
    183c:	7f 90       	pop	r7
    183e:	6f 90       	pop	r6
    1840:	5f 90       	pop	r5
    1842:	4f 90       	pop	r4
    1844:	3f 90       	pop	r3
    1846:	2f 90       	pop	r2
    1848:	1f 90       	pop	r1
    184a:	0f 90       	pop	r0
    184c:	ff 91       	pop	r31
    184e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1852:	ff 91       	pop	r31
    1854:	ff bf       	out	0x3f, r31	; 63
    1856:	ff 91       	pop	r31
    1858:	18 95       	reti
	...

0000185c <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	00 d0       	rcall	.+0      	; 0x1862 <prvSetupTimerInterrupt+0x6>
    1862:	1f 92       	push	r1
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	9d e7       	ldi	r25, 0x7D	; 125
    186c:	a0 e0       	ldi	r26, 0x00	; 0
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	ab 83       	std	Y+3, r26	; 0x03
    1876:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
    187c:	ab 81       	ldd	r26, Y+3	; 0x03
    187e:	bc 81       	ldd	r27, Y+4	; 0x04
    1880:	68 94       	set
    1882:	15 f8       	bld	r1, 5
    1884:	b6 95       	lsr	r27
    1886:	a7 95       	ror	r26
    1888:	97 95       	ror	r25
    188a:	87 95       	ror	r24
    188c:	16 94       	lsr	r1
    188e:	d1 f7       	brne	.-12     	; 0x1884 <prvSetupTimerInterrupt+0x28>
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	ab 83       	std	Y+3, r26	; 0x03
    1896:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	ab 81       	ldd	r26, Y+3	; 0x03
    189e:	bc 81       	ldd	r27, Y+4	; 0x04
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	a1 09       	sbc	r26, r1
    18a4:	b1 09       	sbc	r27, r1
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	ab 83       	std	Y+3, r26	; 0x03
    18ac:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	98 e0       	ldi	r25, 0x08	; 8
    18b2:	29 81       	ldd	r18, Y+1	; 0x01
    18b4:	3a 81       	ldd	r19, Y+2	; 0x02
    18b6:	fc 01       	movw	r30, r24
    18b8:	26 a3       	std	Z+38, r18	; 0x26
    18ba:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    18bc:	65 e0       	ldi	r22, 0x05	; 5
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	98 e0       	ldi	r25, 0x08	; 8
    18c2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	98 e0       	ldi	r25, 0x08	; 8
    18cc:	0e 94 93 03 	call	0x726	; 0x726 <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    18d0:	00 00       	nop
    18d2:	24 96       	adiw	r28, 0x04	; 4
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	25 97       	sbiw	r28, 0x05	; 5
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	8b 83       	std	Y+3, r24	; 0x03
    18ee:	9c 83       	std	Y+4, r25	; 0x04
    18f0:	6d 83       	std	Y+5, r22	; 0x05
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    18fe:	ff 93       	push	r31
    1900:	f8 7f       	andi	r31, 0xF8	; 248
    1902:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	29 81       	ldd	r18, Y+1	; 0x01
    1912:	3a 81       	ldd	r19, Y+2	; 0x02
    1914:	f9 01       	movw	r30, r18
    1916:	27 8d       	ldd	r18, Z+31	; 0x1f
    1918:	42 2f       	mov	r20, r18
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	29 81       	ldd	r18, Y+1	; 0x01
    191e:	3a 81       	ldd	r19, Y+2	; 0x02
    1920:	f9 01       	movw	r30, r18
    1922:	20 a1       	ldd	r18, Z+32	; 0x20
    1924:	22 2f       	mov	r18, r18
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	42 9f       	mul	r20, r18
    192a:	b0 01       	movw	r22, r0
    192c:	43 9f       	mul	r20, r19
    192e:	70 0d       	add	r23, r0
    1930:	52 9f       	mul	r21, r18
    1932:	70 0d       	add	r23, r0
    1934:	11 24       	eor	r1, r1
    1936:	9b 01       	movw	r18, r22
    1938:	28 0f       	add	r18, r24
    193a:	39 1f       	adc	r19, r25
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	fc 01       	movw	r30, r24
    1942:	22 83       	std	Z+2, r18	; 0x02
    1944:	33 83       	std	Z+3, r19	; 0x03
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	fc 01       	movw	r30, r24
    194c:	16 8e       	std	Z+30, r1	; 0x1e
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	9a 81       	ldd	r25, Y+2	; 0x02
    1952:	fc 01       	movw	r30, r24
    1954:	20 81       	ld	r18, Z
    1956:	31 81       	ldd	r19, Z+1	; 0x01
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	24 83       	std	Z+4, r18	; 0x04
    1960:	35 83       	std	Z+5, r19	; 0x05
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	fc 01       	movw	r30, r24
    1968:	80 81       	ld	r24, Z
    196a:	91 81       	ldd	r25, Z+1	; 0x01
    196c:	29 81       	ldd	r18, Y+1	; 0x01
    196e:	3a 81       	ldd	r19, Y+2	; 0x02
    1970:	f9 01       	movw	r30, r18
    1972:	27 8d       	ldd	r18, Z+31	; 0x1f
    1974:	22 2f       	mov	r18, r18
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	a9 01       	movw	r20, r18
    197a:	41 50       	subi	r20, 0x01	; 1
    197c:	51 09       	sbc	r21, r1
    197e:	29 81       	ldd	r18, Y+1	; 0x01
    1980:	3a 81       	ldd	r19, Y+2	; 0x02
    1982:	f9 01       	movw	r30, r18
    1984:	20 a1       	ldd	r18, Z+32	; 0x20
    1986:	22 2f       	mov	r18, r18
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	42 9f       	mul	r20, r18
    198c:	b0 01       	movw	r22, r0
    198e:	43 9f       	mul	r20, r19
    1990:	70 0d       	add	r23, r0
    1992:	52 9f       	mul	r21, r18
    1994:	70 0d       	add	r23, r0
    1996:	11 24       	eor	r1, r1
    1998:	9b 01       	movw	r18, r22
    199a:	28 0f       	add	r18, r24
    199c:	39 1f       	adc	r19, r25
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	fc 01       	movw	r30, r24
    19a4:	26 83       	std	Z+6, r18	; 0x06
    19a6:	37 83       	std	Z+7, r19	; 0x07
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	2f ef       	ldi	r18, 0xFF	; 255
    19ae:	fc 01       	movw	r30, r24
    19b0:	21 a3       	std	Z+33, r18	; 0x21
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	2f ef       	ldi	r18, 0xFF	; 255
    19b8:	fc 01       	movw	r30, r24
    19ba:	22 a3       	std	Z+34, r18	; 0x22
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	88 23       	and	r24, r24
    19c0:	81 f4       	brne	.+32     	; 0x19e2 <xQueueGenericReset+0x104>
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	fc 01       	movw	r30, r24
    19c8:	80 85       	ldd	r24, Z+8	; 0x08
    19ca:	88 23       	and	r24, r24
    19cc:	a1 f0       	breq	.+40     	; 0x19f6 <xQueueGenericReset+0x118>
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	08 96       	adiw	r24, 0x08	; 8
    19d4:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xTaskRemoveFromEventList>
    19d8:	88 23       	and	r24, r24
    19da:	69 f0       	breq	.+26     	; 0x19f6 <xQueueGenericReset+0x118>
    19dc:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    19e0:	0a c0       	rjmp	.+20     	; 0x19f6 <xQueueGenericReset+0x118>
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	08 96       	adiw	r24, 0x08	; 8
    19e8:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	43 96       	adiw	r24, 0x13	; 19
    19f2:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    19f6:	ff 91       	pop	r31
    19f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	25 96       	adiw	r28, 0x05	; 5
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	08 95       	ret

00001a0a <xQueueGenericCreate>:
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	29 97       	sbiw	r28, 0x09	; 9
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	8f 83       	std	Y+7, r24	; 0x07
    1a1e:	68 87       	std	Y+8, r22	; 0x08
    1a20:	49 87       	std	Y+9, r20	; 0x09
    1a22:	88 85       	ldd	r24, Y+8	; 0x08
    1a24:	88 23       	and	r24, r24
    1a26:	19 f4       	brne	.+6      	; 0x1a2e <xQueueGenericCreate+0x24>
    1a28:	19 82       	std	Y+1, r1	; 0x01
    1a2a:	1a 82       	std	Y+2, r1	; 0x02
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <xQueueGenericCreate+0x42>
    1a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a30:	48 2f       	mov	r20, r24
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	88 85       	ldd	r24, Y+8	; 0x08
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	42 9f       	mul	r20, r18
    1a3c:	c0 01       	movw	r24, r0
    1a3e:	43 9f       	mul	r20, r19
    1a40:	90 0d       	add	r25, r0
    1a42:	52 9f       	mul	r21, r18
    1a44:	90 0d       	add	r25, r0
    1a46:	11 24       	eor	r1, r1
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	85 96       	adiw	r24, 0x25	; 37
    1a52:	0e 94 36 07 	call	0xe6c	; 0xe6c <pvPortMalloc>
    1a56:	8b 83       	std	Y+3, r24	; 0x03
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	89 2b       	or	r24, r25
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <xQueueGenericCreate+0x78>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	85 96       	adiw	r24, 0x25	; 37
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	89 01       	movw	r16, r18
    1a76:	29 85       	ldd	r18, Y+9	; 0x09
    1a78:	ac 01       	movw	r20, r24
    1a7a:	68 85       	ldd	r22, Y+8	; 0x08
    1a7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a7e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <prvInitialiseNewQueue>
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	29 96       	adiw	r28, 0x09	; 9
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <prvInitialiseNewQueue>:
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	27 97       	sbiw	r28, 0x07	; 7
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	6a 83       	std	Y+2, r22	; 0x02
    1aac:	4b 83       	std	Y+3, r20	; 0x03
    1aae:	5c 83       	std	Y+4, r21	; 0x04
    1ab0:	2d 83       	std	Y+5, r18	; 0x05
    1ab2:	0e 83       	std	Y+6, r16	; 0x06
    1ab4:	1f 83       	std	Y+7, r17	; 0x07
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	88 23       	and	r24, r24
    1aba:	41 f4       	brne	.+16     	; 0x1acc <prvInitialiseNewQueue+0x36>
    1abc:	8e 81       	ldd	r24, Y+6	; 0x06
    1abe:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ac2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	20 83       	st	Z, r18
    1ac8:	31 83       	std	Z+1, r19	; 0x01
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <prvInitialiseNewQueue+0x44>
    1acc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ace:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	20 83       	st	Z, r18
    1ad8:	31 83       	std	Z+1, r19	; 0x01
    1ada:	8e 81       	ldd	r24, Y+6	; 0x06
    1adc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ade:	29 81       	ldd	r18, Y+1	; 0x01
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	27 8f       	std	Z+31, r18	; 0x1f
    1ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae8:	2a 81       	ldd	r18, Y+2	; 0x02
    1aea:	fc 01       	movw	r30, r24
    1aec:	20 a3       	std	Z+32, r18	; 0x20
    1aee:	8e 81       	ldd	r24, Y+6	; 0x06
    1af0:	9f 81       	ldd	r25, Y+7	; 0x07
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	0e 94 6f 0c 	call	0x18de	; 0x18de <xQueueGenericReset>
    1af8:	8e 81       	ldd	r24, Y+6	; 0x06
    1afa:	9f 81       	ldd	r25, Y+7	; 0x07
    1afc:	2d 81       	ldd	r18, Y+5	; 0x05
    1afe:	fc 01       	movw	r30, r24
    1b00:	24 a3       	std	Z+36, r18	; 0x24
    1b02:	00 00       	nop
    1b04:	27 96       	adiw	r28, 0x07	; 7
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	08 95       	ret

00001b14 <xQueueGenericSend>:
    1b14:	0f 93       	push	r16
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	62 97       	sbiw	r28, 0x12	; 18
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	8a 87       	std	Y+10, r24	; 0x0a
    1b26:	9b 87       	std	Y+11, r25	; 0x0b
    1b28:	6c 87       	std	Y+12, r22	; 0x0c
    1b2a:	7d 87       	std	Y+13, r23	; 0x0d
    1b2c:	2e 87       	std	Y+14, r18	; 0x0e
    1b2e:	3f 87       	std	Y+15, r19	; 0x0f
    1b30:	48 8b       	std	Y+16, r20	; 0x10
    1b32:	59 8b       	std	Y+17, r21	; 0x11
    1b34:	0a 8b       	std	Y+18, r16	; 0x12
    1b36:	19 82       	std	Y+1, r1	; 0x01
    1b38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b3c:	8a 83       	std	Y+2, r24	; 0x02
    1b3e:	9b 83       	std	Y+3, r25	; 0x03
    1b40:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1b44:	ff 93       	push	r31
    1b46:	f8 7f       	andi	r31, 0xF8	; 248
    1b48:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b50:	fc 01       	movw	r30, r24
    1b52:	26 8d       	ldd	r18, Z+30	; 0x1e
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	9b 81       	ldd	r25, Y+3	; 0x03
    1b58:	fc 01       	movw	r30, r24
    1b5a:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b5c:	28 17       	cp	r18, r24
    1b5e:	18 f0       	brcs	.+6      	; 0x1b66 <xQueueGenericSend+0x52>
    1b60:	8a 89       	ldd	r24, Y+18	; 0x12
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	19 f5       	brne	.+70     	; 0x1bac <xQueueGenericSend+0x98>
    1b66:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b68:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6e:	4a 89       	ldd	r20, Y+18	; 0x12
    1b70:	b9 01       	movw	r22, r18
    1b72:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <prvCopyDataToQueue>
    1b76:	8c 83       	std	Y+4, r24	; 0x04
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	83 89       	ldd	r24, Z+19	; 0x13
    1b80:	88 23       	and	r24, r24
    1b82:	51 f0       	breq	.+20     	; 0x1b98 <xQueueGenericSend+0x84>
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	9b 81       	ldd	r25, Y+3	; 0x03
    1b88:	43 96       	adiw	r24, 0x13	; 19
    1b8a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xTaskRemoveFromEventList>
    1b8e:	88 23       	and	r24, r24
    1b90:	41 f0       	breq	.+16     	; 0x1ba2 <xQueueGenericSend+0x8e>
    1b92:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <xQueueGenericSend+0x8e>
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	88 23       	and	r24, r24
    1b9c:	11 f0       	breq	.+4      	; 0x1ba2 <xQueueGenericSend+0x8e>
    1b9e:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    1ba2:	ff 91       	pop	r31
    1ba4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	6f c0       	rjmp	.+222    	; 0x1c8a <xQueueGenericSend+0x176>
    1bac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bb0:	a8 89       	ldd	r26, Y+16	; 0x10
    1bb2:	b9 89       	ldd	r27, Y+17	; 0x11
    1bb4:	89 2b       	or	r24, r25
    1bb6:	8a 2b       	or	r24, r26
    1bb8:	8b 2b       	or	r24, r27
    1bba:	29 f4       	brne	.+10     	; 0x1bc6 <xQueueGenericSend+0xb2>
    1bbc:	ff 91       	pop	r31
    1bbe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	62 c0       	rjmp	.+196    	; 0x1c8a <xQueueGenericSend+0x176>
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	88 23       	and	r24, r24
    1bca:	31 f4       	brne	.+12     	; 0x1bd8 <xQueueGenericSend+0xc4>
    1bcc:	ce 01       	movw	r24, r28
    1bce:	05 96       	adiw	r24, 0x05	; 5
    1bd0:	0e 94 9c 18 	call	0x3138	; 0x3138 <vTaskInternalSetTimeOutState>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	ff 91       	pop	r31
    1bda:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bde:	0e 94 8b 14 	call	0x2916	; 0x2916 <vTaskSuspendAll>
    1be2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1be6:	ff 93       	push	r31
    1be8:	f8 7f       	andi	r31, 0xF8	; 248
    1bea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	81 a1       	ldd	r24, Z+33	; 0x21
    1bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf8:	21 f4       	brne	.+8      	; 0x1c02 <xQueueGenericSend+0xee>
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfe:	fc 01       	movw	r30, r24
    1c00:	11 a2       	std	Z+33, r1	; 0x21
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	fc 01       	movw	r30, r24
    1c08:	82 a1       	ldd	r24, Z+34	; 0x22
    1c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c0c:	21 f4       	brne	.+8      	; 0x1c16 <xQueueGenericSend+0x102>
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	9b 81       	ldd	r25, Y+3	; 0x03
    1c12:	fc 01       	movw	r30, r24
    1c14:	12 a2       	std	Z+34, r1	; 0x22
    1c16:	ff 91       	pop	r31
    1c18:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c1c:	9e 01       	movw	r18, r28
    1c1e:	22 5f       	subi	r18, 0xF2	; 242
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	ce 01       	movw	r24, r28
    1c24:	05 96       	adiw	r24, 0x05	; 5
    1c26:	b9 01       	movw	r22, r18
    1c28:	0e 94 bf 18 	call	0x317e	; 0x317e <xTaskCheckForTimeOut>
    1c2c:	88 23       	and	r24, r24
    1c2e:	31 f5       	brne	.+76     	; 0x1c7c <xQueueGenericSend+0x168>
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	9b 81       	ldd	r25, Y+3	; 0x03
    1c34:	0e 94 13 11 	call	0x2226	; 0x2226 <prvIsQueueFull>
    1c38:	88 23       	and	r24, r24
    1c3a:	c9 f0       	breq	.+50     	; 0x1c6e <xQueueGenericSend+0x15a>
    1c3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c40:	a8 89       	ldd	r26, Y+16	; 0x10
    1c42:	b9 89       	ldd	r27, Y+17	; 0x11
    1c44:	2a 81       	ldd	r18, Y+2	; 0x02
    1c46:	3b 81       	ldd	r19, Y+3	; 0x03
    1c48:	28 5f       	subi	r18, 0xF8	; 248
    1c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4c:	ac 01       	movw	r20, r24
    1c4e:	bd 01       	movw	r22, r26
    1c50:	c9 01       	movw	r24, r18
    1c52:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <vTaskPlaceOnEventList>
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	0e 94 8d 10 	call	0x211a	; 0x211a <prvUnlockQueue>
    1c5e:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    1c62:	88 23       	and	r24, r24
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <xQueueGenericSend+0x154>
    1c66:	6c cf       	rjmp	.-296    	; 0x1b40 <xQueueGenericSend+0x2c>
    1c68:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    1c6c:	69 cf       	rjmp	.-302    	; 0x1b40 <xQueueGenericSend+0x2c>
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	9b 81       	ldd	r25, Y+3	; 0x03
    1c72:	0e 94 8d 10 	call	0x211a	; 0x211a <prvUnlockQueue>
    1c76:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    1c7a:	62 cf       	rjmp	.-316    	; 0x1b40 <xQueueGenericSend+0x2c>
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	0e 94 8d 10 	call	0x211a	; 0x211a <prvUnlockQueue>
    1c84:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	62 96       	adiw	r28, 0x12	; 18
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <xQueueGenericSendFromISR>:
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	8e 83       	std	Y+6, r24	; 0x06
    1ca8:	9f 83       	std	Y+7, r25	; 0x07
    1caa:	68 87       	std	Y+8, r22	; 0x08
    1cac:	79 87       	std	Y+9, r23	; 0x09
    1cae:	4a 87       	std	Y+10, r20	; 0x0a
    1cb0:	5b 87       	std	Y+11, r21	; 0x0b
    1cb2:	2c 87       	std	Y+12, r18	; 0x0c
    1cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	9b 83       	std	Y+3, r25	; 0x03
    1cbc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_portSetInterruptMaskFromIsr>
    1cc0:	8c 83       	std	Y+4, r24	; 0x04
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	26 8d       	ldd	r18, Z+30	; 0x1e
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cce:	fc 01       	movw	r30, r24
    1cd0:	87 8d       	ldd	r24, Z+31	; 0x1f
    1cd2:	28 17       	cp	r18, r24
    1cd4:	18 f0       	brcs	.+6      	; 0x1cdc <xQueueGenericSendFromISR+0x44>
    1cd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cd8:	82 30       	cpi	r24, 0x02	; 2
    1cda:	89 f5       	brne	.+98     	; 0x1d3e <xQueueGenericSendFromISR+0xa6>
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	82 a1       	ldd	r24, Z+34	; 0x22
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	28 85       	ldd	r18, Y+8	; 0x08
    1ce8:	39 85       	ldd	r19, Y+9	; 0x09
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	4c 85       	ldd	r20, Y+12	; 0x0c
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <prvCopyDataToQueue>
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cfa:	b9 f4       	brne	.+46     	; 0x1d2a <xQueueGenericSendFromISR+0x92>
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1d00:	fc 01       	movw	r30, r24
    1d02:	83 89       	ldd	r24, Z+19	; 0x13
    1d04:	88 23       	and	r24, r24
    1d06:	c1 f0       	breq	.+48     	; 0x1d38 <xQueueGenericSendFromISR+0xa0>
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	43 96       	adiw	r24, 0x13	; 19
    1d0e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xTaskRemoveFromEventList>
    1d12:	88 23       	and	r24, r24
    1d14:	89 f0       	breq	.+34     	; 0x1d38 <xQueueGenericSendFromISR+0xa0>
    1d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1a:	89 2b       	or	r24, r25
    1d1c:	69 f0       	breq	.+26     	; 0x1d38 <xQueueGenericSendFromISR+0xa0>
    1d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d22:	21 e0       	ldi	r18, 0x01	; 1
    1d24:	fc 01       	movw	r30, r24
    1d26:	20 83       	st	Z, r18
    1d28:	07 c0       	rjmp	.+14     	; 0x1d38 <xQueueGenericSendFromISR+0xa0>
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	28 2f       	mov	r18, r24
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	fc 01       	movw	r30, r24
    1d36:	22 a3       	std	Z+34, r18	; 0x22
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <xQueueGenericSendFromISR+0xa8>
    1d3e:	19 82       	std	Y+1, r1	; 0x01
    1d40:	80 ea       	ldi	r24, 0xA0	; 160
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	2c 81       	ldd	r18, Y+4	; 0x04
    1d46:	fc 01       	movw	r30, r24
    1d48:	22 83       	std	Z+2, r18	; 0x02
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	2c 96       	adiw	r28, 0x0c	; 12
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <xQueueReceive>:
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	61 97       	sbiw	r28, 0x11	; 17
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	8a 87       	std	Y+10, r24	; 0x0a
    1d68:	9b 87       	std	Y+11, r25	; 0x0b
    1d6a:	6c 87       	std	Y+12, r22	; 0x0c
    1d6c:	7d 87       	std	Y+13, r23	; 0x0d
    1d6e:	2e 87       	std	Y+14, r18	; 0x0e
    1d70:	3f 87       	std	Y+15, r19	; 0x0f
    1d72:	48 8b       	std	Y+16, r20	; 0x10
    1d74:	59 8b       	std	Y+17, r21	; 0x11
    1d76:	19 82       	std	Y+1, r1	; 0x01
    1d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
    1d7e:	9b 83       	std	Y+3, r25	; 0x03
    1d80:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d84:	ff 93       	push	r31
    1d86:	f8 7f       	andi	r31, 0xF8	; 248
    1d88:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	fc 01       	movw	r30, r24
    1d92:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d94:	8c 83       	std	Y+4, r24	; 0x04
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	88 23       	and	r24, r24
    1d9a:	11 f1       	breq	.+68     	; 0x1de0 <xQueueReceive+0x88>
    1d9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	b9 01       	movw	r22, r18
    1da6:	0e 94 3d 10 	call	0x207a	; 0x207a <prvCopyDataFromQueue>
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	2f ef       	ldi	r18, 0xFF	; 255
    1dae:	28 0f       	add	r18, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	9b 81       	ldd	r25, Y+3	; 0x03
    1db4:	fc 01       	movw	r30, r24
    1db6:	26 8f       	std	Z+30, r18	; 0x1e
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	80 85       	ldd	r24, Z+8	; 0x08
    1dc0:	88 23       	and	r24, r24
    1dc2:	49 f0       	breq	.+18     	; 0x1dd6 <xQueueReceive+0x7e>
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	08 96       	adiw	r24, 0x08	; 8
    1dca:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xTaskRemoveFromEventList>
    1dce:	88 23       	and	r24, r24
    1dd0:	11 f0       	breq	.+4      	; 0x1dd6 <xQueueReceive+0x7e>
    1dd2:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    1dd6:	ff 91       	pop	r31
    1dd8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	76 c0       	rjmp	.+236    	; 0x1ecc <xQueueReceive+0x174>
    1de0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1de2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1de4:	a8 89       	ldd	r26, Y+16	; 0x10
    1de6:	b9 89       	ldd	r27, Y+17	; 0x11
    1de8:	89 2b       	or	r24, r25
    1dea:	8a 2b       	or	r24, r26
    1dec:	8b 2b       	or	r24, r27
    1dee:	29 f4       	brne	.+10     	; 0x1dfa <xQueueReceive+0xa2>
    1df0:	ff 91       	pop	r31
    1df2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	69 c0       	rjmp	.+210    	; 0x1ecc <xQueueReceive+0x174>
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	88 23       	and	r24, r24
    1dfe:	31 f4       	brne	.+12     	; 0x1e0c <xQueueReceive+0xb4>
    1e00:	ce 01       	movw	r24, r28
    1e02:	05 96       	adiw	r24, 0x05	; 5
    1e04:	0e 94 9c 18 	call	0x3138	; 0x3138 <vTaskInternalSetTimeOutState>
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	ff 91       	pop	r31
    1e0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e12:	0e 94 8b 14 	call	0x2916	; 0x2916 <vTaskSuspendAll>
    1e16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e1a:	ff 93       	push	r31
    1e1c:	f8 7f       	andi	r31, 0xF8	; 248
    1e1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	9b 81       	ldd	r25, Y+3	; 0x03
    1e26:	fc 01       	movw	r30, r24
    1e28:	81 a1       	ldd	r24, Z+33	; 0x21
    1e2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <xQueueReceive+0xde>
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	fc 01       	movw	r30, r24
    1e34:	11 a2       	std	Z+33, r1	; 0x21
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	82 a1       	ldd	r24, Z+34	; 0x22
    1e3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e40:	21 f4       	brne	.+8      	; 0x1e4a <xQueueReceive+0xf2>
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	fc 01       	movw	r30, r24
    1e48:	12 a2       	std	Z+34, r1	; 0x22
    1e4a:	ff 91       	pop	r31
    1e4c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e50:	9e 01       	movw	r18, r28
    1e52:	22 5f       	subi	r18, 0xF2	; 242
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	ce 01       	movw	r24, r28
    1e58:	05 96       	adiw	r24, 0x05	; 5
    1e5a:	b9 01       	movw	r22, r18
    1e5c:	0e 94 bf 18 	call	0x317e	; 0x317e <xTaskCheckForTimeOut>
    1e60:	88 23       	and	r24, r24
    1e62:	31 f5       	brne	.+76     	; 0x1eb0 <xQueueReceive+0x158>
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <prvIsQueueEmpty>
    1e6c:	88 23       	and	r24, r24
    1e6e:	c9 f0       	breq	.+50     	; 0x1ea2 <xQueueReceive+0x14a>
    1e70:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e72:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e74:	a8 89       	ldd	r26, Y+16	; 0x10
    1e76:	b9 89       	ldd	r27, Y+17	; 0x11
    1e78:	2a 81       	ldd	r18, Y+2	; 0x02
    1e7a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e7c:	2d 5e       	subi	r18, 0xED	; 237
    1e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e80:	ac 01       	movw	r20, r24
    1e82:	bd 01       	movw	r22, r26
    1e84:	c9 01       	movw	r24, r18
    1e86:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <vTaskPlaceOnEventList>
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	0e 94 8d 10 	call	0x211a	; 0x211a <prvUnlockQueue>
    1e92:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    1e96:	88 23       	and	r24, r24
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <xQueueReceive+0x144>
    1e9a:	72 cf       	rjmp	.-284    	; 0x1d80 <xQueueReceive+0x28>
    1e9c:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    1ea0:	6f cf       	rjmp	.-290    	; 0x1d80 <xQueueReceive+0x28>
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea6:	0e 94 8d 10 	call	0x211a	; 0x211a <prvUnlockQueue>
    1eaa:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    1eae:	68 cf       	rjmp	.-304    	; 0x1d80 <xQueueReceive+0x28>
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	0e 94 8d 10 	call	0x211a	; 0x211a <prvUnlockQueue>
    1eb8:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <prvIsQueueEmpty>
    1ec4:	88 23       	and	r24, r24
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <xQueueReceive+0x172>
    1ec8:	5b cf       	rjmp	.-330    	; 0x1d80 <xQueueReceive+0x28>
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	61 96       	adiw	r28, 0x11	; 17
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	08 95       	ret

00001ed8 <uxQueueMessagesWaiting>:
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <uxQueueMessagesWaiting+0x6>
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
    1ee4:	9b 83       	std	Y+3, r25	; 0x03
    1ee6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1eea:	ff 93       	push	r31
    1eec:	f8 7f       	andi	r31, 0xF8	; 248
    1eee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	ff 91       	pop	r31
    1efe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	23 96       	adiw	r28, 0x03	; 3
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret

00001f10 <prvCopyDataToQueue>:
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	27 97       	sbiw	r28, 0x07	; 7
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	6d 83       	std	Y+5, r22	; 0x05
    1f24:	7e 83       	std	Y+6, r23	; 0x06
    1f26:	4f 83       	std	Y+7, r20	; 0x07
    1f28:	1a 82       	std	Y+2, r1	; 0x02
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2e:	fc 01       	movw	r30, r24
    1f30:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	fc 01       	movw	r30, r24
    1f3a:	80 a1       	ldd	r24, Z+32	; 0x20
    1f3c:	88 23       	and	r24, r24
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <prvCopyDataToQueue+0x32>
    1f40:	8e c0       	rjmp	.+284    	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    1f42:	8f 81       	ldd	r24, Y+7	; 0x07
    1f44:	88 23       	and	r24, r24
    1f46:	d9 f5       	brne	.+118    	; 0x1fbe <prvCopyDataToQueue+0xae>
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	80 a1       	ldd	r24, Z+32	; 0x20
    1f50:	48 2f       	mov	r20, r24
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	fc 01       	movw	r30, r24
    1f5a:	84 81       	ldd	r24, Z+4	; 0x04
    1f5c:	95 81       	ldd	r25, Z+5	; 0x05
    1f5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f60:	3e 81       	ldd	r19, Y+6	; 0x06
    1f62:	b9 01       	movw	r22, r18
    1f64:	0e 94 0a 32 	call	0x6414	; 0x6414 <memcpy>
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	24 81       	ldd	r18, Z+4	; 0x04
    1f70:	35 81       	ldd	r19, Z+5	; 0x05
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	fc 01       	movw	r30, r24
    1f78:	80 a1       	ldd	r24, Z+32	; 0x20
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	28 0f       	add	r18, r24
    1f80:	39 1f       	adc	r19, r25
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	fc 01       	movw	r30, r24
    1f88:	24 83       	std	Z+4, r18	; 0x04
    1f8a:	35 83       	std	Z+5, r19	; 0x05
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	fc 01       	movw	r30, r24
    1f92:	24 81       	ldd	r18, Z+4	; 0x04
    1f94:	35 81       	ldd	r19, Z+5	; 0x05
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	28 17       	cp	r18, r24
    1fa2:	39 07       	cpc	r19, r25
    1fa4:	08 f4       	brcc	.+2      	; 0x1fa8 <prvCopyDataToQueue+0x98>
    1fa6:	5b c0       	rjmp	.+182    	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	fc 01       	movw	r30, r24
    1fae:	20 81       	ld	r18, Z
    1fb0:	31 81       	ldd	r19, Z+1	; 0x01
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	24 83       	std	Z+4, r18	; 0x04
    1fba:	35 83       	std	Z+5, r19	; 0x05
    1fbc:	50 c0       	rjmp	.+160    	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	80 a1       	ldd	r24, Z+32	; 0x20
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	fc 01       	movw	r30, r24
    1fd0:	86 81       	ldd	r24, Z+6	; 0x06
    1fd2:	97 81       	ldd	r25, Z+7	; 0x07
    1fd4:	2d 81       	ldd	r18, Y+5	; 0x05
    1fd6:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd8:	b9 01       	movw	r22, r18
    1fda:	0e 94 0a 32 	call	0x6414	; 0x6414 <memcpy>
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	26 81       	ldd	r18, Z+6	; 0x06
    1fe6:	37 81       	ldd	r19, Z+7	; 0x07
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	fc 01       	movw	r30, r24
    1fee:	80 a1       	ldd	r24, Z+32	; 0x20
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	91 95       	neg	r25
    1ff6:	81 95       	neg	r24
    1ff8:	91 09       	sbc	r25, r1
    1ffa:	28 0f       	add	r18, r24
    1ffc:	39 1f       	adc	r19, r25
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	fc 01       	movw	r30, r24
    2004:	26 83       	std	Z+6, r18	; 0x06
    2006:	37 83       	std	Z+7, r19	; 0x07
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	fc 01       	movw	r30, r24
    200e:	26 81       	ldd	r18, Z+6	; 0x06
    2010:	37 81       	ldd	r19, Z+7	; 0x07
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	fc 01       	movw	r30, r24
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	28 17       	cp	r18, r24
    201e:	39 07       	cpc	r19, r25
    2020:	a8 f4       	brcc	.+42     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	fc 01       	movw	r30, r24
    2028:	22 81       	ldd	r18, Z+2	; 0x02
    202a:	33 81       	ldd	r19, Z+3	; 0x03
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	fc 01       	movw	r30, r24
    2032:	80 a1       	ldd	r24, Z+32	; 0x20
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	91 95       	neg	r25
    203a:	81 95       	neg	r24
    203c:	91 09       	sbc	r25, r1
    203e:	28 0f       	add	r18, r24
    2040:	39 1f       	adc	r19, r25
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	fc 01       	movw	r30, r24
    2048:	26 83       	std	Z+6, r18	; 0x06
    204a:	37 83       	std	Z+7, r19	; 0x07
    204c:	8f 81       	ldd	r24, Y+7	; 0x07
    204e:	82 30       	cpi	r24, 0x02	; 2
    2050:	31 f4       	brne	.+12     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	88 23       	and	r24, r24
    2056:	19 f0       	breq	.+6      	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	81 50       	subi	r24, 0x01	; 1
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	21 e0       	ldi	r18, 0x01	; 1
    2062:	28 0f       	add	r18, r24
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	fc 01       	movw	r30, r24
    206a:	26 8f       	std	Z+30, r18	; 0x1e
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	27 96       	adiw	r28, 0x07	; 7
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	08 95       	ret

0000207a <prvCopyDataFromQueue>:
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	00 d0       	rcall	.+0      	; 0x2080 <prvCopyDataFromQueue+0x6>
    2080:	1f 92       	push	r1
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	6b 83       	std	Y+3, r22	; 0x03
    208c:	7c 83       	std	Y+4, r23	; 0x04
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	fc 01       	movw	r30, r24
    2094:	80 a1       	ldd	r24, Z+32	; 0x20
    2096:	88 23       	and	r24, r24
    2098:	c9 f1       	breq	.+114    	; 0x210c <prvCopyDataFromQueue+0x92>
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	fc 01       	movw	r30, r24
    20a0:	26 81       	ldd	r18, Z+6	; 0x06
    20a2:	37 81       	ldd	r19, Z+7	; 0x07
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	fc 01       	movw	r30, r24
    20aa:	80 a1       	ldd	r24, Z+32	; 0x20
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	28 0f       	add	r18, r24
    20b2:	39 1f       	adc	r19, r25
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	fc 01       	movw	r30, r24
    20ba:	26 83       	std	Z+6, r18	; 0x06
    20bc:	37 83       	std	Z+7, r19	; 0x07
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	fc 01       	movw	r30, r24
    20c4:	26 81       	ldd	r18, Z+6	; 0x06
    20c6:	37 81       	ldd	r19, Z+7	; 0x07
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	fc 01       	movw	r30, r24
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	93 81       	ldd	r25, Z+3	; 0x03
    20d2:	28 17       	cp	r18, r24
    20d4:	39 07       	cpc	r19, r25
    20d6:	50 f0       	brcs	.+20     	; 0x20ec <prvCopyDataFromQueue+0x72>
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	fc 01       	movw	r30, r24
    20de:	20 81       	ld	r18, Z
    20e0:	31 81       	ldd	r19, Z+1	; 0x01
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	fc 01       	movw	r30, r24
    20e8:	26 83       	std	Z+6, r18	; 0x06
    20ea:	37 83       	std	Z+7, r19	; 0x07
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	fc 01       	movw	r30, r24
    20f2:	80 a1       	ldd	r24, Z+32	; 0x20
    20f4:	48 2f       	mov	r20, r24
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	fc 01       	movw	r30, r24
    20fe:	26 81       	ldd	r18, Z+6	; 0x06
    2100:	37 81       	ldd	r19, Z+7	; 0x07
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	b9 01       	movw	r22, r18
    2108:	0e 94 0a 32 	call	0x6414	; 0x6414 <memcpy>
    210c:	00 00       	nop
    210e:	24 96       	adiw	r28, 0x04	; 4
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

0000211a <prvUnlockQueue>:
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	00 d0       	rcall	.+0      	; 0x2120 <prvUnlockQueue+0x6>
    2120:	1f 92       	push	r1
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	8b 83       	std	Y+3, r24	; 0x03
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    212e:	ff 93       	push	r31
    2130:	f8 7f       	andi	r31, 0xF8	; 248
    2132:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	fc 01       	movw	r30, r24
    213c:	82 a1       	ldd	r24, Z+34	; 0x22
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	12 c0       	rjmp	.+36     	; 0x2166 <prvUnlockQueue+0x4c>
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	fc 01       	movw	r30, r24
    2148:	83 89       	ldd	r24, Z+19	; 0x13
    214a:	88 23       	and	r24, r24
    214c:	81 f0       	breq	.+32     	; 0x216e <prvUnlockQueue+0x54>
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	43 96       	adiw	r24, 0x13	; 19
    2154:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xTaskRemoveFromEventList>
    2158:	88 23       	and	r24, r24
    215a:	11 f0       	breq	.+4      	; 0x2160 <prvUnlockQueue+0x46>
    215c:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskMissedYield>
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	81 50       	subi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	18 16       	cp	r1, r24
    216a:	5c f3       	brlt	.-42     	; 0x2142 <prvUnlockQueue+0x28>
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <prvUnlockQueue+0x56>
    216e:	00 00       	nop
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	2f ef       	ldi	r18, 0xFF	; 255
    2176:	fc 01       	movw	r30, r24
    2178:	22 a3       	std	Z+34, r18	; 0x22
    217a:	ff 91       	pop	r31
    217c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2180:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2184:	ff 93       	push	r31
    2186:	f8 7f       	andi	r31, 0xF8	; 248
    2188:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	fc 01       	movw	r30, r24
    2192:	81 a1       	ldd	r24, Z+33	; 0x21
    2194:	8a 83       	std	Y+2, r24	; 0x02
    2196:	12 c0       	rjmp	.+36     	; 0x21bc <prvUnlockQueue+0xa2>
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	fc 01       	movw	r30, r24
    219e:	80 85       	ldd	r24, Z+8	; 0x08
    21a0:	88 23       	and	r24, r24
    21a2:	81 f0       	breq	.+32     	; 0x21c4 <prvUnlockQueue+0xaa>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	08 96       	adiw	r24, 0x08	; 8
    21aa:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xTaskRemoveFromEventList>
    21ae:	88 23       	and	r24, r24
    21b0:	11 f0       	breq	.+4      	; 0x21b6 <prvUnlockQueue+0x9c>
    21b2:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskMissedYield>
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	81 50       	subi	r24, 0x01	; 1
    21ba:	8a 83       	std	Y+2, r24	; 0x02
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	18 16       	cp	r1, r24
    21c0:	5c f3       	brlt	.-42     	; 0x2198 <prvUnlockQueue+0x7e>
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <prvUnlockQueue+0xac>
    21c4:	00 00       	nop
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	2f ef       	ldi	r18, 0xFF	; 255
    21cc:	fc 01       	movw	r30, r24
    21ce:	21 a3       	std	Z+33, r18	; 0x21
    21d0:	ff 91       	pop	r31
    21d2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21d6:	00 00       	nop
    21d8:	24 96       	adiw	r28, 0x04	; 4
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	08 95       	ret

000021e4 <prvIsQueueEmpty>:
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <prvIsQueueEmpty+0x6>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	8a 83       	std	Y+2, r24	; 0x02
    21f0:	9b 83       	std	Y+3, r25	; 0x03
    21f2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21f6:	ff 93       	push	r31
    21f8:	f8 7f       	andi	r31, 0xF8	; 248
    21fa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	9b 81       	ldd	r25, Y+3	; 0x03
    2202:	fc 01       	movw	r30, r24
    2204:	86 8d       	ldd	r24, Z+30	; 0x1e
    2206:	88 23       	and	r24, r24
    2208:	19 f4       	brne	.+6      	; 0x2210 <prvIsQueueEmpty+0x2c>
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <prvIsQueueEmpty+0x2e>
    2210:	19 82       	std	Y+1, r1	; 0x01
    2212:	ff 91       	pop	r31
    2214:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	23 96       	adiw	r28, 0x03	; 3
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <prvIsQueueFull>:
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	00 d0       	rcall	.+0      	; 0x222c <prvIsQueueFull+0x6>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	8a 83       	std	Y+2, r24	; 0x02
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2238:	ff 93       	push	r31
    223a:	f8 7f       	andi	r31, 0xF8	; 248
    223c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	fc 01       	movw	r30, r24
    2246:	26 8d       	ldd	r18, Z+30	; 0x1e
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	fc 01       	movw	r30, r24
    224e:	87 8d       	ldd	r24, Z+31	; 0x1f
    2250:	28 17       	cp	r18, r24
    2252:	19 f4       	brne	.+6      	; 0x225a <prvIsQueueFull+0x34>
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	01 c0       	rjmp	.+2      	; 0x225c <prvIsQueueFull+0x36>
    225a:	19 82       	std	Y+1, r1	; 0x01
    225c:	ff 91       	pop	r31
    225e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	23 96       	adiw	r28, 0x03	; 3
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	08 95       	ret

00002270 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	29 97       	sbiw	r28, 0x09	; 9
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	8b 83       	std	Y+3, r24	; 0x03
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	4d 83       	std	Y+5, r20	; 0x05
    2284:	5e 83       	std	Y+6, r21	; 0x06
    2286:	6f 83       	std	Y+7, r22	; 0x07
    2288:	78 87       	std	Y+8, r23	; 0x08
    228a:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2294:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2298:	ff 93       	push	r31
    229a:	f8 7f       	andi	r31, 0xF8	; 248
    229c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	fc 01       	movw	r30, r24
    22a6:	81 a1       	ldd	r24, Z+33	; 0x21
    22a8:	8f 3f       	cpi	r24, 0xFF	; 255
    22aa:	21 f4       	brne	.+8      	; 0x22b4 <vQueueWaitForMessageRestricted+0x44>
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	fc 01       	movw	r30, r24
    22b2:	11 a2       	std	Z+33, r1	; 0x21
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	fc 01       	movw	r30, r24
    22ba:	82 a1       	ldd	r24, Z+34	; 0x22
    22bc:	8f 3f       	cpi	r24, 0xFF	; 255
    22be:	21 f4       	brne	.+8      	; 0x22c8 <vQueueWaitForMessageRestricted+0x58>
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	fc 01       	movw	r30, r24
    22c6:	12 a2       	std	Z+34, r1	; 0x22
    22c8:	ff 91       	pop	r31
    22ca:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	9a 81       	ldd	r25, Y+2	; 0x02
    22d2:	fc 01       	movw	r30, r24
    22d4:	86 8d       	ldd	r24, Z+30	; 0x1e
    22d6:	88 23       	and	r24, r24
    22d8:	71 f4       	brne	.+28     	; 0x22f6 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	fc 01       	movw	r30, r24
    22e0:	73 96       	adiw	r30, 0x13	; 19
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	af 81       	ldd	r26, Y+7	; 0x07
    22e8:	b8 85       	ldd	r27, Y+8	; 0x08
    22ea:	29 85       	ldd	r18, Y+9	; 0x09
    22ec:	ac 01       	movw	r20, r24
    22ee:	bd 01       	movw	r22, r26
    22f0:	cf 01       	movw	r24, r30
    22f2:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	0e 94 8d 10 	call	0x211a	; 0x211a <prvUnlockQueue>
	}
    22fe:	00 00       	nop
    2300:	29 96       	adiw	r28, 0x09	; 9
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	60 97       	sbiw	r28, 0x10	; 16
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	8e 83       	std	Y+6, r24	; 0x06
    2330:	9f 83       	std	Y+7, r25	; 0x07
    2332:	68 87       	std	Y+8, r22	; 0x08
    2334:	79 87       	std	Y+9, r23	; 0x09
    2336:	4a 87       	std	Y+10, r20	; 0x0a
    2338:	5b 87       	std	Y+11, r21	; 0x0b
    233a:	2c 87       	std	Y+12, r18	; 0x0c
    233c:	3d 87       	std	Y+13, r19	; 0x0d
    233e:	0e 87       	std	Y+14, r16	; 0x0e
    2340:	ef 86       	std	Y+15, r14	; 0x0f
    2342:	f8 8a       	std	Y+16, r15	; 0x10
    2344:	8a 85       	ldd	r24, Y+10	; 0x0a
    2346:	9b 85       	ldd	r25, Y+11	; 0x0b
    2348:	0e 94 36 07 	call	0xe6c	; 0xe6c <pvPortMalloc>
    234c:	8c 83       	std	Y+4, r24	; 0x04
    234e:	9d 83       	std	Y+5, r25	; 0x05
    2350:	8c 81       	ldd	r24, Y+4	; 0x04
    2352:	9d 81       	ldd	r25, Y+5	; 0x05
    2354:	89 2b       	or	r24, r25
    2356:	b9 f0       	breq	.+46     	; 0x2386 <xTaskCreate+0x7a>
    2358:	8c e2       	ldi	r24, 0x2C	; 44
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 36 07 	call	0xe6c	; 0xe6c <pvPortMalloc>
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	89 2b       	or	r24, r25
    236a:	41 f0       	breq	.+16     	; 0x237c <xTaskCreate+0x70>
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	2c 81       	ldd	r18, Y+4	; 0x04
    2372:	3d 81       	ldd	r19, Y+5	; 0x05
    2374:	fc 01       	movw	r30, r24
    2376:	23 8f       	std	Z+27, r18	; 0x1b
    2378:	34 8f       	std	Z+28, r19	; 0x1c
    237a:	07 c0       	rjmp	.+14     	; 0x238a <xTaskCreate+0x7e>
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	0e 94 7a 07 	call	0xef4	; 0xef4 <vPortFree>
    2384:	02 c0       	rjmp	.+4      	; 0x238a <xTaskCreate+0x7e>
    2386:	19 82       	std	Y+1, r1	; 0x01
    2388:	1a 82       	std	Y+2, r1	; 0x02
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	89 2b       	or	r24, r25
    2390:	09 f1       	breq	.+66     	; 0x23d4 <xTaskCreate+0xc8>
    2392:	8a 85       	ldd	r24, Y+10	; 0x0a
    2394:	9b 85       	ldd	r25, Y+11	; 0x0b
    2396:	cc 01       	movw	r24, r24
    2398:	a0 e0       	ldi	r26, 0x00	; 0
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	09 81       	ldd	r16, Y+1	; 0x01
    239e:	1a 81       	ldd	r17, Y+2	; 0x02
    23a0:	4f 85       	ldd	r20, Y+15	; 0x0f
    23a2:	58 89       	ldd	r21, Y+16	; 0x10
    23a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    23a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    23a8:	68 85       	ldd	r22, Y+8	; 0x08
    23aa:	79 85       	ldd	r23, Y+9	; 0x09
    23ac:	ee 81       	ldd	r30, Y+6	; 0x06
    23ae:	ff 81       	ldd	r31, Y+7	; 0x07
    23b0:	81 2c       	mov	r8, r1
    23b2:	91 2c       	mov	r9, r1
    23b4:	58 01       	movw	r10, r16
    23b6:	6a 01       	movw	r12, r20
    23b8:	ee 84       	ldd	r14, Y+14	; 0x0e
    23ba:	89 01       	movw	r16, r18
    23bc:	9c 01       	movw	r18, r24
    23be:	ad 01       	movw	r20, r26
    23c0:	cf 01       	movw	r24, r30
    23c2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <prvInitialiseNewTask>
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <prvAddNewTaskToReadyList>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	8b 83       	std	Y+3, r24	; 0x03
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <xTaskCreate+0xcc>
    23d4:	8f ef       	ldi	r24, 0xFF	; 255
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	60 96       	adiw	r28, 0x10	; 16
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	0f 91       	pop	r16
    23e8:	ff 90       	pop	r15
    23ea:	ef 90       	pop	r14
    23ec:	df 90       	pop	r13
    23ee:	cf 90       	pop	r12
    23f0:	bf 90       	pop	r11
    23f2:	af 90       	pop	r10
    23f4:	9f 90       	pop	r9
    23f6:	8f 90       	pop	r8
    23f8:	08 95       	ret

000023fa <prvInitialiseNewTask>:
    23fa:	8f 92       	push	r8
    23fc:	9f 92       	push	r9
    23fe:	af 92       	push	r10
    2400:	bf 92       	push	r11
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	64 97       	sbiw	r28, 0x14	; 20
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	8c 83       	std	Y+4, r24	; 0x04
    241e:	9d 83       	std	Y+5, r25	; 0x05
    2420:	6e 83       	std	Y+6, r22	; 0x06
    2422:	7f 83       	std	Y+7, r23	; 0x07
    2424:	28 87       	std	Y+8, r18	; 0x08
    2426:	39 87       	std	Y+9, r19	; 0x09
    2428:	4a 87       	std	Y+10, r20	; 0x0a
    242a:	5b 87       	std	Y+11, r21	; 0x0b
    242c:	0c 87       	std	Y+12, r16	; 0x0c
    242e:	1d 87       	std	Y+13, r17	; 0x0d
    2430:	ee 86       	std	Y+14, r14	; 0x0e
    2432:	cf 86       	std	Y+15, r12	; 0x0f
    2434:	d8 8a       	std	Y+16, r13	; 0x10
    2436:	a9 8a       	std	Y+17, r10	; 0x11
    2438:	ba 8a       	std	Y+18, r11	; 0x12
    243a:	8b 8a       	std	Y+19, r8	; 0x13
    243c:	9c 8a       	std	Y+20, r9	; 0x14
    243e:	28 85       	ldd	r18, Y+8	; 0x08
    2440:	39 85       	ldd	r19, Y+9	; 0x09
    2442:	89 89       	ldd	r24, Y+17	; 0x11
    2444:	9a 89       	ldd	r25, Y+18	; 0x12
    2446:	fc 01       	movw	r30, r24
    2448:	83 8d       	ldd	r24, Z+27	; 0x1b
    244a:	94 8d       	ldd	r25, Z+28	; 0x1c
    244c:	a9 01       	movw	r20, r18
    244e:	65 ea       	ldi	r22, 0xA5	; 165
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	0e 94 13 32 	call	0x6426	; 0x6426 <memset>
    2456:	89 89       	ldd	r24, Y+17	; 0x11
    2458:	9a 89       	ldd	r25, Y+18	; 0x12
    245a:	fc 01       	movw	r30, r24
    245c:	23 8d       	ldd	r18, Z+27	; 0x1b
    245e:	34 8d       	ldd	r19, Z+28	; 0x1c
    2460:	88 85       	ldd	r24, Y+8	; 0x08
    2462:	99 85       	ldd	r25, Y+9	; 0x09
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	82 0f       	add	r24, r18
    2468:	93 1f       	adc	r25, r19
    246a:	8a 83       	std	Y+2, r24	; 0x02
    246c:	9b 83       	std	Y+3, r25	; 0x03
    246e:	19 82       	std	Y+1, r1	; 0x01
    2470:	21 c0       	rjmp	.+66     	; 0x24b4 <prvInitialiseNewTask+0xba>
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	88 2f       	mov	r24, r24
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	29 81       	ldd	r18, Y+1	; 0x01
    247a:	22 2f       	mov	r18, r18
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4e 81       	ldd	r20, Y+6	; 0x06
    2480:	5f 81       	ldd	r21, Y+7	; 0x07
    2482:	24 0f       	add	r18, r20
    2484:	35 1f       	adc	r19, r21
    2486:	f9 01       	movw	r30, r18
    2488:	40 81       	ld	r20, Z
    248a:	29 89       	ldd	r18, Y+17	; 0x11
    248c:	3a 89       	ldd	r19, Y+18	; 0x12
    248e:	82 0f       	add	r24, r18
    2490:	93 1f       	adc	r25, r19
    2492:	4d 96       	adiw	r24, 0x1d	; 29
    2494:	fc 01       	movw	r30, r24
    2496:	40 83       	st	Z, r20
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	88 2f       	mov	r24, r24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	2e 81       	ldd	r18, Y+6	; 0x06
    24a0:	3f 81       	ldd	r19, Y+7	; 0x07
    24a2:	82 0f       	add	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	fc 01       	movw	r30, r24
    24a8:	80 81       	ld	r24, Z
    24aa:	88 23       	and	r24, r24
    24ac:	39 f0       	breq	.+14     	; 0x24bc <prvInitialiseNewTask+0xc2>
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	88 30       	cpi	r24, 0x08	; 8
    24b8:	e0 f2       	brcs	.-72     	; 0x2472 <prvInitialiseNewTask+0x78>
    24ba:	01 c0       	rjmp	.+2      	; 0x24be <prvInitialiseNewTask+0xc4>
    24bc:	00 00       	nop
    24be:	89 89       	ldd	r24, Y+17	; 0x11
    24c0:	9a 89       	ldd	r25, Y+18	; 0x12
    24c2:	fc 01       	movw	r30, r24
    24c4:	14 a2       	std	Z+36, r1	; 0x24
    24c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c8:	84 30       	cpi	r24, 0x04	; 4
    24ca:	10 f0       	brcs	.+4      	; 0x24d0 <prvInitialiseNewTask+0xd6>
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	8e 87       	std	Y+14, r24	; 0x0e
    24d0:	89 89       	ldd	r24, Y+17	; 0x11
    24d2:	9a 89       	ldd	r25, Y+18	; 0x12
    24d4:	2e 85       	ldd	r18, Y+14	; 0x0e
    24d6:	fc 01       	movw	r30, r24
    24d8:	22 8f       	std	Z+26, r18	; 0x1a
    24da:	89 89       	ldd	r24, Y+17	; 0x11
    24dc:	9a 89       	ldd	r25, Y+18	; 0x12
    24de:	02 96       	adiw	r24, 0x02	; 2
    24e0:	0e 94 c2 07 	call	0xf84	; 0xf84 <vListInitialiseItem>
    24e4:	89 89       	ldd	r24, Y+17	; 0x11
    24e6:	9a 89       	ldd	r25, Y+18	; 0x12
    24e8:	0e 96       	adiw	r24, 0x0e	; 14
    24ea:	0e 94 c2 07 	call	0xf84	; 0xf84 <vListInitialiseItem>
    24ee:	89 89       	ldd	r24, Y+17	; 0x11
    24f0:	9a 89       	ldd	r25, Y+18	; 0x12
    24f2:	29 89       	ldd	r18, Y+17	; 0x11
    24f4:	3a 89       	ldd	r19, Y+18	; 0x12
    24f6:	fc 01       	movw	r30, r24
    24f8:	22 87       	std	Z+10, r18	; 0x0a
    24fa:	33 87       	std	Z+11, r19	; 0x0b
    24fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	a0 e0       	ldi	r26, 0x00	; 0
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	24 e0       	ldi	r18, 0x04	; 4
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	79 01       	movw	r14, r18
    2510:	8a 01       	movw	r16, r20
    2512:	e8 1a       	sub	r14, r24
    2514:	f9 0a       	sbc	r15, r25
    2516:	0a 0b       	sbc	r16, r26
    2518:	1b 0b       	sbc	r17, r27
    251a:	d8 01       	movw	r26, r16
    251c:	c7 01       	movw	r24, r14
    251e:	29 89       	ldd	r18, Y+17	; 0x11
    2520:	3a 89       	ldd	r19, Y+18	; 0x12
    2522:	f9 01       	movw	r30, r18
    2524:	86 87       	std	Z+14, r24	; 0x0e
    2526:	97 87       	std	Z+15, r25	; 0x0f
    2528:	a0 8b       	std	Z+16, r26	; 0x10
    252a:	b1 8b       	std	Z+17, r27	; 0x11
    252c:	89 89       	ldd	r24, Y+17	; 0x11
    252e:	9a 89       	ldd	r25, Y+18	; 0x12
    2530:	29 89       	ldd	r18, Y+17	; 0x11
    2532:	3a 89       	ldd	r19, Y+18	; 0x12
    2534:	fc 01       	movw	r30, r24
    2536:	26 8b       	std	Z+22, r18	; 0x16
    2538:	37 8b       	std	Z+23, r19	; 0x17
    253a:	89 89       	ldd	r24, Y+17	; 0x11
    253c:	9a 89       	ldd	r25, Y+18	; 0x12
    253e:	fc 01       	movw	r30, r24
    2540:	17 a2       	std	Z+39, r1	; 0x27
    2542:	10 a6       	std	Z+40, r1	; 0x28
    2544:	11 a6       	std	Z+41, r1	; 0x29
    2546:	12 a6       	std	Z+42, r1	; 0x2a
    2548:	89 89       	ldd	r24, Y+17	; 0x11
    254a:	9a 89       	ldd	r25, Y+18	; 0x12
    254c:	fc 01       	movw	r30, r24
    254e:	13 a6       	std	Z+43, r1	; 0x2b
    2550:	4c 85       	ldd	r20, Y+12	; 0x0c
    2552:	5d 85       	ldd	r21, Y+13	; 0x0d
    2554:	2c 81       	ldd	r18, Y+4	; 0x04
    2556:	3d 81       	ldd	r19, Y+5	; 0x05
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	9b 81       	ldd	r25, Y+3	; 0x03
    255c:	b9 01       	movw	r22, r18
    255e:	0e 94 0e 09 	call	0x121c	; 0x121c <pxPortInitialiseStack>
    2562:	9c 01       	movw	r18, r24
    2564:	89 89       	ldd	r24, Y+17	; 0x11
    2566:	9a 89       	ldd	r25, Y+18	; 0x12
    2568:	fc 01       	movw	r30, r24
    256a:	20 83       	st	Z, r18
    256c:	31 83       	std	Z+1, r19	; 0x01
    256e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2570:	98 89       	ldd	r25, Y+16	; 0x10
    2572:	89 2b       	or	r24, r25
    2574:	39 f0       	breq	.+14     	; 0x2584 <prvInitialiseNewTask+0x18a>
    2576:	8f 85       	ldd	r24, Y+15	; 0x0f
    2578:	98 89       	ldd	r25, Y+16	; 0x10
    257a:	29 89       	ldd	r18, Y+17	; 0x11
    257c:	3a 89       	ldd	r19, Y+18	; 0x12
    257e:	fc 01       	movw	r30, r24
    2580:	20 83       	st	Z, r18
    2582:	31 83       	std	Z+1, r19	; 0x01
    2584:	00 00       	nop
    2586:	64 96       	adiw	r28, 0x14	; 20
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
    259e:	af 90       	pop	r10
    25a0:	9f 90       	pop	r9
    25a2:	8f 90       	pop	r8
    25a4:	08 95       	ret

000025a6 <prvAddNewTaskToReadyList>:
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	1f 92       	push	r1
    25ac:	1f 92       	push	r1
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    25ba:	ff 93       	push	r31
    25bc:	f8 7f       	andi	r31, 0xF8	; 248
    25be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    25c2:	80 91 02 35 	lds	r24, 0x3502	; 0x803502 <uxCurrentNumberOfTasks>
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	80 93 02 35 	sts	0x3502, r24	; 0x803502 <uxCurrentNumberOfTasks>
    25cc:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    25d0:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    25d4:	89 2b       	or	r24, r25
    25d6:	69 f4       	brne	.+26     	; 0x25f2 <prvAddNewTaskToReadyList+0x4c>
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	80 93 a4 34 	sts	0x34A4, r24	; 0x8034a4 <pxCurrentTCB>
    25e0:	90 93 a5 34 	sts	0x34A5, r25	; 0x8034a5 <pxCurrentTCB+0x1>
    25e4:	80 91 02 35 	lds	r24, 0x3502	; 0x803502 <uxCurrentNumberOfTasks>
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	c9 f4       	brne	.+50     	; 0x261e <prvAddNewTaskToReadyList+0x78>
    25ec:	0e 94 85 19 	call	0x330a	; 0x330a <prvInitialiseTaskLists>
    25f0:	16 c0       	rjmp	.+44     	; 0x261e <prvAddNewTaskToReadyList+0x78>
    25f2:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <xSchedulerRunning>
    25f6:	88 23       	and	r24, r24
    25f8:	91 f4       	brne	.+36     	; 0x261e <prvAddNewTaskToReadyList+0x78>
    25fa:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    25fe:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2602:	fc 01       	movw	r30, r24
    2604:	22 8d       	ldd	r18, Z+26	; 0x1a
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	fc 01       	movw	r30, r24
    260c:	82 8d       	ldd	r24, Z+26	; 0x1a
    260e:	82 17       	cp	r24, r18
    2610:	30 f0       	brcs	.+12     	; 0x261e <prvAddNewTaskToReadyList+0x78>
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	80 93 a4 34 	sts	0x34A4, r24	; 0x8034a4 <pxCurrentTCB>
    261a:	90 93 a5 34 	sts	0x34A5, r25	; 0x8034a5 <pxCurrentTCB+0x1>
    261e:	80 91 0c 35 	lds	r24, 0x350C	; 0x80350c <uxTaskNumber>
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	80 93 0c 35 	sts	0x350C, r24	; 0x80350c <uxTaskNumber>
    2628:	20 91 0c 35 	lds	r18, 0x350C	; 0x80350c <uxTaskNumber>
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	fc 01       	movw	r30, r24
    2632:	25 a3       	std	Z+37, r18	; 0x25
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	fc 01       	movw	r30, r24
    263a:	92 8d       	ldd	r25, Z+26	; 0x1a
    263c:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxTopReadyPriority>
    2640:	89 17       	cp	r24, r25
    2642:	30 f4       	brcc	.+12     	; 0x2650 <prvAddNewTaskToReadyList+0xaa>
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	fc 01       	movw	r30, r24
    264a:	82 8d       	ldd	r24, Z+26	; 0x1a
    264c:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <uxTopReadyPriority>
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	ac 01       	movw	r20, r24
    2656:	4e 5f       	subi	r20, 0xFE	; 254
    2658:	5f 4f       	sbci	r21, 0xFF	; 255
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	fc 01       	movw	r30, r24
    2660:	82 8d       	ldd	r24, Z+26	; 0x1a
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	6b e0       	ldi	r22, 0x0B	; 11
    2668:	62 9f       	mul	r22, r18
    266a:	c0 01       	movw	r24, r0
    266c:	63 9f       	mul	r22, r19
    266e:	90 0d       	add	r25, r0
    2670:	11 24       	eor	r1, r1
    2672:	8a 55       	subi	r24, 0x5A	; 90
    2674:	9b 4c       	sbci	r25, 0xCB	; 203
    2676:	ba 01       	movw	r22, r20
    2678:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>
    267c:	ff 91       	pop	r31
    267e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2682:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <xSchedulerRunning>
    2686:	88 23       	and	r24, r24
    2688:	71 f0       	breq	.+28     	; 0x26a6 <prvAddNewTaskToReadyList+0x100>
    268a:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    268e:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2692:	fc 01       	movw	r30, r24
    2694:	22 8d       	ldd	r18, Z+26	; 0x1a
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	fc 01       	movw	r30, r24
    269c:	82 8d       	ldd	r24, Z+26	; 0x1a
    269e:	28 17       	cp	r18, r24
    26a0:	10 f4       	brcc	.+4      	; 0x26a6 <prvAddNewTaskToReadyList+0x100>
    26a2:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    26a6:	00 00       	nop
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <vTaskDelayUntil>:
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	60 97       	sbiw	r28, 0x10	; 16
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	8b 87       	std	Y+11, r24	; 0x0b
    26ca:	9c 87       	std	Y+12, r25	; 0x0c
    26cc:	4d 87       	std	Y+13, r20	; 0x0d
    26ce:	5e 87       	std	Y+14, r21	; 0x0e
    26d0:	6f 87       	std	Y+15, r22	; 0x0f
    26d2:	78 8b       	std	Y+16, r23	; 0x10
    26d4:	19 82       	std	Y+1, r1	; 0x01
    26d6:	0e 94 8b 14 	call	0x2916	; 0x2916 <vTaskSuspendAll>
    26da:	80 91 03 35 	lds	r24, 0x3503	; 0x803503 <xTickCount>
    26de:	90 91 04 35 	lds	r25, 0x3504	; 0x803504 <xTickCount+0x1>
    26e2:	a0 91 05 35 	lds	r26, 0x3505	; 0x803505 <xTickCount+0x2>
    26e6:	b0 91 06 35 	lds	r27, 0x3506	; 0x803506 <xTickCount+0x3>
    26ea:	8a 83       	std	Y+2, r24	; 0x02
    26ec:	9b 83       	std	Y+3, r25	; 0x03
    26ee:	ac 83       	std	Y+4, r26	; 0x04
    26f0:	bd 83       	std	Y+5, r27	; 0x05
    26f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    26f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    26f6:	fc 01       	movw	r30, r24
    26f8:	20 81       	ld	r18, Z
    26fa:	31 81       	ldd	r19, Z+1	; 0x01
    26fc:	42 81       	ldd	r20, Z+2	; 0x02
    26fe:	53 81       	ldd	r21, Z+3	; 0x03
    2700:	8d 85       	ldd	r24, Y+13	; 0x0d
    2702:	9e 85       	ldd	r25, Y+14	; 0x0e
    2704:	af 85       	ldd	r26, Y+15	; 0x0f
    2706:	b8 89       	ldd	r27, Y+16	; 0x10
    2708:	82 0f       	add	r24, r18
    270a:	93 1f       	adc	r25, r19
    270c:	a4 1f       	adc	r26, r20
    270e:	b5 1f       	adc	r27, r21
    2710:	8e 83       	std	Y+6, r24	; 0x06
    2712:	9f 83       	std	Y+7, r25	; 0x07
    2714:	a8 87       	std	Y+8, r26	; 0x08
    2716:	b9 87       	std	Y+9, r27	; 0x09
    2718:	8b 85       	ldd	r24, Y+11	; 0x0b
    271a:	9c 85       	ldd	r25, Y+12	; 0x0c
    271c:	fc 01       	movw	r30, r24
    271e:	20 81       	ld	r18, Z
    2720:	31 81       	ldd	r19, Z+1	; 0x01
    2722:	42 81       	ldd	r20, Z+2	; 0x02
    2724:	53 81       	ldd	r21, Z+3	; 0x03
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	9b 81       	ldd	r25, Y+3	; 0x03
    272a:	ac 81       	ldd	r26, Y+4	; 0x04
    272c:	bd 81       	ldd	r27, Y+5	; 0x05
    272e:	82 17       	cp	r24, r18
    2730:	93 07       	cpc	r25, r19
    2732:	a4 07       	cpc	r26, r20
    2734:	b5 07       	cpc	r27, r21
    2736:	00 f5       	brcc	.+64     	; 0x2778 <vTaskDelayUntil+0xc6>
    2738:	8b 85       	ldd	r24, Y+11	; 0x0b
    273a:	9c 85       	ldd	r25, Y+12	; 0x0c
    273c:	fc 01       	movw	r30, r24
    273e:	20 81       	ld	r18, Z
    2740:	31 81       	ldd	r19, Z+1	; 0x01
    2742:	42 81       	ldd	r20, Z+2	; 0x02
    2744:	53 81       	ldd	r21, Z+3	; 0x03
    2746:	8e 81       	ldd	r24, Y+6	; 0x06
    2748:	9f 81       	ldd	r25, Y+7	; 0x07
    274a:	a8 85       	ldd	r26, Y+8	; 0x08
    274c:	b9 85       	ldd	r27, Y+9	; 0x09
    274e:	82 17       	cp	r24, r18
    2750:	93 07       	cpc	r25, r19
    2752:	a4 07       	cpc	r26, r20
    2754:	b5 07       	cpc	r27, r21
    2756:	78 f5       	brcc	.+94     	; 0x27b6 <vTaskDelayUntil+0x104>
    2758:	2e 81       	ldd	r18, Y+6	; 0x06
    275a:	3f 81       	ldd	r19, Y+7	; 0x07
    275c:	48 85       	ldd	r20, Y+8	; 0x08
    275e:	59 85       	ldd	r21, Y+9	; 0x09
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	9b 81       	ldd	r25, Y+3	; 0x03
    2764:	ac 81       	ldd	r26, Y+4	; 0x04
    2766:	bd 81       	ldd	r27, Y+5	; 0x05
    2768:	82 17       	cp	r24, r18
    276a:	93 07       	cpc	r25, r19
    276c:	a4 07       	cpc	r26, r20
    276e:	b5 07       	cpc	r27, r21
    2770:	10 f5       	brcc	.+68     	; 0x27b6 <vTaskDelayUntil+0x104>
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	1f c0       	rjmp	.+62     	; 0x27b6 <vTaskDelayUntil+0x104>
    2778:	8b 85       	ldd	r24, Y+11	; 0x0b
    277a:	9c 85       	ldd	r25, Y+12	; 0x0c
    277c:	fc 01       	movw	r30, r24
    277e:	20 81       	ld	r18, Z
    2780:	31 81       	ldd	r19, Z+1	; 0x01
    2782:	42 81       	ldd	r20, Z+2	; 0x02
    2784:	53 81       	ldd	r21, Z+3	; 0x03
    2786:	8e 81       	ldd	r24, Y+6	; 0x06
    2788:	9f 81       	ldd	r25, Y+7	; 0x07
    278a:	a8 85       	ldd	r26, Y+8	; 0x08
    278c:	b9 85       	ldd	r27, Y+9	; 0x09
    278e:	82 17       	cp	r24, r18
    2790:	93 07       	cpc	r25, r19
    2792:	a4 07       	cpc	r26, r20
    2794:	b5 07       	cpc	r27, r21
    2796:	68 f0       	brcs	.+26     	; 0x27b2 <vTaskDelayUntil+0x100>
    2798:	2e 81       	ldd	r18, Y+6	; 0x06
    279a:	3f 81       	ldd	r19, Y+7	; 0x07
    279c:	48 85       	ldd	r20, Y+8	; 0x08
    279e:	59 85       	ldd	r21, Y+9	; 0x09
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	9b 81       	ldd	r25, Y+3	; 0x03
    27a4:	ac 81       	ldd	r26, Y+4	; 0x04
    27a6:	bd 81       	ldd	r27, Y+5	; 0x05
    27a8:	82 17       	cp	r24, r18
    27aa:	93 07       	cpc	r25, r19
    27ac:	a4 07       	cpc	r26, r20
    27ae:	b5 07       	cpc	r27, r21
    27b0:	10 f4       	brcc	.+4      	; 0x27b6 <vTaskDelayUntil+0x104>
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    27b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    27ba:	8e 81       	ldd	r24, Y+6	; 0x06
    27bc:	9f 81       	ldd	r25, Y+7	; 0x07
    27be:	a8 85       	ldd	r26, Y+8	; 0x08
    27c0:	b9 85       	ldd	r27, Y+9	; 0x09
    27c2:	f9 01       	movw	r30, r18
    27c4:	80 83       	st	Z, r24
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	a2 83       	std	Z+2, r26	; 0x02
    27ca:	b3 83       	std	Z+3, r27	; 0x03
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	88 23       	and	r24, r24
    27d0:	a9 f0       	breq	.+42     	; 0x27fc <vTaskDelayUntil+0x14a>
    27d2:	2e 81       	ldd	r18, Y+6	; 0x06
    27d4:	3f 81       	ldd	r19, Y+7	; 0x07
    27d6:	48 85       	ldd	r20, Y+8	; 0x08
    27d8:	59 85       	ldd	r21, Y+9	; 0x09
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	9b 81       	ldd	r25, Y+3	; 0x03
    27de:	ac 81       	ldd	r26, Y+4	; 0x04
    27e0:	bd 81       	ldd	r27, Y+5	; 0x05
    27e2:	79 01       	movw	r14, r18
    27e4:	8a 01       	movw	r16, r20
    27e6:	e8 1a       	sub	r14, r24
    27e8:	f9 0a       	sbc	r15, r25
    27ea:	0a 0b       	sbc	r16, r26
    27ec:	1b 0b       	sbc	r17, r27
    27ee:	d8 01       	movw	r26, r16
    27f0:	c7 01       	movw	r24, r14
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <prvAddCurrentTaskToDelayedList>
    27fc:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    2800:	8a 87       	std	Y+10, r24	; 0x0a
    2802:	8a 85       	ldd	r24, Y+10	; 0x0a
    2804:	88 23       	and	r24, r24
    2806:	11 f4       	brne	.+4      	; 0x280c <vTaskDelayUntil+0x15a>
    2808:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    280c:	00 00       	nop
    280e:	60 96       	adiw	r28, 0x10	; 16
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	ff 90       	pop	r15
    281e:	ef 90       	pop	r14
    2820:	08 95       	ret

00002822 <vTaskDelay>:
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	25 97       	sbiw	r28, 0x05	; 5
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	6a 83       	std	Y+2, r22	; 0x02
    2832:	7b 83       	std	Y+3, r23	; 0x03
    2834:	8c 83       	std	Y+4, r24	; 0x04
    2836:	9d 83       	std	Y+5, r25	; 0x05
    2838:	19 82       	std	Y+1, r1	; 0x01
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	ac 81       	ldd	r26, Y+4	; 0x04
    2840:	bd 81       	ldd	r27, Y+5	; 0x05
    2842:	89 2b       	or	r24, r25
    2844:	8a 2b       	or	r24, r26
    2846:	8b 2b       	or	r24, r27
    2848:	71 f0       	breq	.+28     	; 0x2866 <vTaskDelay+0x44>
    284a:	0e 94 8b 14 	call	0x2916	; 0x2916 <vTaskSuspendAll>
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	9b 81       	ldd	r25, Y+3	; 0x03
    2852:	ac 81       	ldd	r26, Y+4	; 0x04
    2854:	bd 81       	ldd	r27, Y+5	; 0x05
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <prvAddCurrentTaskToDelayedList>
    2860:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	88 23       	and	r24, r24
    286a:	11 f4       	brne	.+4      	; 0x2870 <vTaskDelay+0x4e>
    286c:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    2870:	00 00       	nop
    2872:	25 96       	adiw	r28, 0x05	; 5
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	08 95       	ret

0000287e <vTaskStartScheduler>:
    287e:	ef 92       	push	r14
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	1f 92       	push	r1
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	0f 2e       	mov	r0, r31
    2890:	f1 e1       	ldi	r31, 0x11	; 17
    2892:	ef 2e       	mov	r14, r31
    2894:	f5 e3       	ldi	r31, 0x35	; 53
    2896:	ff 2e       	mov	r15, r31
    2898:	f0 2d       	mov	r31, r0
    289a:	00 e0       	ldi	r16, 0x00	; 0
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	48 ec       	ldi	r20, 0xC8	; 200
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	64 e0       	ldi	r22, 0x04	; 4
    28a6:	70 e2       	ldi	r23, 0x20	; 32
    28a8:	82 e7       	ldi	r24, 0x72	; 114
    28aa:	99 e1       	ldi	r25, 0x19	; 25
    28ac:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCreate>
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	81 30       	cpi	r24, 0x01	; 1
    28b6:	19 f4       	brne	.+6      	; 0x28be <vTaskStartScheduler+0x40>
    28b8:	0e 94 03 1b 	call	0x3606	; 0x3606 <xTimerCreateTimerTask>
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	09 f5       	brne	.+66     	; 0x2906 <vTaskStartScheduler+0x88>
    28c4:	80 ea       	ldi	r24, 0xA0	; 160
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	20 ea       	ldi	r18, 0xA0	; 160
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	f9 01       	movw	r30, r18
    28ce:	22 81       	ldd	r18, Z+2	; 0x02
    28d0:	28 7f       	andi	r18, 0xF8	; 248
    28d2:	fc 01       	movw	r30, r24
    28d4:	22 83       	std	Z+2, r18	; 0x02
    28d6:	8f ef       	ldi	r24, 0xFF	; 255
    28d8:	9f ef       	ldi	r25, 0xFF	; 255
    28da:	dc 01       	movw	r26, r24
    28dc:	80 93 0d 35 	sts	0x350D, r24	; 0x80350d <xNextTaskUnblockTime>
    28e0:	90 93 0e 35 	sts	0x350E, r25	; 0x80350e <xNextTaskUnblockTime+0x1>
    28e4:	a0 93 0f 35 	sts	0x350F, r26	; 0x80350f <xNextTaskUnblockTime+0x2>
    28e8:	b0 93 10 35 	sts	0x3510, r27	; 0x803510 <xNextTaskUnblockTime+0x3>
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <xSchedulerRunning>
    28f2:	10 92 03 35 	sts	0x3503, r1	; 0x803503 <xTickCount>
    28f6:	10 92 04 35 	sts	0x3504, r1	; 0x803504 <xTickCount+0x1>
    28fa:	10 92 05 35 	sts	0x3505, r1	; 0x803505 <xTickCount+0x2>
    28fe:	10 92 06 35 	sts	0x3506, r1	; 0x803506 <xTickCount+0x3>
    2902:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <xPortStartScheduler>
    2906:	00 00       	nop
    2908:	0f 90       	pop	r0
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	08 95       	ret

00002916 <vTaskSuspendAll>:
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	80 91 13 35 	lds	r24, 0x3513	; 0x803513 <uxSchedulerSuspended>
    2922:	8f 5f       	subi	r24, 0xFF	; 255
    2924:	80 93 13 35 	sts	0x3513, r24	; 0x803513 <uxSchedulerSuspended>
    2928:	00 00       	nop
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	08 95       	ret

00002930 <xTaskResumeAll>:
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	00 d0       	rcall	.+0      	; 0x2936 <xTaskResumeAll+0x6>
    2936:	1f 92       	push	r1
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	19 82       	std	Y+1, r1	; 0x01
    293e:	1a 82       	std	Y+2, r1	; 0x02
    2940:	1b 82       	std	Y+3, r1	; 0x03
    2942:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2946:	ff 93       	push	r31
    2948:	f8 7f       	andi	r31, 0xF8	; 248
    294a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    294e:	80 91 13 35 	lds	r24, 0x3513	; 0x803513 <uxSchedulerSuspended>
    2952:	81 50       	subi	r24, 0x01	; 1
    2954:	80 93 13 35 	sts	0x3513, r24	; 0x803513 <uxSchedulerSuspended>
    2958:	80 91 13 35 	lds	r24, 0x3513	; 0x803513 <uxSchedulerSuspended>
    295c:	88 23       	and	r24, r24
    295e:	09 f0       	breq	.+2      	; 0x2962 <xTaskResumeAll+0x32>
    2960:	74 c0       	rjmp	.+232    	; 0x2a4a <xTaskResumeAll+0x11a>
    2962:	80 91 02 35 	lds	r24, 0x3502	; 0x803502 <uxCurrentNumberOfTasks>
    2966:	88 23       	and	r24, r24
    2968:	09 f4       	brne	.+2      	; 0x296c <xTaskResumeAll+0x3c>
    296a:	6f c0       	rjmp	.+222    	; 0x2a4a <xTaskResumeAll+0x11a>
    296c:	46 c0       	rjmp	.+140    	; 0x29fa <xTaskResumeAll+0xca>
    296e:	80 91 f3 34 	lds	r24, 0x34F3	; 0x8034f3 <xPendingReadyList+0x7>
    2972:	90 91 f4 34 	lds	r25, 0x34F4	; 0x8034f4 <xPendingReadyList+0x8>
    2976:	fc 01       	movw	r30, r24
    2978:	80 85       	ldd	r24, Z+8	; 0x08
    297a:	91 85       	ldd	r25, Z+9	; 0x09
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	0e 96       	adiw	r24, 0x0e	; 14
    2986:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	02 96       	adiw	r24, 0x02	; 2
    2990:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	fc 01       	movw	r30, r24
    299a:	92 8d       	ldd	r25, Z+26	; 0x1a
    299c:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxTopReadyPriority>
    29a0:	89 17       	cp	r24, r25
    29a2:	30 f4       	brcc	.+12     	; 0x29b0 <xTaskResumeAll+0x80>
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	9a 81       	ldd	r25, Y+2	; 0x02
    29a8:	fc 01       	movw	r30, r24
    29aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    29ac:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <uxTopReadyPriority>
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	ac 01       	movw	r20, r24
    29b6:	4e 5f       	subi	r20, 0xFE	; 254
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	9a 81       	ldd	r25, Y+2	; 0x02
    29be:	fc 01       	movw	r30, r24
    29c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	6b e0       	ldi	r22, 0x0B	; 11
    29c8:	62 9f       	mul	r22, r18
    29ca:	c0 01       	movw	r24, r0
    29cc:	63 9f       	mul	r22, r19
    29ce:	90 0d       	add	r25, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	8a 55       	subi	r24, 0x5A	; 90
    29d4:	9b 4c       	sbci	r25, 0xCB	; 203
    29d6:	ba 01       	movw	r22, r20
    29d8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	fc 01       	movw	r30, r24
    29e2:	22 8d       	ldd	r18, Z+26	; 0x1a
    29e4:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    29e8:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    29ec:	fc 01       	movw	r30, r24
    29ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    29f0:	28 17       	cp	r18, r24
    29f2:	18 f0       	brcs	.+6      	; 0x29fa <xTaskResumeAll+0xca>
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	80 93 0a 35 	sts	0x350A, r24	; 0x80350a <xYieldPending>
    29fa:	80 91 ec 34 	lds	r24, 0x34EC	; 0x8034ec <xPendingReadyList>
    29fe:	88 23       	and	r24, r24
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <xTaskResumeAll+0xd4>
    2a02:	b5 cf       	rjmp	.-150    	; 0x296e <xTaskResumeAll+0x3e>
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	9a 81       	ldd	r25, Y+2	; 0x02
    2a08:	89 2b       	or	r24, r25
    2a0a:	11 f0       	breq	.+4      	; 0x2a10 <xTaskResumeAll+0xe0>
    2a0c:	0e 94 c8 19 	call	0x3390	; 0x3390 <prvResetNextTaskUnblockTime>
    2a10:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <uxPendedTicks>
    2a14:	8c 83       	std	Y+4, r24	; 0x04
    2a16:	8c 81       	ldd	r24, Y+4	; 0x04
    2a18:	88 23       	and	r24, r24
    2a1a:	79 f0       	breq	.+30     	; 0x2a3a <xTaskResumeAll+0x10a>
    2a1c:	0e 94 56 15 	call	0x2aac	; 0x2aac <xTaskIncrementTick>
    2a20:	88 23       	and	r24, r24
    2a22:	19 f0       	breq	.+6      	; 0x2a2a <xTaskResumeAll+0xfa>
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	80 93 0a 35 	sts	0x350A, r24	; 0x80350a <xYieldPending>
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	81 50       	subi	r24, 0x01	; 1
    2a2e:	8c 83       	std	Y+4, r24	; 0x04
    2a30:	8c 81       	ldd	r24, Y+4	; 0x04
    2a32:	88 23       	and	r24, r24
    2a34:	99 f7       	brne	.-26     	; 0x2a1c <xTaskResumeAll+0xec>
    2a36:	10 92 09 35 	sts	0x3509, r1	; 0x803509 <uxPendedTicks>
    2a3a:	80 91 0a 35 	lds	r24, 0x350A	; 0x80350a <xYieldPending>
    2a3e:	88 23       	and	r24, r24
    2a40:	21 f0       	breq	.+8      	; 0x2a4a <xTaskResumeAll+0x11a>
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    2a4a:	ff 91       	pop	r31
    2a4c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	24 96       	adiw	r28, 0x04	; 4
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	08 95       	ret

00002a5e <xTaskGetTickCount>:
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <xTaskGetTickCount+0x6>
    2a64:	1f 92       	push	r1
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a6e:	ff 93       	push	r31
    2a70:	f8 7f       	andi	r31, 0xF8	; 248
    2a72:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a76:	80 91 03 35 	lds	r24, 0x3503	; 0x803503 <xTickCount>
    2a7a:	90 91 04 35 	lds	r25, 0x3504	; 0x803504 <xTickCount+0x1>
    2a7e:	a0 91 05 35 	lds	r26, 0x3505	; 0x803505 <xTickCount+0x2>
    2a82:	b0 91 06 35 	lds	r27, 0x3506	; 0x803506 <xTickCount+0x3>
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	9a 83       	std	Y+2, r25	; 0x02
    2a8a:	ab 83       	std	Y+3, r26	; 0x03
    2a8c:	bc 83       	std	Y+4, r27	; 0x04
    2a8e:	ff 91       	pop	r31
    2a90:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	ab 81       	ldd	r26, Y+3	; 0x03
    2a9a:	bc 81       	ldd	r27, Y+4	; 0x04
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	24 96       	adiw	r28, 0x04	; 4
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	08 95       	ret

00002aac <xTaskIncrementTick>:
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	2d 97       	sbiw	r28, 0x0d	; 13
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	19 82       	std	Y+1, r1	; 0x01
    2abc:	80 91 13 35 	lds	r24, 0x3513	; 0x803513 <uxSchedulerSuspended>
    2ac0:	88 23       	and	r24, r24
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <xTaskIncrementTick+0x1a>
    2ac4:	f1 c0       	rjmp	.+482    	; 0x2ca8 <xTaskIncrementTick+0x1fc>
    2ac6:	80 91 03 35 	lds	r24, 0x3503	; 0x803503 <xTickCount>
    2aca:	90 91 04 35 	lds	r25, 0x3504	; 0x803504 <xTickCount+0x1>
    2ace:	a0 91 05 35 	lds	r26, 0x3505	; 0x803505 <xTickCount+0x2>
    2ad2:	b0 91 06 35 	lds	r27, 0x3506	; 0x803506 <xTickCount+0x3>
    2ad6:	01 96       	adiw	r24, 0x01	; 1
    2ad8:	a1 1d       	adc	r26, r1
    2ada:	b1 1d       	adc	r27, r1
    2adc:	8a 83       	std	Y+2, r24	; 0x02
    2ade:	9b 83       	std	Y+3, r25	; 0x03
    2ae0:	ac 83       	std	Y+4, r26	; 0x04
    2ae2:	bd 83       	std	Y+5, r27	; 0x05
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae8:	ac 81       	ldd	r26, Y+4	; 0x04
    2aea:	bd 81       	ldd	r27, Y+5	; 0x05
    2aec:	80 93 03 35 	sts	0x3503, r24	; 0x803503 <xTickCount>
    2af0:	90 93 04 35 	sts	0x3504, r25	; 0x803504 <xTickCount+0x1>
    2af4:	a0 93 05 35 	sts	0x3505, r26	; 0x803505 <xTickCount+0x2>
    2af8:	b0 93 06 35 	sts	0x3506, r27	; 0x803506 <xTickCount+0x3>
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	9b 81       	ldd	r25, Y+3	; 0x03
    2b00:	ac 81       	ldd	r26, Y+4	; 0x04
    2b02:	bd 81       	ldd	r27, Y+5	; 0x05
    2b04:	89 2b       	or	r24, r25
    2b06:	8a 2b       	or	r24, r26
    2b08:	8b 2b       	or	r24, r27
    2b0a:	d9 f4       	brne	.+54     	; 0x2b42 <xTaskIncrementTick+0x96>
    2b0c:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxDelayedTaskList>
    2b10:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxDelayedTaskList+0x1>
    2b14:	8e 83       	std	Y+6, r24	; 0x06
    2b16:	9f 83       	std	Y+7, r25	; 0x07
    2b18:	80 91 ea 34 	lds	r24, 0x34EA	; 0x8034ea <pxOverflowDelayedTaskList>
    2b1c:	90 91 eb 34 	lds	r25, 0x34EB	; 0x8034eb <pxOverflowDelayedTaskList+0x1>
    2b20:	80 93 e8 34 	sts	0x34E8, r24	; 0x8034e8 <pxDelayedTaskList>
    2b24:	90 93 e9 34 	sts	0x34E9, r25	; 0x8034e9 <pxDelayedTaskList+0x1>
    2b28:	8e 81       	ldd	r24, Y+6	; 0x06
    2b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b2c:	80 93 ea 34 	sts	0x34EA, r24	; 0x8034ea <pxOverflowDelayedTaskList>
    2b30:	90 93 eb 34 	sts	0x34EB, r25	; 0x8034eb <pxOverflowDelayedTaskList+0x1>
    2b34:	80 91 0b 35 	lds	r24, 0x350B	; 0x80350b <xNumOfOverflows>
    2b38:	8f 5f       	subi	r24, 0xFF	; 255
    2b3a:	80 93 0b 35 	sts	0x350B, r24	; 0x80350b <xNumOfOverflows>
    2b3e:	0e 94 c8 19 	call	0x3390	; 0x3390 <prvResetNextTaskUnblockTime>
    2b42:	80 91 0d 35 	lds	r24, 0x350D	; 0x80350d <xNextTaskUnblockTime>
    2b46:	90 91 0e 35 	lds	r25, 0x350E	; 0x80350e <xNextTaskUnblockTime+0x1>
    2b4a:	a0 91 0f 35 	lds	r26, 0x350F	; 0x80350f <xNextTaskUnblockTime+0x2>
    2b4e:	b0 91 10 35 	lds	r27, 0x3510	; 0x803510 <xNextTaskUnblockTime+0x3>
    2b52:	2a 81       	ldd	r18, Y+2	; 0x02
    2b54:	3b 81       	ldd	r19, Y+3	; 0x03
    2b56:	4c 81       	ldd	r20, Y+4	; 0x04
    2b58:	5d 81       	ldd	r21, Y+5	; 0x05
    2b5a:	28 17       	cp	r18, r24
    2b5c:	39 07       	cpc	r19, r25
    2b5e:	4a 07       	cpc	r20, r26
    2b60:	5b 07       	cpc	r21, r27
    2b62:	08 f4       	brcc	.+2      	; 0x2b66 <xTaskIncrementTick+0xba>
    2b64:	8a c0       	rjmp	.+276    	; 0x2c7a <xTaskIncrementTick+0x1ce>
    2b66:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxDelayedTaskList>
    2b6a:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxDelayedTaskList+0x1>
    2b6e:	fc 01       	movw	r30, r24
    2b70:	80 81       	ld	r24, Z
    2b72:	88 23       	and	r24, r24
    2b74:	61 f4       	brne	.+24     	; 0x2b8e <xTaskIncrementTick+0xe2>
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	9f ef       	ldi	r25, 0xFF	; 255
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	80 93 0d 35 	sts	0x350D, r24	; 0x80350d <xNextTaskUnblockTime>
    2b80:	90 93 0e 35 	sts	0x350E, r25	; 0x80350e <xNextTaskUnblockTime+0x1>
    2b84:	a0 93 0f 35 	sts	0x350F, r26	; 0x80350f <xNextTaskUnblockTime+0x2>
    2b88:	b0 93 10 35 	sts	0x3510, r27	; 0x803510 <xNextTaskUnblockTime+0x3>
    2b8c:	76 c0       	rjmp	.+236    	; 0x2c7a <xTaskIncrementTick+0x1ce>
    2b8e:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxDelayedTaskList>
    2b92:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxDelayedTaskList+0x1>
    2b96:	fc 01       	movw	r30, r24
    2b98:	87 81       	ldd	r24, Z+7	; 0x07
    2b9a:	90 85       	ldd	r25, Z+8	; 0x08
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	80 85       	ldd	r24, Z+8	; 0x08
    2ba0:	91 85       	ldd	r25, Z+9	; 0x09
    2ba2:	88 87       	std	Y+8, r24	; 0x08
    2ba4:	99 87       	std	Y+9, r25	; 0x09
    2ba6:	88 85       	ldd	r24, Y+8	; 0x08
    2ba8:	99 85       	ldd	r25, Y+9	; 0x09
    2baa:	fc 01       	movw	r30, r24
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	a4 81       	ldd	r26, Z+4	; 0x04
    2bb2:	b5 81       	ldd	r27, Z+5	; 0x05
    2bb4:	8a 87       	std	Y+10, r24	; 0x0a
    2bb6:	9b 87       	std	Y+11, r25	; 0x0b
    2bb8:	ac 87       	std	Y+12, r26	; 0x0c
    2bba:	bd 87       	std	Y+13, r27	; 0x0d
    2bbc:	2a 81       	ldd	r18, Y+2	; 0x02
    2bbe:	3b 81       	ldd	r19, Y+3	; 0x03
    2bc0:	4c 81       	ldd	r20, Y+4	; 0x04
    2bc2:	5d 81       	ldd	r21, Y+5	; 0x05
    2bc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bc8:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bca:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bcc:	28 17       	cp	r18, r24
    2bce:	39 07       	cpc	r19, r25
    2bd0:	4a 07       	cpc	r20, r26
    2bd2:	5b 07       	cpc	r21, r27
    2bd4:	68 f4       	brcc	.+26     	; 0x2bf0 <xTaskIncrementTick+0x144>
    2bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bda:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bdc:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bde:	80 93 0d 35 	sts	0x350D, r24	; 0x80350d <xNextTaskUnblockTime>
    2be2:	90 93 0e 35 	sts	0x350E, r25	; 0x80350e <xNextTaskUnblockTime+0x1>
    2be6:	a0 93 0f 35 	sts	0x350F, r26	; 0x80350f <xNextTaskUnblockTime+0x2>
    2bea:	b0 93 10 35 	sts	0x3510, r27	; 0x803510 <xNextTaskUnblockTime+0x3>
    2bee:	45 c0       	rjmp	.+138    	; 0x2c7a <xTaskIncrementTick+0x1ce>
    2bf0:	88 85       	ldd	r24, Y+8	; 0x08
    2bf2:	99 85       	ldd	r25, Y+9	; 0x09
    2bf4:	02 96       	adiw	r24, 0x02	; 2
    2bf6:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    2bfa:	88 85       	ldd	r24, Y+8	; 0x08
    2bfc:	99 85       	ldd	r25, Y+9	; 0x09
    2bfe:	fc 01       	movw	r30, r24
    2c00:	80 8d       	ldd	r24, Z+24	; 0x18
    2c02:	91 8d       	ldd	r25, Z+25	; 0x19
    2c04:	89 2b       	or	r24, r25
    2c06:	29 f0       	breq	.+10     	; 0x2c12 <xTaskIncrementTick+0x166>
    2c08:	88 85       	ldd	r24, Y+8	; 0x08
    2c0a:	99 85       	ldd	r25, Y+9	; 0x09
    2c0c:	0e 96       	adiw	r24, 0x0e	; 14
    2c0e:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    2c12:	88 85       	ldd	r24, Y+8	; 0x08
    2c14:	99 85       	ldd	r25, Y+9	; 0x09
    2c16:	fc 01       	movw	r30, r24
    2c18:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c1a:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxTopReadyPriority>
    2c1e:	89 17       	cp	r24, r25
    2c20:	30 f4       	brcc	.+12     	; 0x2c2e <xTaskIncrementTick+0x182>
    2c22:	88 85       	ldd	r24, Y+8	; 0x08
    2c24:	99 85       	ldd	r25, Y+9	; 0x09
    2c26:	fc 01       	movw	r30, r24
    2c28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c2a:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <uxTopReadyPriority>
    2c2e:	88 85       	ldd	r24, Y+8	; 0x08
    2c30:	99 85       	ldd	r25, Y+9	; 0x09
    2c32:	ac 01       	movw	r20, r24
    2c34:	4e 5f       	subi	r20, 0xFE	; 254
    2c36:	5f 4f       	sbci	r21, 0xFF	; 255
    2c38:	88 85       	ldd	r24, Y+8	; 0x08
    2c3a:	99 85       	ldd	r25, Y+9	; 0x09
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	6b e0       	ldi	r22, 0x0B	; 11
    2c46:	62 9f       	mul	r22, r18
    2c48:	c0 01       	movw	r24, r0
    2c4a:	63 9f       	mul	r22, r19
    2c4c:	90 0d       	add	r25, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	8a 55       	subi	r24, 0x5A	; 90
    2c52:	9b 4c       	sbci	r25, 0xCB	; 203
    2c54:	ba 01       	movw	r22, r20
    2c56:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>
    2c5a:	88 85       	ldd	r24, Y+8	; 0x08
    2c5c:	99 85       	ldd	r25, Y+9	; 0x09
    2c5e:	fc 01       	movw	r30, r24
    2c60:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c62:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2c66:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c6e:	28 17       	cp	r18, r24
    2c70:	08 f4       	brcc	.+2      	; 0x2c74 <xTaskIncrementTick+0x1c8>
    2c72:	79 cf       	rjmp	.-270    	; 0x2b66 <xTaskIncrementTick+0xba>
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	76 cf       	rjmp	.-276    	; 0x2b66 <xTaskIncrementTick+0xba>
    2c7a:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2c7e:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2c82:	fc 01       	movw	r30, r24
    2c84:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4b e0       	ldi	r20, 0x0B	; 11
    2c8c:	42 9f       	mul	r20, r18
    2c8e:	c0 01       	movw	r24, r0
    2c90:	43 9f       	mul	r20, r19
    2c92:	90 0d       	add	r25, r0
    2c94:	11 24       	eor	r1, r1
    2c96:	8a 55       	subi	r24, 0x5A	; 90
    2c98:	9b 4c       	sbci	r25, 0xCB	; 203
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	80 81       	ld	r24, Z
    2c9e:	82 30       	cpi	r24, 0x02	; 2
    2ca0:	40 f0       	brcs	.+16     	; 0x2cb2 <xTaskIncrementTick+0x206>
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	05 c0       	rjmp	.+10     	; 0x2cb2 <xTaskIncrementTick+0x206>
    2ca8:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <uxPendedTicks>
    2cac:	8f 5f       	subi	r24, 0xFF	; 255
    2cae:	80 93 09 35 	sts	0x3509, r24	; 0x803509 <uxPendedTicks>
    2cb2:	80 91 0a 35 	lds	r24, 0x350A	; 0x80350a <xYieldPending>
    2cb6:	88 23       	and	r24, r24
    2cb8:	11 f0       	breq	.+4      	; 0x2cbe <xTaskIncrementTick+0x212>
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	2d 96       	adiw	r28, 0x0d	; 13
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	08 95       	ret

00002ccc <vTaskSwitchContext>:
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	29 97       	sbiw	r28, 0x09	; 9
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	80 91 13 35 	lds	r24, 0x3513	; 0x803513 <uxSchedulerSuspended>
    2cde:	88 23       	and	r24, r24
    2ce0:	21 f0       	breq	.+8      	; 0x2cea <vTaskSwitchContext+0x1e>
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	80 93 0a 35 	sts	0x350A, r24	; 0x80350a <xYieldPending>
    2ce8:	ba c0       	rjmp	.+372    	; 0x2e5e <vTaskSwitchContext+0x192>
    2cea:	10 92 0a 35 	sts	0x350A, r1	; 0x80350a <xYieldPending>
    2cee:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2cf2:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	83 8d       	ldd	r24, Z+27	; 0x1b
    2cfa:	94 8d       	ldd	r25, Z+28	; 0x1c
    2cfc:	8a 83       	std	Y+2, r24	; 0x02
    2cfe:	9b 83       	std	Y+3, r25	; 0x03
    2d00:	85 ea       	ldi	r24, 0xA5	; 165
    2d02:	95 ea       	ldi	r25, 0xA5	; 165
    2d04:	dc 01       	movw	r26, r24
    2d06:	8c 83       	std	Y+4, r24	; 0x04
    2d08:	9d 83       	std	Y+5, r25	; 0x05
    2d0a:	ae 83       	std	Y+6, r26	; 0x06
    2d0c:	bf 83       	std	Y+7, r27	; 0x07
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	9b 81       	ldd	r25, Y+3	; 0x03
    2d12:	fc 01       	movw	r30, r24
    2d14:	20 81       	ld	r18, Z
    2d16:	31 81       	ldd	r19, Z+1	; 0x01
    2d18:	42 81       	ldd	r20, Z+2	; 0x02
    2d1a:	53 81       	ldd	r21, Z+3	; 0x03
    2d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d20:	ae 81       	ldd	r26, Y+6	; 0x06
    2d22:	bf 81       	ldd	r27, Y+7	; 0x07
    2d24:	28 17       	cp	r18, r24
    2d26:	39 07       	cpc	r19, r25
    2d28:	4a 07       	cpc	r20, r26
    2d2a:	5b 07       	cpc	r21, r27
    2d2c:	99 f5       	brne	.+102    	; 0x2d94 <vTaskSwitchContext+0xc8>
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	9b 81       	ldd	r25, Y+3	; 0x03
    2d32:	04 96       	adiw	r24, 0x04	; 4
    2d34:	fc 01       	movw	r30, r24
    2d36:	20 81       	ld	r18, Z
    2d38:	31 81       	ldd	r19, Z+1	; 0x01
    2d3a:	42 81       	ldd	r20, Z+2	; 0x02
    2d3c:	53 81       	ldd	r21, Z+3	; 0x03
    2d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d40:	9d 81       	ldd	r25, Y+5	; 0x05
    2d42:	ae 81       	ldd	r26, Y+6	; 0x06
    2d44:	bf 81       	ldd	r27, Y+7	; 0x07
    2d46:	28 17       	cp	r18, r24
    2d48:	39 07       	cpc	r19, r25
    2d4a:	4a 07       	cpc	r20, r26
    2d4c:	5b 07       	cpc	r21, r27
    2d4e:	11 f5       	brne	.+68     	; 0x2d94 <vTaskSwitchContext+0xc8>
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	9b 81       	ldd	r25, Y+3	; 0x03
    2d54:	08 96       	adiw	r24, 0x08	; 8
    2d56:	fc 01       	movw	r30, r24
    2d58:	20 81       	ld	r18, Z
    2d5a:	31 81       	ldd	r19, Z+1	; 0x01
    2d5c:	42 81       	ldd	r20, Z+2	; 0x02
    2d5e:	53 81       	ldd	r21, Z+3	; 0x03
    2d60:	8c 81       	ldd	r24, Y+4	; 0x04
    2d62:	9d 81       	ldd	r25, Y+5	; 0x05
    2d64:	ae 81       	ldd	r26, Y+6	; 0x06
    2d66:	bf 81       	ldd	r27, Y+7	; 0x07
    2d68:	28 17       	cp	r18, r24
    2d6a:	39 07       	cpc	r19, r25
    2d6c:	4a 07       	cpc	r20, r26
    2d6e:	5b 07       	cpc	r21, r27
    2d70:	89 f4       	brne	.+34     	; 0x2d94 <vTaskSwitchContext+0xc8>
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	9b 81       	ldd	r25, Y+3	; 0x03
    2d76:	0c 96       	adiw	r24, 0x0c	; 12
    2d78:	fc 01       	movw	r30, r24
    2d7a:	20 81       	ld	r18, Z
    2d7c:	31 81       	ldd	r19, Z+1	; 0x01
    2d7e:	42 81       	ldd	r20, Z+2	; 0x02
    2d80:	53 81       	ldd	r21, Z+3	; 0x03
    2d82:	8c 81       	ldd	r24, Y+4	; 0x04
    2d84:	9d 81       	ldd	r25, Y+5	; 0x05
    2d86:	ae 81       	ldd	r26, Y+6	; 0x06
    2d88:	bf 81       	ldd	r27, Y+7	; 0x07
    2d8a:	28 17       	cp	r18, r24
    2d8c:	39 07       	cpc	r19, r25
    2d8e:	4a 07       	cpc	r20, r26
    2d90:	5b 07       	cpc	r21, r27
    2d92:	71 f0       	breq	.+28     	; 0x2db0 <vTaskSwitchContext+0xe4>
    2d94:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2d98:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2d9c:	9c 01       	movw	r18, r24
    2d9e:	23 5e       	subi	r18, 0xE3	; 227
    2da0:	3f 4f       	sbci	r19, 0xFF	; 255
    2da2:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2da6:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2daa:	b9 01       	movw	r22, r18
    2dac:	0e 94 af 03 	call	0x75e	; 0x75e <vApplicationStackOverflowHook>
    2db0:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxTopReadyPriority>
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	03 c0       	rjmp	.+6      	; 0x2dbe <vTaskSwitchContext+0xf2>
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	81 50       	subi	r24, 0x01	; 1
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	28 2f       	mov	r18, r24
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	4b e0       	ldi	r20, 0x0B	; 11
    2dc6:	42 9f       	mul	r20, r18
    2dc8:	c0 01       	movw	r24, r0
    2dca:	43 9f       	mul	r20, r19
    2dcc:	90 0d       	add	r25, r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	8a 55       	subi	r24, 0x5A	; 90
    2dd2:	9b 4c       	sbci	r25, 0xCB	; 203
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	80 81       	ld	r24, Z
    2dd8:	88 23       	and	r24, r24
    2dda:	71 f3       	breq	.-36     	; 0x2db8 <vTaskSwitchContext+0xec>
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	4b e0       	ldi	r20, 0x0B	; 11
    2de4:	42 9f       	mul	r20, r18
    2de6:	c0 01       	movw	r24, r0
    2de8:	43 9f       	mul	r20, r19
    2dea:	90 0d       	add	r25, r0
    2dec:	11 24       	eor	r1, r1
    2dee:	8a 55       	subi	r24, 0x5A	; 90
    2df0:	9b 4c       	sbci	r25, 0xCB	; 203
    2df2:	88 87       	std	Y+8, r24	; 0x08
    2df4:	99 87       	std	Y+9, r25	; 0x09
    2df6:	88 85       	ldd	r24, Y+8	; 0x08
    2df8:	99 85       	ldd	r25, Y+9	; 0x09
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	81 81       	ldd	r24, Z+1	; 0x01
    2dfe:	92 81       	ldd	r25, Z+2	; 0x02
    2e00:	fc 01       	movw	r30, r24
    2e02:	24 81       	ldd	r18, Z+4	; 0x04
    2e04:	35 81       	ldd	r19, Z+5	; 0x05
    2e06:	88 85       	ldd	r24, Y+8	; 0x08
    2e08:	99 85       	ldd	r25, Y+9	; 0x09
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	21 83       	std	Z+1, r18	; 0x01
    2e0e:	32 83       	std	Z+2, r19	; 0x02
    2e10:	88 85       	ldd	r24, Y+8	; 0x08
    2e12:	99 85       	ldd	r25, Y+9	; 0x09
    2e14:	fc 01       	movw	r30, r24
    2e16:	21 81       	ldd	r18, Z+1	; 0x01
    2e18:	32 81       	ldd	r19, Z+2	; 0x02
    2e1a:	88 85       	ldd	r24, Y+8	; 0x08
    2e1c:	99 85       	ldd	r25, Y+9	; 0x09
    2e1e:	03 96       	adiw	r24, 0x03	; 3
    2e20:	28 17       	cp	r18, r24
    2e22:	39 07       	cpc	r19, r25
    2e24:	69 f4       	brne	.+26     	; 0x2e40 <vTaskSwitchContext+0x174>
    2e26:	88 85       	ldd	r24, Y+8	; 0x08
    2e28:	99 85       	ldd	r25, Y+9	; 0x09
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	81 81       	ldd	r24, Z+1	; 0x01
    2e2e:	92 81       	ldd	r25, Z+2	; 0x02
    2e30:	fc 01       	movw	r30, r24
    2e32:	24 81       	ldd	r18, Z+4	; 0x04
    2e34:	35 81       	ldd	r19, Z+5	; 0x05
    2e36:	88 85       	ldd	r24, Y+8	; 0x08
    2e38:	99 85       	ldd	r25, Y+9	; 0x09
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	21 83       	std	Z+1, r18	; 0x01
    2e3e:	32 83       	std	Z+2, r19	; 0x02
    2e40:	88 85       	ldd	r24, Y+8	; 0x08
    2e42:	99 85       	ldd	r25, Y+9	; 0x09
    2e44:	fc 01       	movw	r30, r24
    2e46:	81 81       	ldd	r24, Z+1	; 0x01
    2e48:	92 81       	ldd	r25, Z+2	; 0x02
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	80 85       	ldd	r24, Z+8	; 0x08
    2e4e:	91 85       	ldd	r25, Z+9	; 0x09
    2e50:	80 93 a4 34 	sts	0x34A4, r24	; 0x8034a4 <pxCurrentTCB>
    2e54:	90 93 a5 34 	sts	0x34A5, r25	; 0x8034a5 <pxCurrentTCB+0x1>
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <uxTopReadyPriority>
    2e5e:	00 00       	nop
    2e60:	29 96       	adiw	r28, 0x09	; 9
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	de bf       	out	0x3e, r29	; 62
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <vTaskPlaceOnEventList>:
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <vTaskPlaceOnEventList+0x6>
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <vTaskPlaceOnEventList+0x8>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	9a 83       	std	Y+2, r25	; 0x02
    2e7c:	4b 83       	std	Y+3, r20	; 0x03
    2e7e:	5c 83       	std	Y+4, r21	; 0x04
    2e80:	6d 83       	std	Y+5, r22	; 0x05
    2e82:	7e 83       	std	Y+6, r23	; 0x06
    2e84:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2e88:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2e8c:	9c 01       	movw	r18, r24
    2e8e:	22 5f       	subi	r18, 0xF2	; 242
    2e90:	3f 4f       	sbci	r19, 0xFF	; 255
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	b9 01       	movw	r22, r18
    2e98:	0e 94 20 08 	call	0x1040	; 0x1040 <vListInsert>
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea0:	ad 81       	ldd	r26, Y+5	; 0x05
    2ea2:	be 81       	ldd	r27, Y+6	; 0x06
    2ea4:	41 e0       	ldi	r20, 0x01	; 1
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <prvAddCurrentTaskToDelayedList>
    2eae:	00 00       	nop
    2eb0:	26 96       	adiw	r28, 0x06	; 6
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <vTaskPlaceOnUnorderedEventList>:
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	2a 97       	sbiw	r28, 0x0a	; 10
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	4b 83       	std	Y+3, r20	; 0x03
    2ed4:	5c 83       	std	Y+4, r21	; 0x04
    2ed6:	6d 83       	std	Y+5, r22	; 0x05
    2ed8:	7e 83       	std	Y+6, r23	; 0x06
    2eda:	0f 83       	std	Y+7, r16	; 0x07
    2edc:	18 87       	std	Y+8, r17	; 0x08
    2ede:	29 87       	std	Y+9, r18	; 0x09
    2ee0:	3a 87       	std	Y+10, r19	; 0x0a
    2ee2:	20 91 a4 34 	lds	r18, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2ee6:	30 91 a5 34 	lds	r19, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	9c 81       	ldd	r25, Y+4	; 0x04
    2eee:	ad 81       	ldd	r26, Y+5	; 0x05
    2ef0:	be 81       	ldd	r27, Y+6	; 0x06
    2ef2:	b0 68       	ori	r27, 0x80	; 128
    2ef4:	f9 01       	movw	r30, r18
    2ef6:	86 87       	std	Z+14, r24	; 0x0e
    2ef8:	97 87       	std	Z+15, r25	; 0x0f
    2efa:	a0 8b       	std	Z+16, r26	; 0x10
    2efc:	b1 8b       	std	Z+17, r27	; 0x11
    2efe:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2f02:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2f06:	9c 01       	movw	r18, r24
    2f08:	22 5f       	subi	r18, 0xF2	; 242
    2f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f10:	b9 01       	movw	r22, r18
    2f12:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>
    2f16:	8f 81       	ldd	r24, Y+7	; 0x07
    2f18:	98 85       	ldd	r25, Y+8	; 0x08
    2f1a:	a9 85       	ldd	r26, Y+9	; 0x09
    2f1c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f1e:	41 e0       	ldi	r20, 0x01	; 1
    2f20:	bc 01       	movw	r22, r24
    2f22:	cd 01       	movw	r24, r26
    2f24:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <prvAddCurrentTaskToDelayedList>
    2f28:	00 00       	nop
    2f2a:	2a 96       	adiw	r28, 0x0a	; 10
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <vTaskPlaceOnEventListRestricted>:
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	27 97       	sbiw	r28, 0x07	; 7
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	9a 83       	std	Y+2, r25	; 0x02
    2f4c:	4b 83       	std	Y+3, r20	; 0x03
    2f4e:	5c 83       	std	Y+4, r21	; 0x04
    2f50:	6d 83       	std	Y+5, r22	; 0x05
    2f52:	7e 83       	std	Y+6, r23	; 0x06
    2f54:	2f 83       	std	Y+7, r18	; 0x07
    2f56:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    2f5a:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    2f5e:	9c 01       	movw	r18, r24
    2f60:	22 5f       	subi	r18, 0xF2	; 242
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	9a 81       	ldd	r25, Y+2	; 0x02
    2f68:	b9 01       	movw	r22, r18
    2f6a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>
    2f6e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f70:	88 23       	and	r24, r24
    2f72:	39 f0       	breq	.+14     	; 0x2f82 <vTaskPlaceOnEventListRestricted+0x48>
    2f74:	8f ef       	ldi	r24, 0xFF	; 255
    2f76:	9f ef       	ldi	r25, 0xFF	; 255
    2f78:	dc 01       	movw	r26, r24
    2f7a:	8b 83       	std	Y+3, r24	; 0x03
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	ad 83       	std	Y+5, r26	; 0x05
    2f80:	be 83       	std	Y+6, r27	; 0x06
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9c 81       	ldd	r25, Y+4	; 0x04
    2f86:	ad 81       	ldd	r26, Y+5	; 0x05
    2f88:	be 81       	ldd	r27, Y+6	; 0x06
    2f8a:	4f 81       	ldd	r20, Y+7	; 0x07
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <prvAddCurrentTaskToDelayedList>
    2f94:	00 00       	nop
    2f96:	27 96       	adiw	r28, 0x07	; 7
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	08 95       	ret

00002fa2 <xTaskRemoveFromEventList>:
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	25 97       	sbiw	r28, 0x05	; 5
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	8c 83       	std	Y+4, r24	; 0x04
    2fb2:	9d 83       	std	Y+5, r25	; 0x05
    2fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb8:	fc 01       	movw	r30, r24
    2fba:	87 81       	ldd	r24, Z+7	; 0x07
    2fbc:	90 85       	ldd	r25, Z+8	; 0x08
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	80 85       	ldd	r24, Z+8	; 0x08
    2fc2:	91 85       	ldd	r25, Z+9	; 0x09
    2fc4:	8a 83       	std	Y+2, r24	; 0x02
    2fc6:	9b 83       	std	Y+3, r25	; 0x03
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	9b 81       	ldd	r25, Y+3	; 0x03
    2fcc:	0e 96       	adiw	r24, 0x0e	; 14
    2fce:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    2fd2:	80 91 13 35 	lds	r24, 0x3513	; 0x803513 <uxSchedulerSuspended>
    2fd6:	88 23       	and	r24, r24
    2fd8:	51 f5       	brne	.+84     	; 0x302e <xTaskRemoveFromEventList+0x8c>
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fde:	02 96       	adiw	r24, 0x02	; 2
    2fe0:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe8:	fc 01       	movw	r30, r24
    2fea:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fec:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxTopReadyPriority>
    2ff0:	89 17       	cp	r24, r25
    2ff2:	30 f4       	brcc	.+12     	; 0x3000 <xTaskRemoveFromEventList+0x5e>
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ffc:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <uxTopReadyPriority>
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	9b 81       	ldd	r25, Y+3	; 0x03
    3004:	ac 01       	movw	r20, r24
    3006:	4e 5f       	subi	r20, 0xFE	; 254
    3008:	5f 4f       	sbci	r21, 0xFF	; 255
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	fc 01       	movw	r30, r24
    3010:	82 8d       	ldd	r24, Z+26	; 0x1a
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	6b e0       	ldi	r22, 0x0B	; 11
    3018:	62 9f       	mul	r22, r18
    301a:	c0 01       	movw	r24, r0
    301c:	63 9f       	mul	r22, r19
    301e:	90 0d       	add	r25, r0
    3020:	11 24       	eor	r1, r1
    3022:	8a 55       	subi	r24, 0x5A	; 90
    3024:	9b 4c       	sbci	r25, 0xCB	; 203
    3026:	ba 01       	movw	r22, r20
    3028:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>
    302c:	08 c0       	rjmp	.+16     	; 0x303e <xTaskRemoveFromEventList+0x9c>
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	9b 81       	ldd	r25, Y+3	; 0x03
    3032:	0e 96       	adiw	r24, 0x0e	; 14
    3034:	bc 01       	movw	r22, r24
    3036:	8c ee       	ldi	r24, 0xEC	; 236
    3038:	94 e3       	ldi	r25, 0x34	; 52
    303a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>
    303e:	8a 81       	ldd	r24, Y+2	; 0x02
    3040:	9b 81       	ldd	r25, Y+3	; 0x03
    3042:	fc 01       	movw	r30, r24
    3044:	22 8d       	ldd	r18, Z+26	; 0x1a
    3046:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    304a:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    304e:	fc 01       	movw	r30, r24
    3050:	82 8d       	ldd	r24, Z+26	; 0x1a
    3052:	82 17       	cp	r24, r18
    3054:	30 f4       	brcc	.+12     	; 0x3062 <xTaskRemoveFromEventList+0xc0>
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	89 83       	std	Y+1, r24	; 0x01
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	80 93 0a 35 	sts	0x350A, r24	; 0x80350a <xYieldPending>
    3060:	01 c0       	rjmp	.+2      	; 0x3064 <xTaskRemoveFromEventList+0xc2>
    3062:	19 82       	std	Y+1, r1	; 0x01
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	25 96       	adiw	r28, 0x05	; 5
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	08 95       	ret

00003072 <vTaskRemoveFromUnorderedEventList>:
    3072:	cf 93       	push	r28
    3074:	df 93       	push	r29
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	28 97       	sbiw	r28, 0x08	; 8
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	de bf       	out	0x3e, r29	; 62
    3080:	8b 83       	std	Y+3, r24	; 0x03
    3082:	9c 83       	std	Y+4, r25	; 0x04
    3084:	4d 83       	std	Y+5, r20	; 0x05
    3086:	5e 83       	std	Y+6, r21	; 0x06
    3088:	6f 83       	std	Y+7, r22	; 0x07
    308a:	78 87       	std	Y+8, r23	; 0x08
    308c:	8d 81       	ldd	r24, Y+5	; 0x05
    308e:	9e 81       	ldd	r25, Y+6	; 0x06
    3090:	af 81       	ldd	r26, Y+7	; 0x07
    3092:	b8 85       	ldd	r27, Y+8	; 0x08
    3094:	b0 68       	ori	r27, 0x80	; 128
    3096:	2b 81       	ldd	r18, Y+3	; 0x03
    3098:	3c 81       	ldd	r19, Y+4	; 0x04
    309a:	f9 01       	movw	r30, r18
    309c:	80 83       	st	Z, r24
    309e:	91 83       	std	Z+1, r25	; 0x01
    30a0:	a2 83       	std	Z+2, r26	; 0x02
    30a2:	b3 83       	std	Z+3, r27	; 0x03
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	9c 81       	ldd	r25, Y+4	; 0x04
    30a8:	fc 01       	movw	r30, r24
    30aa:	80 85       	ldd	r24, Z+8	; 0x08
    30ac:	91 85       	ldd	r25, Z+9	; 0x09
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	9c 81       	ldd	r25, Y+4	; 0x04
    30b6:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	02 96       	adiw	r24, 0x02	; 2
    30c0:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	9a 81       	ldd	r25, Y+2	; 0x02
    30c8:	fc 01       	movw	r30, r24
    30ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    30cc:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <uxTopReadyPriority>
    30d0:	89 17       	cp	r24, r25
    30d2:	30 f4       	brcc	.+12     	; 0x30e0 <vTaskRemoveFromUnorderedEventList+0x6e>
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	9a 81       	ldd	r25, Y+2	; 0x02
    30d8:	fc 01       	movw	r30, r24
    30da:	82 8d       	ldd	r24, Z+26	; 0x1a
    30dc:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <uxTopReadyPriority>
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	9a 81       	ldd	r25, Y+2	; 0x02
    30e4:	ac 01       	movw	r20, r24
    30e6:	4e 5f       	subi	r20, 0xFE	; 254
    30e8:	5f 4f       	sbci	r21, 0xFF	; 255
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	9a 81       	ldd	r25, Y+2	; 0x02
    30ee:	fc 01       	movw	r30, r24
    30f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    30f2:	28 2f       	mov	r18, r24
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	6b e0       	ldi	r22, 0x0B	; 11
    30f8:	62 9f       	mul	r22, r18
    30fa:	c0 01       	movw	r24, r0
    30fc:	63 9f       	mul	r22, r19
    30fe:	90 0d       	add	r25, r0
    3100:	11 24       	eor	r1, r1
    3102:	8a 55       	subi	r24, 0x5A	; 90
    3104:	9b 4c       	sbci	r25, 0xCB	; 203
    3106:	ba 01       	movw	r22, r20
    3108:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	9a 81       	ldd	r25, Y+2	; 0x02
    3110:	fc 01       	movw	r30, r24
    3112:	22 8d       	ldd	r18, Z+26	; 0x1a
    3114:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    3118:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    311c:	fc 01       	movw	r30, r24
    311e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3120:	82 17       	cp	r24, r18
    3122:	18 f4       	brcc	.+6      	; 0x312a <vTaskRemoveFromUnorderedEventList+0xb8>
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	80 93 0a 35 	sts	0x350A, r24	; 0x80350a <xYieldPending>
    312a:	00 00       	nop
    312c:	28 96       	adiw	r28, 0x08	; 8
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	08 95       	ret

00003138 <vTaskInternalSetTimeOutState>:
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	1f 92       	push	r1
    313e:	1f 92       	push	r1
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	9a 83       	std	Y+2, r25	; 0x02
    3148:	20 91 0b 35 	lds	r18, 0x350B	; 0x80350b <xNumOfOverflows>
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	fc 01       	movw	r30, r24
    3152:	20 83       	st	Z, r18
    3154:	80 91 03 35 	lds	r24, 0x3503	; 0x803503 <xTickCount>
    3158:	90 91 04 35 	lds	r25, 0x3504	; 0x803504 <xTickCount+0x1>
    315c:	a0 91 05 35 	lds	r26, 0x3505	; 0x803505 <xTickCount+0x2>
    3160:	b0 91 06 35 	lds	r27, 0x3506	; 0x803506 <xTickCount+0x3>
    3164:	29 81       	ldd	r18, Y+1	; 0x01
    3166:	3a 81       	ldd	r19, Y+2	; 0x02
    3168:	f9 01       	movw	r30, r18
    316a:	81 83       	std	Z+1, r24	; 0x01
    316c:	92 83       	std	Z+2, r25	; 0x02
    316e:	a3 83       	std	Z+3, r26	; 0x03
    3170:	b4 83       	std	Z+4, r27	; 0x04
    3172:	00 00       	nop
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <xTaskCheckForTimeOut>:
    317e:	ef 92       	push	r14
    3180:	ff 92       	push	r15
    3182:	0f 93       	push	r16
    3184:	1f 93       	push	r17
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	2d 97       	sbiw	r28, 0x0d	; 13
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	8a 87       	std	Y+10, r24	; 0x0a
    3196:	9b 87       	std	Y+11, r25	; 0x0b
    3198:	6c 87       	std	Y+12, r22	; 0x0c
    319a:	7d 87       	std	Y+13, r23	; 0x0d
    319c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    31a0:	ff 93       	push	r31
    31a2:	f8 7f       	andi	r31, 0xF8	; 248
    31a4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    31a8:	80 91 03 35 	lds	r24, 0x3503	; 0x803503 <xTickCount>
    31ac:	90 91 04 35 	lds	r25, 0x3504	; 0x803504 <xTickCount+0x1>
    31b0:	a0 91 05 35 	lds	r26, 0x3505	; 0x803505 <xTickCount+0x2>
    31b4:	b0 91 06 35 	lds	r27, 0x3506	; 0x803506 <xTickCount+0x3>
    31b8:	8a 83       	std	Y+2, r24	; 0x02
    31ba:	9b 83       	std	Y+3, r25	; 0x03
    31bc:	ac 83       	std	Y+4, r26	; 0x04
    31be:	bd 83       	std	Y+5, r27	; 0x05
    31c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    31c4:	fc 01       	movw	r30, r24
    31c6:	81 81       	ldd	r24, Z+1	; 0x01
    31c8:	92 81       	ldd	r25, Z+2	; 0x02
    31ca:	a3 81       	ldd	r26, Z+3	; 0x03
    31cc:	b4 81       	ldd	r27, Z+4	; 0x04
    31ce:	2a 81       	ldd	r18, Y+2	; 0x02
    31d0:	3b 81       	ldd	r19, Y+3	; 0x03
    31d2:	4c 81       	ldd	r20, Y+4	; 0x04
    31d4:	5d 81       	ldd	r21, Y+5	; 0x05
    31d6:	79 01       	movw	r14, r18
    31d8:	8a 01       	movw	r16, r20
    31da:	e8 1a       	sub	r14, r24
    31dc:	f9 0a       	sbc	r15, r25
    31de:	0a 0b       	sbc	r16, r26
    31e0:	1b 0b       	sbc	r17, r27
    31e2:	d8 01       	movw	r26, r16
    31e4:	c7 01       	movw	r24, r14
    31e6:	8e 83       	std	Y+6, r24	; 0x06
    31e8:	9f 83       	std	Y+7, r25	; 0x07
    31ea:	a8 87       	std	Y+8, r26	; 0x08
    31ec:	b9 87       	std	Y+9, r27	; 0x09
    31ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    31f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31f2:	fc 01       	movw	r30, r24
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	a2 81       	ldd	r26, Z+2	; 0x02
    31fa:	b3 81       	ldd	r27, Z+3	; 0x03
    31fc:	8f 3f       	cpi	r24, 0xFF	; 255
    31fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3200:	af 4f       	sbci	r26, 0xFF	; 255
    3202:	bf 4f       	sbci	r27, 0xFF	; 255
    3204:	11 f4       	brne	.+4      	; 0x320a <xTaskCheckForTimeOut+0x8c>
    3206:	19 82       	std	Y+1, r1	; 0x01
    3208:	54 c0       	rjmp	.+168    	; 0x32b2 <xTaskCheckForTimeOut+0x134>
    320a:	8a 85       	ldd	r24, Y+10	; 0x0a
    320c:	9b 85       	ldd	r25, Y+11	; 0x0b
    320e:	fc 01       	movw	r30, r24
    3210:	90 81       	ld	r25, Z
    3212:	80 91 0b 35 	lds	r24, 0x350B	; 0x80350b <xNumOfOverflows>
    3216:	98 17       	cp	r25, r24
    3218:	99 f0       	breq	.+38     	; 0x3240 <xTaskCheckForTimeOut+0xc2>
    321a:	8a 85       	ldd	r24, Y+10	; 0x0a
    321c:	9b 85       	ldd	r25, Y+11	; 0x0b
    321e:	fc 01       	movw	r30, r24
    3220:	21 81       	ldd	r18, Z+1	; 0x01
    3222:	32 81       	ldd	r19, Z+2	; 0x02
    3224:	43 81       	ldd	r20, Z+3	; 0x03
    3226:	54 81       	ldd	r21, Z+4	; 0x04
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	9b 81       	ldd	r25, Y+3	; 0x03
    322c:	ac 81       	ldd	r26, Y+4	; 0x04
    322e:	bd 81       	ldd	r27, Y+5	; 0x05
    3230:	82 17       	cp	r24, r18
    3232:	93 07       	cpc	r25, r19
    3234:	a4 07       	cpc	r26, r20
    3236:	b5 07       	cpc	r27, r21
    3238:	18 f0       	brcs	.+6      	; 0x3240 <xTaskCheckForTimeOut+0xc2>
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	89 83       	std	Y+1, r24	; 0x01
    323e:	39 c0       	rjmp	.+114    	; 0x32b2 <xTaskCheckForTimeOut+0x134>
    3240:	8c 85       	ldd	r24, Y+12	; 0x0c
    3242:	9d 85       	ldd	r25, Y+13	; 0x0d
    3244:	fc 01       	movw	r30, r24
    3246:	20 81       	ld	r18, Z
    3248:	31 81       	ldd	r19, Z+1	; 0x01
    324a:	42 81       	ldd	r20, Z+2	; 0x02
    324c:	53 81       	ldd	r21, Z+3	; 0x03
    324e:	8e 81       	ldd	r24, Y+6	; 0x06
    3250:	9f 81       	ldd	r25, Y+7	; 0x07
    3252:	a8 85       	ldd	r26, Y+8	; 0x08
    3254:	b9 85       	ldd	r27, Y+9	; 0x09
    3256:	82 17       	cp	r24, r18
    3258:	93 07       	cpc	r25, r19
    325a:	a4 07       	cpc	r26, r20
    325c:	b5 07       	cpc	r27, r21
    325e:	00 f5       	brcc	.+64     	; 0x32a0 <xTaskCheckForTimeOut+0x122>
    3260:	8c 85       	ldd	r24, Y+12	; 0x0c
    3262:	9d 85       	ldd	r25, Y+13	; 0x0d
    3264:	fc 01       	movw	r30, r24
    3266:	20 81       	ld	r18, Z
    3268:	31 81       	ldd	r19, Z+1	; 0x01
    326a:	42 81       	ldd	r20, Z+2	; 0x02
    326c:	53 81       	ldd	r21, Z+3	; 0x03
    326e:	8e 81       	ldd	r24, Y+6	; 0x06
    3270:	9f 81       	ldd	r25, Y+7	; 0x07
    3272:	a8 85       	ldd	r26, Y+8	; 0x08
    3274:	b9 85       	ldd	r27, Y+9	; 0x09
    3276:	79 01       	movw	r14, r18
    3278:	8a 01       	movw	r16, r20
    327a:	e8 1a       	sub	r14, r24
    327c:	f9 0a       	sbc	r15, r25
    327e:	0a 0b       	sbc	r16, r26
    3280:	1b 0b       	sbc	r17, r27
    3282:	d8 01       	movw	r26, r16
    3284:	c7 01       	movw	r24, r14
    3286:	2c 85       	ldd	r18, Y+12	; 0x0c
    3288:	3d 85       	ldd	r19, Y+13	; 0x0d
    328a:	f9 01       	movw	r30, r18
    328c:	80 83       	st	Z, r24
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	a2 83       	std	Z+2, r26	; 0x02
    3292:	b3 83       	std	Z+3, r27	; 0x03
    3294:	8a 85       	ldd	r24, Y+10	; 0x0a
    3296:	9b 85       	ldd	r25, Y+11	; 0x0b
    3298:	0e 94 9c 18 	call	0x3138	; 0x3138 <vTaskInternalSetTimeOutState>
    329c:	19 82       	std	Y+1, r1	; 0x01
    329e:	09 c0       	rjmp	.+18     	; 0x32b2 <xTaskCheckForTimeOut+0x134>
    32a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    32a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    32a4:	fc 01       	movw	r30, r24
    32a6:	10 82       	st	Z, r1
    32a8:	11 82       	std	Z+1, r1	; 0x01
    32aa:	12 82       	std	Z+2, r1	; 0x02
    32ac:	13 82       	std	Z+3, r1	; 0x03
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	ff 91       	pop	r31
    32b4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	2d 96       	adiw	r28, 0x0d	; 13
    32bc:	cd bf       	out	0x3d, r28	; 61
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	ff 90       	pop	r15
    32ca:	ef 90       	pop	r14
    32cc:	08 95       	ret

000032ce <vTaskMissedYield>:
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	80 93 0a 35 	sts	0x350A, r24	; 0x80350a <xYieldPending>
    32dc:	00 00       	nop
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	08 95       	ret

000032e4 <prvIdleTask>:
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	1f 92       	push	r1
    32ea:	1f 92       	push	r1
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	9a 83       	std	Y+2, r25	; 0x02
    32f4:	0e 94 c0 19 	call	0x3380	; 0x3380 <prvCheckTasksWaitingTermination>
    32f8:	80 91 a6 34 	lds	r24, 0x34A6	; 0x8034a6 <pxReadyTasksLists>
    32fc:	82 30       	cpi	r24, 0x02	; 2
    32fe:	10 f0       	brcs	.+4      	; 0x3304 <prvIdleTask+0x20>
    3300:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    3304:	0e 94 61 20 	call	0x40c2	; 0x40c2 <vApplicationIdleHook>
    3308:	f5 cf       	rjmp	.-22     	; 0x32f4 <prvIdleTask+0x10>

0000330a <prvInitialiseTaskLists>:
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	1f 92       	push	r1
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	19 82       	std	Y+1, r1	; 0x01
    3316:	10 c0       	rjmp	.+32     	; 0x3338 <prvInitialiseTaskLists+0x2e>
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	4b e0       	ldi	r20, 0x0B	; 11
    3320:	42 9f       	mul	r20, r18
    3322:	c0 01       	movw	r24, r0
    3324:	43 9f       	mul	r20, r19
    3326:	90 0d       	add	r25, r0
    3328:	11 24       	eor	r1, r1
    332a:	8a 55       	subi	r24, 0x5A	; 90
    332c:	9b 4c       	sbci	r25, 0xCB	; 203
    332e:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	8f 5f       	subi	r24, 0xFF	; 255
    3336:	89 83       	std	Y+1, r24	; 0x01
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	84 30       	cpi	r24, 0x04	; 4
    333c:	68 f3       	brcs	.-38     	; 0x3318 <prvInitialiseTaskLists+0xe>
    333e:	82 ed       	ldi	r24, 0xD2	; 210
    3340:	94 e3       	ldi	r25, 0x34	; 52
    3342:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    3346:	8d ed       	ldi	r24, 0xDD	; 221
    3348:	94 e3       	ldi	r25, 0x34	; 52
    334a:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    334e:	8c ee       	ldi	r24, 0xEC	; 236
    3350:	94 e3       	ldi	r25, 0x34	; 52
    3352:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    3356:	87 ef       	ldi	r24, 0xF7	; 247
    3358:	94 e3       	ldi	r25, 0x34	; 52
    335a:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    335e:	82 ed       	ldi	r24, 0xD2	; 210
    3360:	94 e3       	ldi	r25, 0x34	; 52
    3362:	80 93 e8 34 	sts	0x34E8, r24	; 0x8034e8 <pxDelayedTaskList>
    3366:	90 93 e9 34 	sts	0x34E9, r25	; 0x8034e9 <pxDelayedTaskList+0x1>
    336a:	8d ed       	ldi	r24, 0xDD	; 221
    336c:	94 e3       	ldi	r25, 0x34	; 52
    336e:	80 93 ea 34 	sts	0x34EA, r24	; 0x8034ea <pxOverflowDelayedTaskList>
    3372:	90 93 eb 34 	sts	0x34EB, r25	; 0x8034eb <pxOverflowDelayedTaskList+0x1>
    3376:	00 00       	nop
    3378:	0f 90       	pop	r0
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	08 95       	ret

00003380 <prvCheckTasksWaitingTermination>:
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	00 00       	nop
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	08 95       	ret

00003390 <prvResetNextTaskUnblockTime>:
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	1f 92       	push	r1
    3396:	1f 92       	push	r1
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxDelayedTaskList>
    33a0:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxDelayedTaskList+0x1>
    33a4:	fc 01       	movw	r30, r24
    33a6:	80 81       	ld	r24, Z
    33a8:	88 23       	and	r24, r24
    33aa:	61 f4       	brne	.+24     	; 0x33c4 <prvResetNextTaskUnblockTime+0x34>
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	9f ef       	ldi	r25, 0xFF	; 255
    33b0:	dc 01       	movw	r26, r24
    33b2:	80 93 0d 35 	sts	0x350D, r24	; 0x80350d <xNextTaskUnblockTime>
    33b6:	90 93 0e 35 	sts	0x350E, r25	; 0x80350e <xNextTaskUnblockTime+0x1>
    33ba:	a0 93 0f 35 	sts	0x350F, r26	; 0x80350f <xNextTaskUnblockTime+0x2>
    33be:	b0 93 10 35 	sts	0x3510, r27	; 0x803510 <xNextTaskUnblockTime+0x3>
    33c2:	1b c0       	rjmp	.+54     	; 0x33fa <prvResetNextTaskUnblockTime+0x6a>
    33c4:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxDelayedTaskList>
    33c8:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxDelayedTaskList+0x1>
    33cc:	fc 01       	movw	r30, r24
    33ce:	87 81       	ldd	r24, Z+7	; 0x07
    33d0:	90 85       	ldd	r25, Z+8	; 0x08
    33d2:	fc 01       	movw	r30, r24
    33d4:	80 85       	ldd	r24, Z+8	; 0x08
    33d6:	91 85       	ldd	r25, Z+9	; 0x09
    33d8:	89 83       	std	Y+1, r24	; 0x01
    33da:	9a 83       	std	Y+2, r25	; 0x02
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	9a 81       	ldd	r25, Y+2	; 0x02
    33e0:	fc 01       	movw	r30, r24
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	a4 81       	ldd	r26, Z+4	; 0x04
    33e8:	b5 81       	ldd	r27, Z+5	; 0x05
    33ea:	80 93 0d 35 	sts	0x350D, r24	; 0x80350d <xNextTaskUnblockTime>
    33ee:	90 93 0e 35 	sts	0x350E, r25	; 0x80350e <xNextTaskUnblockTime+0x1>
    33f2:	a0 93 0f 35 	sts	0x350F, r26	; 0x80350f <xNextTaskUnblockTime+0x2>
    33f6:	b0 93 10 35 	sts	0x3510, r27	; 0x803510 <xNextTaskUnblockTime+0x3>
    33fa:	00 00       	nop
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	08 95       	ret

00003406 <xTaskGetSchedulerState>:
    3406:	cf 93       	push	r28
    3408:	df 93       	push	r29
    340a:	1f 92       	push	r1
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <xSchedulerRunning>
    3414:	88 23       	and	r24, r24
    3416:	19 f4       	brne	.+6      	; 0x341e <xTaskGetSchedulerState+0x18>
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	08 c0       	rjmp	.+16     	; 0x342e <xTaskGetSchedulerState+0x28>
    341e:	80 91 13 35 	lds	r24, 0x3513	; 0x803513 <uxSchedulerSuspended>
    3422:	88 23       	and	r24, r24
    3424:	19 f4       	brne	.+6      	; 0x342c <xTaskGetSchedulerState+0x26>
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	01 c0       	rjmp	.+2      	; 0x342e <xTaskGetSchedulerState+0x28>
    342c:	19 82       	std	Y+1, r1	; 0x01
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	0f 90       	pop	r0
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	08 95       	ret

00003438 <uxTaskResetEventItemValue>:
    3438:	ef 92       	push	r14
    343a:	ff 92       	push	r15
    343c:	0f 93       	push	r16
    343e:	1f 93       	push	r17
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	00 d0       	rcall	.+0      	; 0x3446 <uxTaskResetEventItemValue+0xe>
    3446:	1f 92       	push	r1
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
    344c:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    3450:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    3454:	fc 01       	movw	r30, r24
    3456:	86 85       	ldd	r24, Z+14	; 0x0e
    3458:	97 85       	ldd	r25, Z+15	; 0x0f
    345a:	a0 89       	ldd	r26, Z+16	; 0x10
    345c:	b1 89       	ldd	r27, Z+17	; 0x11
    345e:	89 83       	std	Y+1, r24	; 0x01
    3460:	9a 83       	std	Y+2, r25	; 0x02
    3462:	ab 83       	std	Y+3, r26	; 0x03
    3464:	bc 83       	std	Y+4, r27	; 0x04
    3466:	60 91 a4 34 	lds	r22, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    346a:	70 91 a5 34 	lds	r23, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    346e:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    3472:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    3476:	fc 01       	movw	r30, r24
    3478:	82 8d       	ldd	r24, Z+26	; 0x1a
    347a:	88 2f       	mov	r24, r24
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	a0 e0       	ldi	r26, 0x00	; 0
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	24 e0       	ldi	r18, 0x04	; 4
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e0       	ldi	r20, 0x00	; 0
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	79 01       	movw	r14, r18
    348c:	8a 01       	movw	r16, r20
    348e:	e8 1a       	sub	r14, r24
    3490:	f9 0a       	sbc	r15, r25
    3492:	0a 0b       	sbc	r16, r26
    3494:	1b 0b       	sbc	r17, r27
    3496:	d8 01       	movw	r26, r16
    3498:	c7 01       	movw	r24, r14
    349a:	fb 01       	movw	r30, r22
    349c:	86 87       	std	Z+14, r24	; 0x0e
    349e:	97 87       	std	Z+15, r25	; 0x0f
    34a0:	a0 8b       	std	Z+16, r26	; 0x10
    34a2:	b1 8b       	std	Z+17, r27	; 0x11
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	9a 81       	ldd	r25, Y+2	; 0x02
    34a8:	ab 81       	ldd	r26, Y+3	; 0x03
    34aa:	bc 81       	ldd	r27, Y+4	; 0x04
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	24 96       	adiw	r28, 0x04	; 4
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
    34be:	ff 90       	pop	r15
    34c0:	ef 90       	pop	r14
    34c2:	08 95       	ret

000034c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	2d 97       	sbiw	r28, 0x0d	; 13
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	69 87       	std	Y+9, r22	; 0x09
    34d4:	7a 87       	std	Y+10, r23	; 0x0a
    34d6:	8b 87       	std	Y+11, r24	; 0x0b
    34d8:	9c 87       	std	Y+12, r25	; 0x0c
    34da:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    34dc:	80 91 03 35 	lds	r24, 0x3503	; 0x803503 <xTickCount>
    34e0:	90 91 04 35 	lds	r25, 0x3504	; 0x803504 <xTickCount+0x1>
    34e4:	a0 91 05 35 	lds	r26, 0x3505	; 0x803505 <xTickCount+0x2>
    34e8:	b0 91 06 35 	lds	r27, 0x3506	; 0x803506 <xTickCount+0x3>
    34ec:	89 83       	std	Y+1, r24	; 0x01
    34ee:	9a 83       	std	Y+2, r25	; 0x02
    34f0:	ab 83       	std	Y+3, r26	; 0x03
    34f2:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    34f4:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    34f8:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    34fc:	02 96       	adiw	r24, 0x02	; 2
    34fe:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3502:	89 85       	ldd	r24, Y+9	; 0x09
    3504:	9a 85       	ldd	r25, Y+10	; 0x0a
    3506:	ab 85       	ldd	r26, Y+11	; 0x0b
    3508:	bc 85       	ldd	r27, Y+12	; 0x0c
    350a:	8f 3f       	cpi	r24, 0xFF	; 255
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	af 4f       	sbci	r26, 0xFF	; 255
    3510:	bf 4f       	sbci	r27, 0xFF	; 255
    3512:	71 f4       	brne	.+28     	; 0x3530 <prvAddCurrentTaskToDelayedList+0x6c>
    3514:	8d 85       	ldd	r24, Y+13	; 0x0d
    3516:	88 23       	and	r24, r24
    3518:	59 f0       	breq	.+22     	; 0x3530 <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    351a:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    351e:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    3522:	02 96       	adiw	r24, 0x02	; 2
    3524:	bc 01       	movw	r22, r24
    3526:	87 ef       	ldi	r24, 0xF7	; 247
    3528:	94 e3       	ldi	r25, 0x34	; 52
    352a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    352e:	64 c0       	rjmp	.+200    	; 0x35f8 <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    3530:	29 81       	ldd	r18, Y+1	; 0x01
    3532:	3a 81       	ldd	r19, Y+2	; 0x02
    3534:	4b 81       	ldd	r20, Y+3	; 0x03
    3536:	5c 81       	ldd	r21, Y+4	; 0x04
    3538:	89 85       	ldd	r24, Y+9	; 0x09
    353a:	9a 85       	ldd	r25, Y+10	; 0x0a
    353c:	ab 85       	ldd	r26, Y+11	; 0x0b
    353e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3540:	82 0f       	add	r24, r18
    3542:	93 1f       	adc	r25, r19
    3544:	a4 1f       	adc	r26, r20
    3546:	b5 1f       	adc	r27, r21
    3548:	8d 83       	std	Y+5, r24	; 0x05
    354a:	9e 83       	std	Y+6, r25	; 0x06
    354c:	af 83       	std	Y+7, r26	; 0x07
    354e:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3550:	20 91 a4 34 	lds	r18, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    3554:	30 91 a5 34 	lds	r19, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    3558:	8d 81       	ldd	r24, Y+5	; 0x05
    355a:	9e 81       	ldd	r25, Y+6	; 0x06
    355c:	af 81       	ldd	r26, Y+7	; 0x07
    355e:	b8 85       	ldd	r27, Y+8	; 0x08
    3560:	f9 01       	movw	r30, r18
    3562:	82 83       	std	Z+2, r24	; 0x02
    3564:	93 83       	std	Z+3, r25	; 0x03
    3566:	a4 83       	std	Z+4, r26	; 0x04
    3568:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    356a:	2d 81       	ldd	r18, Y+5	; 0x05
    356c:	3e 81       	ldd	r19, Y+6	; 0x06
    356e:	4f 81       	ldd	r20, Y+7	; 0x07
    3570:	58 85       	ldd	r21, Y+8	; 0x08
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	9a 81       	ldd	r25, Y+2	; 0x02
    3576:	ab 81       	ldd	r26, Y+3	; 0x03
    3578:	bc 81       	ldd	r27, Y+4	; 0x04
    357a:	28 17       	cp	r18, r24
    357c:	39 07       	cpc	r19, r25
    357e:	4a 07       	cpc	r20, r26
    3580:	5b 07       	cpc	r21, r27
    3582:	78 f4       	brcc	.+30     	; 0x35a2 <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3584:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    3588:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    358c:	9c 01       	movw	r18, r24
    358e:	2e 5f       	subi	r18, 0xFE	; 254
    3590:	3f 4f       	sbci	r19, 0xFF	; 255
    3592:	80 91 ea 34 	lds	r24, 0x34EA	; 0x8034ea <pxOverflowDelayedTaskList>
    3596:	90 91 eb 34 	lds	r25, 0x34EB	; 0x8034eb <pxOverflowDelayedTaskList+0x1>
    359a:	b9 01       	movw	r22, r18
    359c:	0e 94 20 08 	call	0x1040	; 0x1040 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35a0:	2b c0       	rjmp	.+86     	; 0x35f8 <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    35a2:	80 91 a4 34 	lds	r24, 0x34A4	; 0x8034a4 <pxCurrentTCB>
    35a6:	90 91 a5 34 	lds	r25, 0x34A5	; 0x8034a5 <pxCurrentTCB+0x1>
    35aa:	9c 01       	movw	r18, r24
    35ac:	2e 5f       	subi	r18, 0xFE	; 254
    35ae:	3f 4f       	sbci	r19, 0xFF	; 255
    35b0:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <pxDelayedTaskList>
    35b4:	90 91 e9 34 	lds	r25, 0x34E9	; 0x8034e9 <pxDelayedTaskList+0x1>
    35b8:	b9 01       	movw	r22, r18
    35ba:	0e 94 20 08 	call	0x1040	; 0x1040 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    35be:	80 91 0d 35 	lds	r24, 0x350D	; 0x80350d <xNextTaskUnblockTime>
    35c2:	90 91 0e 35 	lds	r25, 0x350E	; 0x80350e <xNextTaskUnblockTime+0x1>
    35c6:	a0 91 0f 35 	lds	r26, 0x350F	; 0x80350f <xNextTaskUnblockTime+0x2>
    35ca:	b0 91 10 35 	lds	r27, 0x3510	; 0x803510 <xNextTaskUnblockTime+0x3>
    35ce:	2d 81       	ldd	r18, Y+5	; 0x05
    35d0:	3e 81       	ldd	r19, Y+6	; 0x06
    35d2:	4f 81       	ldd	r20, Y+7	; 0x07
    35d4:	58 85       	ldd	r21, Y+8	; 0x08
    35d6:	28 17       	cp	r18, r24
    35d8:	39 07       	cpc	r19, r25
    35da:	4a 07       	cpc	r20, r26
    35dc:	5b 07       	cpc	r21, r27
    35de:	60 f4       	brcc	.+24     	; 0x35f8 <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	af 81       	ldd	r26, Y+7	; 0x07
    35e6:	b8 85       	ldd	r27, Y+8	; 0x08
    35e8:	80 93 0d 35 	sts	0x350D, r24	; 0x80350d <xNextTaskUnblockTime>
    35ec:	90 93 0e 35 	sts	0x350E, r25	; 0x80350e <xNextTaskUnblockTime+0x1>
    35f0:	a0 93 0f 35 	sts	0x350F, r26	; 0x80350f <xNextTaskUnblockTime+0x2>
    35f4:	b0 93 10 35 	sts	0x3510, r27	; 0x803510 <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35f8:	00 00       	nop
    35fa:	2d 96       	adiw	r28, 0x0d	; 13
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	df 91       	pop	r29
    3602:	cf 91       	pop	r28
    3604:	08 95       	ret

00003606 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    3606:	ef 92       	push	r14
    3608:	ff 92       	push	r15
    360a:	0f 93       	push	r16
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	1f 92       	push	r1
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    3616:	19 82       	std	Y+1, r1	; 0x01
    3618:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <prvCheckForValidListAndQueue>
    361c:	80 91 2e 35 	lds	r24, 0x352E	; 0x80352e <xTimerQueue>
    3620:	90 91 2f 35 	lds	r25, 0x352F	; 0x80352f <xTimerQueue+0x1>
    3624:	89 2b       	or	r24, r25
    3626:	91 f0       	breq	.+36     	; 0x364c <xTimerCreateTimerTask+0x46>
    3628:	0f 2e       	mov	r0, r31
    362a:	f0 e3       	ldi	r31, 0x30	; 48
    362c:	ef 2e       	mov	r14, r31
    362e:	f5 e3       	ldi	r31, 0x35	; 53
    3630:	ff 2e       	mov	r15, r31
    3632:	f0 2d       	mov	r31, r0
    3634:	03 e0       	ldi	r16, 0x03	; 3
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	48 ec       	ldi	r20, 0xC8	; 200
    363c:	50 e0       	ldi	r21, 0x00	; 0
    363e:	69 e0       	ldi	r22, 0x09	; 9
    3640:	70 e2       	ldi	r23, 0x20	; 32
    3642:	89 e1       	ldi	r24, 0x19	; 25
    3644:	9c e1       	ldi	r25, 0x1C	; 28
    3646:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCreate>
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	0f 90       	pop	r0
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	0f 91       	pop	r16
    3656:	ff 90       	pop	r15
    3658:	ef 90       	pop	r14
    365a:	08 95       	ret

0000365c <xTimerGenericCommand>:
    365c:	cf 92       	push	r12
    365e:	df 92       	push	r13
    3660:	ef 92       	push	r14
    3662:	ff 92       	push	r15
    3664:	0f 93       	push	r16
    3666:	1f 93       	push	r17
    3668:	cf 93       	push	r28
    366a:	df 93       	push	r29
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	67 97       	sbiw	r28, 0x17	; 23
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	8b 87       	std	Y+11, r24	; 0x0b
    3678:	9c 87       	std	Y+12, r25	; 0x0c
    367a:	6d 87       	std	Y+13, r22	; 0x0d
    367c:	2e 87       	std	Y+14, r18	; 0x0e
    367e:	3f 87       	std	Y+15, r19	; 0x0f
    3680:	48 8b       	std	Y+16, r20	; 0x10
    3682:	59 8b       	std	Y+17, r21	; 0x11
    3684:	0a 8b       	std	Y+18, r16	; 0x12
    3686:	1b 8b       	std	Y+19, r17	; 0x13
    3688:	cc 8a       	std	Y+20, r12	; 0x14
    368a:	dd 8a       	std	Y+21, r13	; 0x15
    368c:	ee 8a       	std	Y+22, r14	; 0x16
    368e:	ff 8a       	std	Y+23, r15	; 0x17
    3690:	19 82       	std	Y+1, r1	; 0x01
    3692:	80 91 2e 35 	lds	r24, 0x352E	; 0x80352e <xTimerQueue>
    3696:	90 91 2f 35 	lds	r25, 0x352F	; 0x80352f <xTimerQueue+0x1>
    369a:	89 2b       	or	r24, r25
    369c:	09 f4       	brne	.+2      	; 0x36a0 <xTimerGenericCommand+0x44>
    369e:	44 c0       	rjmp	.+136    	; 0x3728 <xTimerGenericCommand+0xcc>
    36a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a2:	8a 83       	std	Y+2, r24	; 0x02
    36a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    36a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    36a8:	a8 89       	ldd	r26, Y+16	; 0x10
    36aa:	b9 89       	ldd	r27, Y+17	; 0x11
    36ac:	8b 83       	std	Y+3, r24	; 0x03
    36ae:	9c 83       	std	Y+4, r25	; 0x04
    36b0:	ad 83       	std	Y+5, r26	; 0x05
    36b2:	be 83       	std	Y+6, r27	; 0x06
    36b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    36b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    36b8:	8f 83       	std	Y+7, r24	; 0x07
    36ba:	98 87       	std	Y+8, r25	; 0x08
    36bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36be:	86 30       	cpi	r24, 0x06	; 6
    36c0:	34 f5       	brge	.+76     	; 0x370e <xTimerGenericCommand+0xb2>
    36c2:	0e 94 03 1a 	call	0x3406	; 0x3406 <xTaskGetSchedulerState>
    36c6:	82 30       	cpi	r24, 0x02	; 2
    36c8:	99 f4       	brne	.+38     	; 0x36f0 <xTimerGenericCommand+0x94>
    36ca:	e0 91 2e 35 	lds	r30, 0x352E	; 0x80352e <xTimerQueue>
    36ce:	f0 91 2f 35 	lds	r31, 0x352F	; 0x80352f <xTimerQueue+0x1>
    36d2:	8c 89       	ldd	r24, Y+20	; 0x14
    36d4:	9d 89       	ldd	r25, Y+21	; 0x15
    36d6:	ae 89       	ldd	r26, Y+22	; 0x16
    36d8:	bf 89       	ldd	r27, Y+23	; 0x17
    36da:	be 01       	movw	r22, r28
    36dc:	6e 5f       	subi	r22, 0xFE	; 254
    36de:	7f 4f       	sbci	r23, 0xFF	; 255
    36e0:	00 e0       	ldi	r16, 0x00	; 0
    36e2:	9c 01       	movw	r18, r24
    36e4:	ad 01       	movw	r20, r26
    36e6:	cf 01       	movw	r24, r30
    36e8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <xQueueGenericSend>
    36ec:	89 83       	std	Y+1, r24	; 0x01
    36ee:	1c c0       	rjmp	.+56     	; 0x3728 <xTimerGenericCommand+0xcc>
    36f0:	80 91 2e 35 	lds	r24, 0x352E	; 0x80352e <xTimerQueue>
    36f4:	90 91 2f 35 	lds	r25, 0x352F	; 0x80352f <xTimerQueue+0x1>
    36f8:	be 01       	movw	r22, r28
    36fa:	6e 5f       	subi	r22, 0xFE	; 254
    36fc:	7f 4f       	sbci	r23, 0xFF	; 255
    36fe:	00 e0       	ldi	r16, 0x00	; 0
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	a9 01       	movw	r20, r18
    3706:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <xQueueGenericSend>
    370a:	89 83       	std	Y+1, r24	; 0x01
    370c:	0d c0       	rjmp	.+26     	; 0x3728 <xTimerGenericCommand+0xcc>
    370e:	80 91 2e 35 	lds	r24, 0x352E	; 0x80352e <xTimerQueue>
    3712:	90 91 2f 35 	lds	r25, 0x352F	; 0x80352f <xTimerQueue+0x1>
    3716:	4a 89       	ldd	r20, Y+18	; 0x12
    3718:	5b 89       	ldd	r21, Y+19	; 0x13
    371a:	be 01       	movw	r22, r28
    371c:	6e 5f       	subi	r22, 0xFE	; 254
    371e:	7f 4f       	sbci	r23, 0xFF	; 255
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xQueueGenericSendFromISR>
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	67 96       	adiw	r28, 0x17	; 23
    372c:	cd bf       	out	0x3d, r28	; 61
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	1f 91       	pop	r17
    3736:	0f 91       	pop	r16
    3738:	ff 90       	pop	r15
    373a:	ef 90       	pop	r14
    373c:	df 90       	pop	r13
    373e:	cf 90       	pop	r12
    3740:	08 95       	ret

00003742 <prvProcessExpiredTimer>:
    3742:	cf 92       	push	r12
    3744:	df 92       	push	r13
    3746:	ef 92       	push	r14
    3748:	ff 92       	push	r15
    374a:	0f 93       	push	r16
    374c:	1f 93       	push	r17
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	2b 97       	sbiw	r28, 0x0b	; 11
    3758:	cd bf       	out	0x3d, r28	; 61
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	6c 83       	std	Y+4, r22	; 0x04
    375e:	7d 83       	std	Y+5, r23	; 0x05
    3760:	8e 83       	std	Y+6, r24	; 0x06
    3762:	9f 83       	std	Y+7, r25	; 0x07
    3764:	28 87       	std	Y+8, r18	; 0x08
    3766:	39 87       	std	Y+9, r19	; 0x09
    3768:	4a 87       	std	Y+10, r20	; 0x0a
    376a:	5b 87       	std	Y+11, r21	; 0x0b
    376c:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    3770:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    3774:	fc 01       	movw	r30, r24
    3776:	87 81       	ldd	r24, Z+7	; 0x07
    3778:	90 85       	ldd	r25, Z+8	; 0x08
    377a:	fc 01       	movw	r30, r24
    377c:	80 85       	ldd	r24, Z+8	; 0x08
    377e:	91 85       	ldd	r25, Z+9	; 0x09
    3780:	89 83       	std	Y+1, r24	; 0x01
    3782:	9a 83       	std	Y+2, r25	; 0x02
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
    3788:	02 96       	adiw	r24, 0x02	; 2
    378a:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	9a 81       	ldd	r25, Y+2	; 0x02
    3792:	fc 01       	movw	r30, r24
    3794:	82 89       	ldd	r24, Z+18	; 0x12
    3796:	81 30       	cpi	r24, 0x01	; 1
    3798:	b1 f5       	brne	.+108    	; 0x3806 <prvProcessExpiredTimer+0xc4>
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	9a 81       	ldd	r25, Y+2	; 0x02
    379e:	fc 01       	movw	r30, r24
    37a0:	26 85       	ldd	r18, Z+14	; 0x0e
    37a2:	37 85       	ldd	r19, Z+15	; 0x0f
    37a4:	40 89       	ldd	r20, Z+16	; 0x10
    37a6:	51 89       	ldd	r21, Z+17	; 0x11
    37a8:	8c 81       	ldd	r24, Y+4	; 0x04
    37aa:	9d 81       	ldd	r25, Y+5	; 0x05
    37ac:	ae 81       	ldd	r26, Y+6	; 0x06
    37ae:	bf 81       	ldd	r27, Y+7	; 0x07
    37b0:	82 0f       	add	r24, r18
    37b2:	93 1f       	adc	r25, r19
    37b4:	a4 1f       	adc	r26, r20
    37b6:	b5 1f       	adc	r27, r21
    37b8:	ec 80       	ldd	r14, Y+4	; 0x04
    37ba:	fd 80       	ldd	r15, Y+5	; 0x05
    37bc:	0e 81       	ldd	r16, Y+6	; 0x06
    37be:	1f 81       	ldd	r17, Y+7	; 0x07
    37c0:	28 85       	ldd	r18, Y+8	; 0x08
    37c2:	39 85       	ldd	r19, Y+9	; 0x09
    37c4:	4a 85       	ldd	r20, Y+10	; 0x0a
    37c6:	5b 85       	ldd	r21, Y+11	; 0x0b
    37c8:	e9 81       	ldd	r30, Y+1	; 0x01
    37ca:	fa 81       	ldd	r31, Y+2	; 0x02
    37cc:	67 01       	movw	r12, r14
    37ce:	78 01       	movw	r14, r16
    37d0:	89 01       	movw	r16, r18
    37d2:	9a 01       	movw	r18, r20
    37d4:	ac 01       	movw	r20, r24
    37d6:	bd 01       	movw	r22, r26
    37d8:	cf 01       	movw	r24, r30
    37da:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <prvInsertTimerInActiveList>
    37de:	88 23       	and	r24, r24
    37e0:	91 f0       	breq	.+36     	; 0x3806 <prvProcessExpiredTimer+0xc4>
    37e2:	8c 81       	ldd	r24, Y+4	; 0x04
    37e4:	9d 81       	ldd	r25, Y+5	; 0x05
    37e6:	ae 81       	ldd	r26, Y+6	; 0x06
    37e8:	bf 81       	ldd	r27, Y+7	; 0x07
    37ea:	e9 81       	ldd	r30, Y+1	; 0x01
    37ec:	fa 81       	ldd	r31, Y+2	; 0x02
    37ee:	c1 2c       	mov	r12, r1
    37f0:	d1 2c       	mov	r13, r1
    37f2:	76 01       	movw	r14, r12
    37f4:	00 e0       	ldi	r16, 0x00	; 0
    37f6:	10 e0       	ldi	r17, 0x00	; 0
    37f8:	9c 01       	movw	r18, r24
    37fa:	ad 01       	movw	r20, r26
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	cf 01       	movw	r24, r30
    3800:	0e 94 2e 1b 	call	0x365c	; 0x365c <xTimerGenericCommand>
    3804:	8b 83       	std	Y+3, r24	; 0x03
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	9a 81       	ldd	r25, Y+2	; 0x02
    380a:	fc 01       	movw	r30, r24
    380c:	25 89       	ldd	r18, Z+21	; 0x15
    380e:	36 89       	ldd	r19, Z+22	; 0x16
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	9a 81       	ldd	r25, Y+2	; 0x02
    3814:	f9 01       	movw	r30, r18
    3816:	19 95       	eicall
    3818:	00 00       	nop
    381a:	2b 96       	adiw	r28, 0x0b	; 11
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
    3828:	ff 90       	pop	r15
    382a:	ef 90       	pop	r14
    382c:	df 90       	pop	r13
    382e:	cf 90       	pop	r12
    3830:	08 95       	ret

00003832 <prvTimerTask>:
    3832:	cf 93       	push	r28
    3834:	df 93       	push	r29
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
    383a:	27 97       	sbiw	r28, 0x07	; 7
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	8e 83       	std	Y+6, r24	; 0x06
    3842:	9f 83       	std	Y+7, r25	; 0x07
    3844:	ce 01       	movw	r24, r28
    3846:	05 96       	adiw	r24, 0x05	; 5
    3848:	0e 94 b4 1c 	call	0x3968	; 0x3968 <prvGetNextExpireTime>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	9a 83       	std	Y+2, r25	; 0x02
    3854:	ab 83       	std	Y+3, r26	; 0x03
    3856:	bc 83       	std	Y+4, r27	; 0x04
    3858:	2d 81       	ldd	r18, Y+5	; 0x05
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	ab 81       	ldd	r26, Y+3	; 0x03
    3860:	bc 81       	ldd	r27, Y+4	; 0x04
    3862:	42 2f       	mov	r20, r18
    3864:	bc 01       	movw	r22, r24
    3866:	cd 01       	movw	r24, r26
    3868:	0e 94 39 1c 	call	0x3872	; 0x3872 <prvProcessTimerOrBlockTask>
    386c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <prvProcessReceivedCommands>
    3870:	e9 cf       	rjmp	.-46     	; 0x3844 <prvTimerTask+0x12>

00003872 <prvProcessTimerOrBlockTask>:
    3872:	ef 92       	push	r14
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	2a 97       	sbiw	r28, 0x0a	; 10
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	6e 83       	std	Y+6, r22	; 0x06
    388a:	7f 83       	std	Y+7, r23	; 0x07
    388c:	88 87       	std	Y+8, r24	; 0x08
    388e:	99 87       	std	Y+9, r25	; 0x09
    3890:	4a 87       	std	Y+10, r20	; 0x0a
    3892:	0e 94 8b 14 	call	0x2916	; 0x2916 <vTaskSuspendAll>
    3896:	ce 01       	movw	r24, r28
    3898:	05 96       	adiw	r24, 0x05	; 5
    389a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <prvSampleTimeNow>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	9a 83       	std	Y+2, r25	; 0x02
    38a6:	ab 83       	std	Y+3, r26	; 0x03
    38a8:	bc 83       	std	Y+4, r27	; 0x04
    38aa:	8d 81       	ldd	r24, Y+5	; 0x05
    38ac:	88 23       	and	r24, r24
    38ae:	09 f0       	breq	.+2      	; 0x38b2 <prvProcessTimerOrBlockTask+0x40>
    38b0:	4e c0       	rjmp	.+156    	; 0x394e <prvProcessTimerOrBlockTask+0xdc>
    38b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38b4:	88 23       	and	r24, r24
    38b6:	e1 f4       	brne	.+56     	; 0x38f0 <prvProcessTimerOrBlockTask+0x7e>
    38b8:	2e 81       	ldd	r18, Y+6	; 0x06
    38ba:	3f 81       	ldd	r19, Y+7	; 0x07
    38bc:	48 85       	ldd	r20, Y+8	; 0x08
    38be:	59 85       	ldd	r21, Y+9	; 0x09
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	9a 81       	ldd	r25, Y+2	; 0x02
    38c4:	ab 81       	ldd	r26, Y+3	; 0x03
    38c6:	bc 81       	ldd	r27, Y+4	; 0x04
    38c8:	82 17       	cp	r24, r18
    38ca:	93 07       	cpc	r25, r19
    38cc:	a4 07       	cpc	r26, r20
    38ce:	b5 07       	cpc	r27, r21
    38d0:	78 f0       	brcs	.+30     	; 0x38f0 <prvProcessTimerOrBlockTask+0x7e>
    38d2:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    38d6:	29 81       	ldd	r18, Y+1	; 0x01
    38d8:	3a 81       	ldd	r19, Y+2	; 0x02
    38da:	4b 81       	ldd	r20, Y+3	; 0x03
    38dc:	5c 81       	ldd	r21, Y+4	; 0x04
    38de:	8e 81       	ldd	r24, Y+6	; 0x06
    38e0:	9f 81       	ldd	r25, Y+7	; 0x07
    38e2:	a8 85       	ldd	r26, Y+8	; 0x08
    38e4:	b9 85       	ldd	r27, Y+9	; 0x09
    38e6:	bc 01       	movw	r22, r24
    38e8:	cd 01       	movw	r24, r26
    38ea:	0e 94 a1 1b 	call	0x3742	; 0x3742 <prvProcessExpiredTimer>
    38ee:	31 c0       	rjmp	.+98     	; 0x3952 <prvProcessTimerOrBlockTask+0xe0>
    38f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38f2:	88 23       	and	r24, r24
    38f4:	59 f0       	breq	.+22     	; 0x390c <prvProcessTimerOrBlockTask+0x9a>
    38f6:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <pxOverflowTimerList>
    38fa:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <pxOverflowTimerList+0x1>
    38fe:	fc 01       	movw	r30, r24
    3900:	90 81       	ld	r25, Z
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	99 23       	and	r25, r25
    3906:	09 f0       	breq	.+2      	; 0x390a <prvProcessTimerOrBlockTask+0x98>
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	8a 87       	std	Y+10, r24	; 0x0a
    390c:	2e 81       	ldd	r18, Y+6	; 0x06
    390e:	3f 81       	ldd	r19, Y+7	; 0x07
    3910:	48 85       	ldd	r20, Y+8	; 0x08
    3912:	59 85       	ldd	r21, Y+9	; 0x09
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	9a 81       	ldd	r25, Y+2	; 0x02
    3918:	ab 81       	ldd	r26, Y+3	; 0x03
    391a:	bc 81       	ldd	r27, Y+4	; 0x04
    391c:	79 01       	movw	r14, r18
    391e:	8a 01       	movw	r16, r20
    3920:	e8 1a       	sub	r14, r24
    3922:	f9 0a       	sbc	r15, r25
    3924:	0a 0b       	sbc	r16, r26
    3926:	1b 0b       	sbc	r17, r27
    3928:	d8 01       	movw	r26, r16
    392a:	c7 01       	movw	r24, r14
    392c:	e0 91 2e 35 	lds	r30, 0x352E	; 0x80352e <xTimerQueue>
    3930:	f0 91 2f 35 	lds	r31, 0x352F	; 0x80352f <xTimerQueue+0x1>
    3934:	2a 85       	ldd	r18, Y+10	; 0x0a
    3936:	ac 01       	movw	r20, r24
    3938:	bd 01       	movw	r22, r26
    393a:	cf 01       	movw	r24, r30
    393c:	0e 94 38 11 	call	0x2270	; 0x2270 <vQueueWaitForMessageRestricted>
    3940:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    3944:	88 23       	and	r24, r24
    3946:	29 f4       	brne	.+10     	; 0x3952 <prvProcessTimerOrBlockTask+0xe0>
    3948:	0e 94 1f 0b 	call	0x163e	; 0x163e <vPortYield>
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <prvProcessTimerOrBlockTask+0xe0>
    394e:	0e 94 98 14 	call	0x2930	; 0x2930 <xTaskResumeAll>
    3952:	00 00       	nop
    3954:	2a 96       	adiw	r28, 0x0a	; 10
    3956:	cd bf       	out	0x3d, r28	; 61
    3958:	de bf       	out	0x3e, r29	; 62
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	ff 90       	pop	r15
    3964:	ef 90       	pop	r14
    3966:	08 95       	ret

00003968 <prvGetNextExpireTime>:
    3968:	cf 93       	push	r28
    396a:	df 93       	push	r29
    396c:	00 d0       	rcall	.+0      	; 0x396e <prvGetNextExpireTime+0x6>
    396e:	00 d0       	rcall	.+0      	; 0x3970 <prvGetNextExpireTime+0x8>
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	8d 83       	std	Y+5, r24	; 0x05
    3976:	9e 83       	std	Y+6, r25	; 0x06
    3978:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    397c:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    3980:	fc 01       	movw	r30, r24
    3982:	90 81       	ld	r25, Z
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	99 23       	and	r25, r25
    3988:	09 f0       	breq	.+2      	; 0x398c <prvGetNextExpireTime+0x24>
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	28 2f       	mov	r18, r24
    398e:	8d 81       	ldd	r24, Y+5	; 0x05
    3990:	9e 81       	ldd	r25, Y+6	; 0x06
    3992:	fc 01       	movw	r30, r24
    3994:	20 83       	st	Z, r18
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	9e 81       	ldd	r25, Y+6	; 0x06
    399a:	fc 01       	movw	r30, r24
    399c:	80 81       	ld	r24, Z
    399e:	88 23       	and	r24, r24
    39a0:	89 f4       	brne	.+34     	; 0x39c4 <prvGetNextExpireTime+0x5c>
    39a2:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    39a6:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    39aa:	fc 01       	movw	r30, r24
    39ac:	87 81       	ldd	r24, Z+7	; 0x07
    39ae:	90 85       	ldd	r25, Z+8	; 0x08
    39b0:	fc 01       	movw	r30, r24
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	a2 81       	ldd	r26, Z+2	; 0x02
    39b8:	b3 81       	ldd	r27, Z+3	; 0x03
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	9a 83       	std	Y+2, r25	; 0x02
    39be:	ab 83       	std	Y+3, r26	; 0x03
    39c0:	bc 83       	std	Y+4, r27	; 0x04
    39c2:	04 c0       	rjmp	.+8      	; 0x39cc <prvGetNextExpireTime+0x64>
    39c4:	19 82       	std	Y+1, r1	; 0x01
    39c6:	1a 82       	std	Y+2, r1	; 0x02
    39c8:	1b 82       	std	Y+3, r1	; 0x03
    39ca:	1c 82       	std	Y+4, r1	; 0x04
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
    39ce:	9a 81       	ldd	r25, Y+2	; 0x02
    39d0:	ab 81       	ldd	r26, Y+3	; 0x03
    39d2:	bc 81       	ldd	r27, Y+4	; 0x04
    39d4:	bc 01       	movw	r22, r24
    39d6:	cd 01       	movw	r24, r26
    39d8:	26 96       	adiw	r28, 0x06	; 6
    39da:	cd bf       	out	0x3d, r28	; 61
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	df 91       	pop	r29
    39e0:	cf 91       	pop	r28
    39e2:	08 95       	ret

000039e4 <prvSampleTimeNow>:
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	00 d0       	rcall	.+0      	; 0x39ea <prvSampleTimeNow+0x6>
    39ea:	00 d0       	rcall	.+0      	; 0x39ec <prvSampleTimeNow+0x8>
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	9e 83       	std	Y+6, r25	; 0x06
    39f4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <xTaskGetTickCount>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	9a 83       	std	Y+2, r25	; 0x02
    3a00:	ab 83       	std	Y+3, r26	; 0x03
    3a02:	bc 83       	std	Y+4, r27	; 0x04
    3a04:	80 91 32 35 	lds	r24, 0x3532	; 0x803532 <xLastTime.4537>
    3a08:	90 91 33 35 	lds	r25, 0x3533	; 0x803533 <xLastTime.4537+0x1>
    3a0c:	a0 91 34 35 	lds	r26, 0x3534	; 0x803534 <xLastTime.4537+0x2>
    3a10:	b0 91 35 35 	lds	r27, 0x3535	; 0x803535 <xLastTime.4537+0x3>
    3a14:	29 81       	ldd	r18, Y+1	; 0x01
    3a16:	3a 81       	ldd	r19, Y+2	; 0x02
    3a18:	4b 81       	ldd	r20, Y+3	; 0x03
    3a1a:	5c 81       	ldd	r21, Y+4	; 0x04
    3a1c:	28 17       	cp	r18, r24
    3a1e:	39 07       	cpc	r19, r25
    3a20:	4a 07       	cpc	r20, r26
    3a22:	5b 07       	cpc	r21, r27
    3a24:	40 f4       	brcc	.+16     	; 0x3a36 <prvSampleTimeNow+0x52>
    3a26:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <prvSwitchTimerLists>
    3a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a2e:	21 e0       	ldi	r18, 0x01	; 1
    3a30:	fc 01       	movw	r30, r24
    3a32:	20 83       	st	Z, r18
    3a34:	04 c0       	rjmp	.+8      	; 0x3a3e <prvSampleTimeNow+0x5a>
    3a36:	8d 81       	ldd	r24, Y+5	; 0x05
    3a38:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3a:	fc 01       	movw	r30, r24
    3a3c:	10 82       	st	Z, r1
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	9a 81       	ldd	r25, Y+2	; 0x02
    3a42:	ab 81       	ldd	r26, Y+3	; 0x03
    3a44:	bc 81       	ldd	r27, Y+4	; 0x04
    3a46:	80 93 32 35 	sts	0x3532, r24	; 0x803532 <xLastTime.4537>
    3a4a:	90 93 33 35 	sts	0x3533, r25	; 0x803533 <xLastTime.4537+0x1>
    3a4e:	a0 93 34 35 	sts	0x3534, r26	; 0x803534 <xLastTime.4537+0x2>
    3a52:	b0 93 35 35 	sts	0x3535, r27	; 0x803535 <xLastTime.4537+0x3>
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a5c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a5e:	bc 01       	movw	r22, r24
    3a60:	cd 01       	movw	r24, r26
    3a62:	26 96       	adiw	r28, 0x06	; 6
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	08 95       	ret

00003a6e <prvInsertTimerInActiveList>:
    3a6e:	cf 92       	push	r12
    3a70:	df 92       	push	r13
    3a72:	ef 92       	push	r14
    3a74:	ff 92       	push	r15
    3a76:	0f 93       	push	r16
    3a78:	1f 93       	push	r17
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	cd b7       	in	r28, 0x3d	; 61
    3a80:	de b7       	in	r29, 0x3e	; 62
    3a82:	2f 97       	sbiw	r28, 0x0f	; 15
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	de bf       	out	0x3e, r29	; 62
    3a88:	8a 83       	std	Y+2, r24	; 0x02
    3a8a:	9b 83       	std	Y+3, r25	; 0x03
    3a8c:	4c 83       	std	Y+4, r20	; 0x04
    3a8e:	5d 83       	std	Y+5, r21	; 0x05
    3a90:	6e 83       	std	Y+6, r22	; 0x06
    3a92:	7f 83       	std	Y+7, r23	; 0x07
    3a94:	08 87       	std	Y+8, r16	; 0x08
    3a96:	19 87       	std	Y+9, r17	; 0x09
    3a98:	2a 87       	std	Y+10, r18	; 0x0a
    3a9a:	3b 87       	std	Y+11, r19	; 0x0b
    3a9c:	cc 86       	std	Y+12, r12	; 0x0c
    3a9e:	dd 86       	std	Y+13, r13	; 0x0d
    3aa0:	ee 86       	std	Y+14, r14	; 0x0e
    3aa2:	ff 86       	std	Y+15, r15	; 0x0f
    3aa4:	19 82       	std	Y+1, r1	; 0x01
    3aa6:	2a 81       	ldd	r18, Y+2	; 0x02
    3aa8:	3b 81       	ldd	r19, Y+3	; 0x03
    3aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    3aac:	9d 81       	ldd	r25, Y+5	; 0x05
    3aae:	ae 81       	ldd	r26, Y+6	; 0x06
    3ab0:	bf 81       	ldd	r27, Y+7	; 0x07
    3ab2:	f9 01       	movw	r30, r18
    3ab4:	82 83       	std	Z+2, r24	; 0x02
    3ab6:	93 83       	std	Z+3, r25	; 0x03
    3ab8:	a4 83       	std	Z+4, r26	; 0x04
    3aba:	b5 83       	std	Z+5, r27	; 0x05
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac0:	2a 81       	ldd	r18, Y+2	; 0x02
    3ac2:	3b 81       	ldd	r19, Y+3	; 0x03
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	22 87       	std	Z+10, r18	; 0x0a
    3ac8:	33 87       	std	Z+11, r19	; 0x0b
    3aca:	2c 81       	ldd	r18, Y+4	; 0x04
    3acc:	3d 81       	ldd	r19, Y+5	; 0x05
    3ace:	4e 81       	ldd	r20, Y+6	; 0x06
    3ad0:	5f 81       	ldd	r21, Y+7	; 0x07
    3ad2:	88 85       	ldd	r24, Y+8	; 0x08
    3ad4:	99 85       	ldd	r25, Y+9	; 0x09
    3ad6:	aa 85       	ldd	r26, Y+10	; 0x0a
    3ad8:	bb 85       	ldd	r27, Y+11	; 0x0b
    3ada:	82 17       	cp	r24, r18
    3adc:	93 07       	cpc	r25, r19
    3ade:	a4 07       	cpc	r26, r20
    3ae0:	b5 07       	cpc	r27, r21
    3ae2:	40 f1       	brcs	.+80     	; 0x3b34 <prvInsertTimerInActiveList+0xc6>
    3ae4:	28 85       	ldd	r18, Y+8	; 0x08
    3ae6:	39 85       	ldd	r19, Y+9	; 0x09
    3ae8:	4a 85       	ldd	r20, Y+10	; 0x0a
    3aea:	5b 85       	ldd	r21, Y+11	; 0x0b
    3aec:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aee:	9d 85       	ldd	r25, Y+13	; 0x0d
    3af0:	ae 85       	ldd	r26, Y+14	; 0x0e
    3af2:	bf 85       	ldd	r27, Y+15	; 0x0f
    3af4:	28 1b       	sub	r18, r24
    3af6:	39 0b       	sbc	r19, r25
    3af8:	4a 0b       	sbc	r20, r26
    3afa:	5b 0b       	sbc	r21, r27
    3afc:	8a 81       	ldd	r24, Y+2	; 0x02
    3afe:	9b 81       	ldd	r25, Y+3	; 0x03
    3b00:	fc 01       	movw	r30, r24
    3b02:	86 85       	ldd	r24, Z+14	; 0x0e
    3b04:	97 85       	ldd	r25, Z+15	; 0x0f
    3b06:	a0 89       	ldd	r26, Z+16	; 0x10
    3b08:	b1 89       	ldd	r27, Z+17	; 0x11
    3b0a:	28 17       	cp	r18, r24
    3b0c:	39 07       	cpc	r19, r25
    3b0e:	4a 07       	cpc	r20, r26
    3b10:	5b 07       	cpc	r21, r27
    3b12:	18 f0       	brcs	.+6      	; 0x3b1a <prvInsertTimerInActiveList+0xac>
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	89 83       	std	Y+1, r24	; 0x01
    3b18:	36 c0       	rjmp	.+108    	; 0x3b86 <prvInsertTimerInActiveList+0x118>
    3b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b1e:	9c 01       	movw	r18, r24
    3b20:	2e 5f       	subi	r18, 0xFE	; 254
    3b22:	3f 4f       	sbci	r19, 0xFF	; 255
    3b24:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <pxOverflowTimerList>
    3b28:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <pxOverflowTimerList+0x1>
    3b2c:	b9 01       	movw	r22, r18
    3b2e:	0e 94 20 08 	call	0x1040	; 0x1040 <vListInsert>
    3b32:	29 c0       	rjmp	.+82     	; 0x3b86 <prvInsertTimerInActiveList+0x118>
    3b34:	28 85       	ldd	r18, Y+8	; 0x08
    3b36:	39 85       	ldd	r19, Y+9	; 0x09
    3b38:	4a 85       	ldd	r20, Y+10	; 0x0a
    3b3a:	5b 85       	ldd	r21, Y+11	; 0x0b
    3b3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b40:	ae 85       	ldd	r26, Y+14	; 0x0e
    3b42:	bf 85       	ldd	r27, Y+15	; 0x0f
    3b44:	28 17       	cp	r18, r24
    3b46:	39 07       	cpc	r19, r25
    3b48:	4a 07       	cpc	r20, r26
    3b4a:	5b 07       	cpc	r21, r27
    3b4c:	80 f4       	brcc	.+32     	; 0x3b6e <prvInsertTimerInActiveList+0x100>
    3b4e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b50:	3d 81       	ldd	r19, Y+5	; 0x05
    3b52:	4e 81       	ldd	r20, Y+6	; 0x06
    3b54:	5f 81       	ldd	r21, Y+7	; 0x07
    3b56:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b58:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b5a:	ae 85       	ldd	r26, Y+14	; 0x0e
    3b5c:	bf 85       	ldd	r27, Y+15	; 0x0f
    3b5e:	28 17       	cp	r18, r24
    3b60:	39 07       	cpc	r19, r25
    3b62:	4a 07       	cpc	r20, r26
    3b64:	5b 07       	cpc	r21, r27
    3b66:	18 f0       	brcs	.+6      	; 0x3b6e <prvInsertTimerInActiveList+0x100>
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    3b6c:	0c c0       	rjmp	.+24     	; 0x3b86 <prvInsertTimerInActiveList+0x118>
    3b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b70:	9b 81       	ldd	r25, Y+3	; 0x03
    3b72:	9c 01       	movw	r18, r24
    3b74:	2e 5f       	subi	r18, 0xFE	; 254
    3b76:	3f 4f       	sbci	r19, 0xFF	; 255
    3b78:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    3b7c:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    3b80:	b9 01       	movw	r22, r18
    3b82:	0e 94 20 08 	call	0x1040	; 0x1040 <vListInsert>
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	2f 96       	adiw	r28, 0x0f	; 15
    3b8a:	cd bf       	out	0x3d, r28	; 61
    3b8c:	de bf       	out	0x3e, r29	; 62
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	1f 91       	pop	r17
    3b94:	0f 91       	pop	r16
    3b96:	ff 90       	pop	r15
    3b98:	ef 90       	pop	r14
    3b9a:	df 90       	pop	r13
    3b9c:	cf 90       	pop	r12
    3b9e:	08 95       	ret

00003ba0 <prvProcessReceivedCommands>:
    3ba0:	cf 92       	push	r12
    3ba2:	df 92       	push	r13
    3ba4:	ef 92       	push	r14
    3ba6:	ff 92       	push	r15
    3ba8:	0f 93       	push	r16
    3baa:	1f 93       	push	r17
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	65 97       	sbiw	r28, 0x15	; 21
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	e0 c0       	rjmp	.+448    	; 0x3d7c <prvProcessReceivedCommands+0x1dc>
    3bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bbe:	88 23       	and	r24, r24
    3bc0:	fc f4       	brge	.+62     	; 0x3c00 <prvProcessReceivedCommands+0x60>
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	0a 96       	adiw	r24, 0x0a	; 10
    3bc6:	01 96       	adiw	r24, 0x01	; 1
    3bc8:	89 83       	std	Y+1, r24	; 0x01
    3bca:	9a 83       	std	Y+2, r25	; 0x02
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	20 81       	ld	r18, Z
    3bd4:	31 81       	ldd	r19, Z+1	; 0x01
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bda:	fc 01       	movw	r30, r24
    3bdc:	84 81       	ldd	r24, Z+4	; 0x04
    3bde:	95 81       	ldd	r25, Z+5	; 0x05
    3be0:	a6 81       	ldd	r26, Z+6	; 0x06
    3be2:	b7 81       	ldd	r27, Z+7	; 0x07
    3be4:	49 81       	ldd	r20, Y+1	; 0x01
    3be6:	5a 81       	ldd	r21, Y+2	; 0x02
    3be8:	fa 01       	movw	r30, r20
    3bea:	02 80       	ldd	r0, Z+2	; 0x02
    3bec:	f3 81       	ldd	r31, Z+3	; 0x03
    3bee:	e0 2d       	mov	r30, r0
    3bf0:	ec 8b       	std	Y+20, r30	; 0x14
    3bf2:	fd 8b       	std	Y+21, r31	; 0x15
    3bf4:	ac 01       	movw	r20, r24
    3bf6:	bd 01       	movw	r22, r26
    3bf8:	8c 89       	ldd	r24, Y+20	; 0x14
    3bfa:	9d 89       	ldd	r25, Y+21	; 0x15
    3bfc:	f9 01       	movw	r30, r18
    3bfe:	19 95       	eicall
    3c00:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c02:	88 23       	and	r24, r24
    3c04:	0c f4       	brge	.+2      	; 0x3c08 <prvProcessReceivedCommands+0x68>
    3c06:	ba c0       	rjmp	.+372    	; 0x3d7c <prvProcessReceivedCommands+0x1dc>
    3c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c0a:	98 89       	ldd	r25, Y+16	; 0x10
    3c0c:	8b 83       	std	Y+3, r24	; 0x03
    3c0e:	9c 83       	std	Y+4, r25	; 0x04
    3c10:	8b 81       	ldd	r24, Y+3	; 0x03
    3c12:	9c 81       	ldd	r25, Y+4	; 0x04
    3c14:	fc 01       	movw	r30, r24
    3c16:	84 85       	ldd	r24, Z+12	; 0x0c
    3c18:	95 85       	ldd	r25, Z+13	; 0x0d
    3c1a:	89 2b       	or	r24, r25
    3c1c:	29 f0       	breq	.+10     	; 0x3c28 <prvProcessReceivedCommands+0x88>
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c20:	9c 81       	ldd	r25, Y+4	; 0x04
    3c22:	02 96       	adiw	r24, 0x02	; 2
    3c24:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    3c28:	ce 01       	movw	r24, r28
    3c2a:	43 96       	adiw	r24, 0x13	; 19
    3c2c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <prvSampleTimeNow>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	8d 83       	std	Y+5, r24	; 0x05
    3c36:	9e 83       	std	Y+6, r25	; 0x06
    3c38:	af 83       	std	Y+7, r26	; 0x07
    3c3a:	b8 87       	std	Y+8, r27	; 0x08
    3c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c3e:	08 2e       	mov	r0, r24
    3c40:	00 0c       	add	r0, r0
    3c42:	99 0b       	sbc	r25, r25
    3c44:	09 2e       	mov	r0, r25
    3c46:	00 0c       	add	r0, r0
    3c48:	aa 0b       	sbc	r26, r26
    3c4a:	bb 0b       	sbc	r27, r27
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	29 e0       	ldi	r18, 0x09	; 9
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	84 1b       	sub	r24, r20
    3c56:	95 0b       	sbc	r25, r21
    3c58:	28 17       	cp	r18, r24
    3c5a:	39 07       	cpc	r19, r25
    3c5c:	08 f4       	brcc	.+2      	; 0x3c60 <prvProcessReceivedCommands+0xc0>
    3c5e:	8d c0       	rjmp	.+282    	; 0x3d7a <prvProcessReceivedCommands+0x1da>
    3c60:	fc 01       	movw	r30, r24
    3c62:	88 27       	eor	r24, r24
    3c64:	e2 50       	subi	r30, 0x02	; 2
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	8f 4f       	sbci	r24, 0xFF	; 255
    3c6a:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__tablejump2__>
    3c6e:	eb 84       	ldd	r14, Y+11	; 0x0b
    3c70:	fc 84       	ldd	r15, Y+12	; 0x0c
    3c72:	0d 85       	ldd	r16, Y+13	; 0x0d
    3c74:	1e 85       	ldd	r17, Y+14	; 0x0e
    3c76:	2b 85       	ldd	r18, Y+11	; 0x0b
    3c78:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c7a:	4d 85       	ldd	r20, Y+13	; 0x0d
    3c7c:	5e 85       	ldd	r21, Y+14	; 0x0e
    3c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c80:	9c 81       	ldd	r25, Y+4	; 0x04
    3c82:	fc 01       	movw	r30, r24
    3c84:	86 85       	ldd	r24, Z+14	; 0x0e
    3c86:	97 85       	ldd	r25, Z+15	; 0x0f
    3c88:	a0 89       	ldd	r26, Z+16	; 0x10
    3c8a:	b1 89       	ldd	r27, Z+17	; 0x11
    3c8c:	82 0f       	add	r24, r18
    3c8e:	93 1f       	adc	r25, r19
    3c90:	a4 1f       	adc	r26, r20
    3c92:	b5 1f       	adc	r27, r21
    3c94:	2d 81       	ldd	r18, Y+5	; 0x05
    3c96:	3e 81       	ldd	r19, Y+6	; 0x06
    3c98:	4f 81       	ldd	r20, Y+7	; 0x07
    3c9a:	58 85       	ldd	r21, Y+8	; 0x08
    3c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    3ca0:	67 01       	movw	r12, r14
    3ca2:	78 01       	movw	r14, r16
    3ca4:	89 01       	movw	r16, r18
    3ca6:	9a 01       	movw	r18, r20
    3ca8:	ac 01       	movw	r20, r24
    3caa:	bd 01       	movw	r22, r26
    3cac:	cf 01       	movw	r24, r30
    3cae:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <prvInsertTimerInActiveList>
    3cb2:	88 23       	and	r24, r24
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <prvProcessReceivedCommands+0x118>
    3cb6:	62 c0       	rjmp	.+196    	; 0x3d7c <prvProcessReceivedCommands+0x1dc>
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	25 89       	ldd	r18, Z+21	; 0x15
    3cc0:	36 89       	ldd	r19, Z+22	; 0x16
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc6:	f9 01       	movw	r30, r18
    3cc8:	19 95       	eicall
    3cca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cce:	fc 01       	movw	r30, r24
    3cd0:	82 89       	ldd	r24, Z+18	; 0x12
    3cd2:	81 30       	cpi	r24, 0x01	; 1
    3cd4:	09 f0       	breq	.+2      	; 0x3cd8 <prvProcessReceivedCommands+0x138>
    3cd6:	52 c0       	rjmp	.+164    	; 0x3d7c <prvProcessReceivedCommands+0x1dc>
    3cd8:	2b 85       	ldd	r18, Y+11	; 0x0b
    3cda:	3c 85       	ldd	r19, Y+12	; 0x0c
    3cdc:	4d 85       	ldd	r20, Y+13	; 0x0d
    3cde:	5e 85       	ldd	r21, Y+14	; 0x0e
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	86 85       	ldd	r24, Z+14	; 0x0e
    3ce8:	97 85       	ldd	r25, Z+15	; 0x0f
    3cea:	a0 89       	ldd	r26, Z+16	; 0x10
    3cec:	b1 89       	ldd	r27, Z+17	; 0x11
    3cee:	82 0f       	add	r24, r18
    3cf0:	93 1f       	adc	r25, r19
    3cf2:	a4 1f       	adc	r26, r20
    3cf4:	b5 1f       	adc	r27, r21
    3cf6:	eb 81       	ldd	r30, Y+3	; 0x03
    3cf8:	fc 81       	ldd	r31, Y+4	; 0x04
    3cfa:	c1 2c       	mov	r12, r1
    3cfc:	d1 2c       	mov	r13, r1
    3cfe:	76 01       	movw	r14, r12
    3d00:	00 e0       	ldi	r16, 0x00	; 0
    3d02:	10 e0       	ldi	r17, 0x00	; 0
    3d04:	9c 01       	movw	r18, r24
    3d06:	ad 01       	movw	r20, r26
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	cf 01       	movw	r24, r30
    3d0c:	0e 94 2e 1b 	call	0x365c	; 0x365c <xTimerGenericCommand>
    3d10:	89 87       	std	Y+9, r24	; 0x09
    3d12:	34 c0       	rjmp	.+104    	; 0x3d7c <prvProcessReceivedCommands+0x1dc>
    3d14:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d16:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d18:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d1a:	be 85       	ldd	r27, Y+14	; 0x0e
    3d1c:	2b 81       	ldd	r18, Y+3	; 0x03
    3d1e:	3c 81       	ldd	r19, Y+4	; 0x04
    3d20:	f9 01       	movw	r30, r18
    3d22:	86 87       	std	Z+14, r24	; 0x0e
    3d24:	97 87       	std	Z+15, r25	; 0x0f
    3d26:	a0 8b       	std	Z+16, r26	; 0x10
    3d28:	b1 8b       	std	Z+17, r27	; 0x11
    3d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2e:	fc 01       	movw	r30, r24
    3d30:	26 85       	ldd	r18, Z+14	; 0x0e
    3d32:	37 85       	ldd	r19, Z+15	; 0x0f
    3d34:	40 89       	ldd	r20, Z+16	; 0x10
    3d36:	51 89       	ldd	r21, Z+17	; 0x11
    3d38:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3c:	af 81       	ldd	r26, Y+7	; 0x07
    3d3e:	b8 85       	ldd	r27, Y+8	; 0x08
    3d40:	82 0f       	add	r24, r18
    3d42:	93 1f       	adc	r25, r19
    3d44:	a4 1f       	adc	r26, r20
    3d46:	b5 1f       	adc	r27, r21
    3d48:	ed 80       	ldd	r14, Y+5	; 0x05
    3d4a:	fe 80       	ldd	r15, Y+6	; 0x06
    3d4c:	0f 81       	ldd	r16, Y+7	; 0x07
    3d4e:	18 85       	ldd	r17, Y+8	; 0x08
    3d50:	2d 81       	ldd	r18, Y+5	; 0x05
    3d52:	3e 81       	ldd	r19, Y+6	; 0x06
    3d54:	4f 81       	ldd	r20, Y+7	; 0x07
    3d56:	58 85       	ldd	r21, Y+8	; 0x08
    3d58:	eb 81       	ldd	r30, Y+3	; 0x03
    3d5a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d5c:	67 01       	movw	r12, r14
    3d5e:	78 01       	movw	r14, r16
    3d60:	89 01       	movw	r16, r18
    3d62:	9a 01       	movw	r18, r20
    3d64:	ac 01       	movw	r20, r24
    3d66:	bd 01       	movw	r22, r26
    3d68:	cf 01       	movw	r24, r30
    3d6a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <prvInsertTimerInActiveList>
    3d6e:	06 c0       	rjmp	.+12     	; 0x3d7c <prvProcessReceivedCommands+0x1dc>
    3d70:	8b 81       	ldd	r24, Y+3	; 0x03
    3d72:	9c 81       	ldd	r25, Y+4	; 0x04
    3d74:	0e 94 7a 07 	call	0xef4	; 0xef4 <vPortFree>
    3d78:	01 c0       	rjmp	.+2      	; 0x3d7c <prvProcessReceivedCommands+0x1dc>
    3d7a:	00 00       	nop
    3d7c:	80 91 2e 35 	lds	r24, 0x352E	; 0x80352e <xTimerQueue>
    3d80:	90 91 2f 35 	lds	r25, 0x352F	; 0x80352f <xTimerQueue+0x1>
    3d84:	be 01       	movw	r22, r28
    3d86:	66 5f       	subi	r22, 0xF6	; 246
    3d88:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	a9 01       	movw	r20, r18
    3d90:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <xQueueReceive>
    3d94:	88 23       	and	r24, r24
    3d96:	09 f0       	breq	.+2      	; 0x3d9a <prvProcessReceivedCommands+0x1fa>
    3d98:	11 cf       	rjmp	.-478    	; 0x3bbc <prvProcessReceivedCommands+0x1c>
    3d9a:	00 00       	nop
    3d9c:	65 96       	adiw	r28, 0x15	; 21
    3d9e:	cd bf       	out	0x3d, r28	; 61
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	ff 90       	pop	r15
    3dac:	ef 90       	pop	r14
    3dae:	df 90       	pop	r13
    3db0:	cf 90       	pop	r12
    3db2:	08 95       	ret

00003db4 <prvSwitchTimerLists>:
    3db4:	cf 92       	push	r12
    3db6:	df 92       	push	r13
    3db8:	ef 92       	push	r14
    3dba:	ff 92       	push	r15
    3dbc:	0f 93       	push	r16
    3dbe:	1f 93       	push	r17
    3dc0:	cf 93       	push	r28
    3dc2:	df 93       	push	r29
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	2d 97       	sbiw	r28, 0x0d	; 13
    3dca:	cd bf       	out	0x3d, r28	; 61
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	82 c0       	rjmp	.+260    	; 0x3ed4 <prvSwitchTimerLists+0x120>
    3dd0:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    3dd4:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    3dd8:	fc 01       	movw	r30, r24
    3dda:	87 81       	ldd	r24, Z+7	; 0x07
    3ddc:	90 85       	ldd	r25, Z+8	; 0x08
    3dde:	fc 01       	movw	r30, r24
    3de0:	80 81       	ld	r24, Z
    3de2:	91 81       	ldd	r25, Z+1	; 0x01
    3de4:	a2 81       	ldd	r26, Z+2	; 0x02
    3de6:	b3 81       	ldd	r27, Z+3	; 0x03
    3de8:	89 83       	std	Y+1, r24	; 0x01
    3dea:	9a 83       	std	Y+2, r25	; 0x02
    3dec:	ab 83       	std	Y+3, r26	; 0x03
    3dee:	bc 83       	std	Y+4, r27	; 0x04
    3df0:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    3df4:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    3df8:	fc 01       	movw	r30, r24
    3dfa:	87 81       	ldd	r24, Z+7	; 0x07
    3dfc:	90 85       	ldd	r25, Z+8	; 0x08
    3dfe:	fc 01       	movw	r30, r24
    3e00:	80 85       	ldd	r24, Z+8	; 0x08
    3e02:	91 85       	ldd	r25, Z+9	; 0x09
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	9e 83       	std	Y+6, r25	; 0x06
    3e08:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0c:	02 96       	adiw	r24, 0x02	; 2
    3e0e:	0e 94 a1 08 	call	0x1142	; 0x1142 <uxListRemove>
    3e12:	8d 81       	ldd	r24, Y+5	; 0x05
    3e14:	9e 81       	ldd	r25, Y+6	; 0x06
    3e16:	fc 01       	movw	r30, r24
    3e18:	25 89       	ldd	r18, Z+21	; 0x15
    3e1a:	36 89       	ldd	r19, Z+22	; 0x16
    3e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e20:	f9 01       	movw	r30, r18
    3e22:	19 95       	eicall
    3e24:	8d 81       	ldd	r24, Y+5	; 0x05
    3e26:	9e 81       	ldd	r25, Y+6	; 0x06
    3e28:	fc 01       	movw	r30, r24
    3e2a:	82 89       	ldd	r24, Z+18	; 0x12
    3e2c:	81 30       	cpi	r24, 0x01	; 1
    3e2e:	09 f0       	breq	.+2      	; 0x3e32 <prvSwitchTimerLists+0x7e>
    3e30:	51 c0       	rjmp	.+162    	; 0x3ed4 <prvSwitchTimerLists+0x120>
    3e32:	8d 81       	ldd	r24, Y+5	; 0x05
    3e34:	9e 81       	ldd	r25, Y+6	; 0x06
    3e36:	fc 01       	movw	r30, r24
    3e38:	26 85       	ldd	r18, Z+14	; 0x0e
    3e3a:	37 85       	ldd	r19, Z+15	; 0x0f
    3e3c:	40 89       	ldd	r20, Z+16	; 0x10
    3e3e:	51 89       	ldd	r21, Z+17	; 0x11
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	9a 81       	ldd	r25, Y+2	; 0x02
    3e44:	ab 81       	ldd	r26, Y+3	; 0x03
    3e46:	bc 81       	ldd	r27, Y+4	; 0x04
    3e48:	82 0f       	add	r24, r18
    3e4a:	93 1f       	adc	r25, r19
    3e4c:	a4 1f       	adc	r26, r20
    3e4e:	b5 1f       	adc	r27, r21
    3e50:	8f 83       	std	Y+7, r24	; 0x07
    3e52:	98 87       	std	Y+8, r25	; 0x08
    3e54:	a9 87       	std	Y+9, r26	; 0x09
    3e56:	ba 87       	std	Y+10, r27	; 0x0a
    3e58:	2f 81       	ldd	r18, Y+7	; 0x07
    3e5a:	38 85       	ldd	r19, Y+8	; 0x08
    3e5c:	49 85       	ldd	r20, Y+9	; 0x09
    3e5e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
    3e62:	9a 81       	ldd	r25, Y+2	; 0x02
    3e64:	ab 81       	ldd	r26, Y+3	; 0x03
    3e66:	bc 81       	ldd	r27, Y+4	; 0x04
    3e68:	82 17       	cp	r24, r18
    3e6a:	93 07       	cpc	r25, r19
    3e6c:	a4 07       	cpc	r26, r20
    3e6e:	b5 07       	cpc	r27, r21
    3e70:	f8 f4       	brcc	.+62     	; 0x3eb0 <prvSwitchTimerLists+0xfc>
    3e72:	2d 81       	ldd	r18, Y+5	; 0x05
    3e74:	3e 81       	ldd	r19, Y+6	; 0x06
    3e76:	8f 81       	ldd	r24, Y+7	; 0x07
    3e78:	98 85       	ldd	r25, Y+8	; 0x08
    3e7a:	a9 85       	ldd	r26, Y+9	; 0x09
    3e7c:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e7e:	f9 01       	movw	r30, r18
    3e80:	82 83       	std	Z+2, r24	; 0x02
    3e82:	93 83       	std	Z+3, r25	; 0x03
    3e84:	a4 83       	std	Z+4, r26	; 0x04
    3e86:	b5 83       	std	Z+5, r27	; 0x05
    3e88:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8c:	2d 81       	ldd	r18, Y+5	; 0x05
    3e8e:	3e 81       	ldd	r19, Y+6	; 0x06
    3e90:	fc 01       	movw	r30, r24
    3e92:	22 87       	std	Z+10, r18	; 0x0a
    3e94:	33 87       	std	Z+11, r19	; 0x0b
    3e96:	8d 81       	ldd	r24, Y+5	; 0x05
    3e98:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9a:	9c 01       	movw	r18, r24
    3e9c:	2e 5f       	subi	r18, 0xFE	; 254
    3e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea0:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    3ea4:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    3ea8:	b9 01       	movw	r22, r18
    3eaa:	0e 94 20 08 	call	0x1040	; 0x1040 <vListInsert>
    3eae:	12 c0       	rjmp	.+36     	; 0x3ed4 <prvSwitchTimerLists+0x120>
    3eb0:	89 81       	ldd	r24, Y+1	; 0x01
    3eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb4:	ab 81       	ldd	r26, Y+3	; 0x03
    3eb6:	bc 81       	ldd	r27, Y+4	; 0x04
    3eb8:	ed 81       	ldd	r30, Y+5	; 0x05
    3eba:	fe 81       	ldd	r31, Y+6	; 0x06
    3ebc:	c1 2c       	mov	r12, r1
    3ebe:	d1 2c       	mov	r13, r1
    3ec0:	76 01       	movw	r14, r12
    3ec2:	00 e0       	ldi	r16, 0x00	; 0
    3ec4:	10 e0       	ldi	r17, 0x00	; 0
    3ec6:	9c 01       	movw	r18, r24
    3ec8:	ad 01       	movw	r20, r26
    3eca:	60 e0       	ldi	r22, 0x00	; 0
    3ecc:	cf 01       	movw	r24, r30
    3ece:	0e 94 2e 1b 	call	0x365c	; 0x365c <xTimerGenericCommand>
    3ed2:	8b 87       	std	Y+11, r24	; 0x0b
    3ed4:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    3ed8:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    3edc:	fc 01       	movw	r30, r24
    3ede:	80 81       	ld	r24, Z
    3ee0:	88 23       	and	r24, r24
    3ee2:	09 f0       	breq	.+2      	; 0x3ee6 <prvSwitchTimerLists+0x132>
    3ee4:	75 cf       	rjmp	.-278    	; 0x3dd0 <prvSwitchTimerLists+0x1c>
    3ee6:	80 91 2a 35 	lds	r24, 0x352A	; 0x80352a <pxCurrentTimerList>
    3eea:	90 91 2b 35 	lds	r25, 0x352B	; 0x80352b <pxCurrentTimerList+0x1>
    3eee:	8c 87       	std	Y+12, r24	; 0x0c
    3ef0:	9d 87       	std	Y+13, r25	; 0x0d
    3ef2:	80 91 2c 35 	lds	r24, 0x352C	; 0x80352c <pxOverflowTimerList>
    3ef6:	90 91 2d 35 	lds	r25, 0x352D	; 0x80352d <pxOverflowTimerList+0x1>
    3efa:	80 93 2a 35 	sts	0x352A, r24	; 0x80352a <pxCurrentTimerList>
    3efe:	90 93 2b 35 	sts	0x352B, r25	; 0x80352b <pxCurrentTimerList+0x1>
    3f02:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f04:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f06:	80 93 2c 35 	sts	0x352C, r24	; 0x80352c <pxOverflowTimerList>
    3f0a:	90 93 2d 35 	sts	0x352D, r25	; 0x80352d <pxOverflowTimerList+0x1>
    3f0e:	00 00       	nop
    3f10:	2d 96       	adiw	r28, 0x0d	; 13
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	de bf       	out	0x3e, r29	; 62
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	1f 91       	pop	r17
    3f1c:	0f 91       	pop	r16
    3f1e:	ff 90       	pop	r15
    3f20:	ef 90       	pop	r14
    3f22:	df 90       	pop	r13
    3f24:	cf 90       	pop	r12
    3f26:	08 95       	ret

00003f28 <prvCheckForValidListAndQueue>:
    3f28:	cf 93       	push	r28
    3f2a:	df 93       	push	r29
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3f34:	ff 93       	push	r31
    3f36:	f8 7f       	andi	r31, 0xF8	; 248
    3f38:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3f3c:	80 91 2e 35 	lds	r24, 0x352E	; 0x80352e <xTimerQueue>
    3f40:	90 91 2f 35 	lds	r25, 0x352F	; 0x80352f <xTimerQueue+0x1>
    3f44:	89 2b       	or	r24, r25
    3f46:	e9 f4       	brne	.+58     	; 0x3f82 <prvCheckForValidListAndQueue+0x5a>
    3f48:	84 e1       	ldi	r24, 0x14	; 20
    3f4a:	95 e3       	ldi	r25, 0x35	; 53
    3f4c:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    3f50:	8f e1       	ldi	r24, 0x1F	; 31
    3f52:	95 e3       	ldi	r25, 0x35	; 53
    3f54:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInitialise>
    3f58:	84 e1       	ldi	r24, 0x14	; 20
    3f5a:	95 e3       	ldi	r25, 0x35	; 53
    3f5c:	80 93 2a 35 	sts	0x352A, r24	; 0x80352a <pxCurrentTimerList>
    3f60:	90 93 2b 35 	sts	0x352B, r25	; 0x80352b <pxCurrentTimerList+0x1>
    3f64:	8f e1       	ldi	r24, 0x1F	; 31
    3f66:	95 e3       	ldi	r25, 0x35	; 53
    3f68:	80 93 2c 35 	sts	0x352C, r24	; 0x80352c <pxOverflowTimerList>
    3f6c:	90 93 2d 35 	sts	0x352D, r25	; 0x80352d <pxOverflowTimerList+0x1>
    3f70:	40 e0       	ldi	r20, 0x00	; 0
    3f72:	69 e0       	ldi	r22, 0x09	; 9
    3f74:	85 e0       	ldi	r24, 0x05	; 5
    3f76:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <xQueueGenericCreate>
    3f7a:	80 93 2e 35 	sts	0x352E, r24	; 0x80352e <xTimerQueue>
    3f7e:	90 93 2f 35 	sts	0x352F, r25	; 0x80352f <xTimerQueue+0x1>
    3f82:	ff 91       	pop	r31
    3f84:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3f88:	00 00       	nop
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	08 95       	ret

00003f90 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3f90:	0f 93       	push	r16
    3f92:	1f 93       	push	r17
    3f94:	cf 93       	push	r28
    3f96:	df 93       	push	r29
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
    3f9c:	64 97       	sbiw	r28, 0x14	; 20
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	de bf       	out	0x3e, r29	; 62
    3fa2:	8b 87       	std	Y+11, r24	; 0x0b
    3fa4:	9c 87       	std	Y+12, r25	; 0x0c
    3fa6:	6d 87       	std	Y+13, r22	; 0x0d
    3fa8:	7e 87       	std	Y+14, r23	; 0x0e
    3faa:	2f 87       	std	Y+15, r18	; 0x0f
    3fac:	38 8b       	std	Y+16, r19	; 0x10
    3fae:	49 8b       	std	Y+17, r20	; 0x11
    3fb0:	5a 8b       	std	Y+18, r21	; 0x12
    3fb2:	0b 8b       	std	Y+19, r16	; 0x13
    3fb4:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    3fb6:	8e ef       	ldi	r24, 0xFE	; 254
    3fb8:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    3fba:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fbe:	8b 83       	std	Y+3, r24	; 0x03
    3fc0:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    3fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
    3fc8:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    3fca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fcc:	98 89       	ldd	r25, Y+16	; 0x10
    3fce:	a9 89       	ldd	r26, Y+17	; 0x11
    3fd0:	ba 89       	ldd	r27, Y+18	; 0x12
    3fd2:	8f 83       	std	Y+7, r24	; 0x07
    3fd4:	98 87       	std	Y+8, r25	; 0x08
    3fd6:	a9 87       	std	Y+9, r26	; 0x09
    3fd8:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3fda:	80 91 2e 35 	lds	r24, 0x352E	; 0x80352e <xTimerQueue>
    3fde:	90 91 2f 35 	lds	r25, 0x352F	; 0x80352f <xTimerQueue+0x1>
    3fe2:	4b 89       	ldd	r20, Y+19	; 0x13
    3fe4:	5c 89       	ldd	r21, Y+20	; 0x14
    3fe6:	be 01       	movw	r22, r28
    3fe8:	6e 5f       	subi	r22, 0xFE	; 254
    3fea:	7f 4f       	sbci	r23, 0xFF	; 255
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xQueueGenericSendFromISR>
    3ff2:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    3ff4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3ff6:	64 96       	adiw	r28, 0x14	; 20
    3ff8:	cd bf       	out	0x3d, r28	; 61
    3ffa:	de bf       	out	0x3e, r29	; 62
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	08 95       	ret

00004006 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    400e:	80 e5       	ldi	r24, 0x50	; 80
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	20 e5       	ldi	r18, 0x50	; 80
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	f9 01       	movw	r30, r18
    4018:	20 81       	ld	r18, Z
    401a:	21 60       	ori	r18, 0x01	; 1
    401c:	fc 01       	movw	r30, r24
    401e:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    4020:	80 e5       	ldi	r24, 0x50	; 80
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	fc 01       	movw	r30, r24
    4026:	81 81       	ldd	r24, Z+1	; 0x01
    4028:	88 2f       	mov	r24, r24
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	81 70       	andi	r24, 0x01	; 1
    402e:	99 27       	eor	r25, r25
    4030:	89 2b       	or	r24, r25
    4032:	b1 f3       	breq	.-20     	; 0x4020 <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	0e 94 39 03 	call	0x672	; 0x672 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    403a:	8e e1       	ldi	r24, 0x1E	; 30
    403c:	0e 94 02 03 	call	0x604	; 0x604 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	0e 94 22 03 	call	0x644	; 0x644 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    4048:	43 e0       	ldi	r20, 0x03	; 3
    404a:	60 e0       	ldi	r22, 0x00	; 0
    404c:	80 e4       	ldi	r24, 0x40	; 64
    404e:	0e 94 cd 02 	call	0x59a	; 0x59a <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    4052:	80 e5       	ldi	r24, 0x50	; 80
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	20 e5       	ldi	r18, 0x50	; 80
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	f9 01       	movw	r30, r18
    405c:	20 81       	ld	r18, Z
    405e:	28 60       	ori	r18, 0x08	; 8
    4060:	fc 01       	movw	r30, r24
    4062:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    4064:	80 e5       	ldi	r24, 0x50	; 80
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	fc 01       	movw	r30, r24
    406a:	81 81       	ldd	r24, Z+1	; 0x01
    406c:	88 2f       	mov	r24, r24
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	88 70       	andi	r24, 0x08	; 8
    4072:	99 27       	eor	r25, r25
    4074:	89 2b       	or	r24, r25
    4076:	b1 f3       	breq	.-20     	; 0x4064 <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    4078:	64 e0       	ldi	r22, 0x04	; 4
    407a:	80 ec       	ldi	r24, 0xC0	; 192
    407c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    4080:	80 e5       	ldi	r24, 0x50	; 80
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	20 e5       	ldi	r18, 0x50	; 80
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	f9 01       	movw	r30, r18
    408a:	20 81       	ld	r18, Z
    408c:	20 61       	ori	r18, 0x10	; 16
    408e:	fc 01       	movw	r30, r24
    4090:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	0e 94 22 03 	call	0x644	; 0x644 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    409a:	80 e5       	ldi	r24, 0x50	; 80
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	fc 01       	movw	r30, r24
    40a0:	81 81       	ldd	r24, Z+1	; 0x01
    40a2:	88 2f       	mov	r24, r24
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	80 71       	andi	r24, 0x10	; 16
    40a8:	99 27       	eor	r25, r25
    40aa:	89 2b       	or	r24, r25
    40ac:	b1 f3       	breq	.-20     	; 0x409a <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    40ae:	84 e0       	ldi	r24, 0x04	; 4
    40b0:	0e 94 39 03 	call	0x672	; 0x672 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    40b4:	87 e0       	ldi	r24, 0x07	; 7
    40b6:	0e 94 02 03 	call	0x604	; 0x604 <CLKSYS_Disable>
    40ba:	00 00       	nop
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	08 95       	ret

000040c2 <vApplicationIdleHook>:

/***************************************************************************************************
*                                      FreeRTOS Idle-task. Is called when nothing else is running
***************************************************************************************************/
void vApplicationIdleHook( void )
{	
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
	
}
    40ca:	00 00       	nop
    40cc:	df 91       	pop	r29
    40ce:	cf 91       	pop	r28
    40d0:	08 95       	ret

000040d2 <main>:

/***************************************************************************************************
*                                      Main Entry Point of Program
***************************************************************************************************/
int main(void)
{
    40d2:	ef 92       	push	r14
    40d4:	ff 92       	push	r15
    40d6:	0f 93       	push	r16
    40d8:	cf 93       	push	r28
    40da:	df 93       	push	r29
    40dc:	cd b7       	in	r28, 0x3d	; 61
    40de:	de b7       	in	r29, 0x3e	; 62
    vInitClock();
    40e0:	0e 94 03 20 	call	0x4006	; 0x4006 <vInitClock>
	vInitDisplay();
    40e4:	0e 94 0e 28 	call	0x501c	; 0x501c <vInitDisplay>
	
	//Initialize EventGroups
	evButtonEvents = xEventGroupCreate();
    40e8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <xEventGroupCreate>
    40ec:	80 93 66 35 	sts	0x3566, r24	; 0x803566 <evButtonEvents>
    40f0:	90 93 67 35 	sts	0x3567, r25	; 0x803567 <evButtonEvents+0x1>
	evSystemState = xEventGroupCreate();
    40f4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <xEventGroupCreate>
    40f8:	80 93 68 35 	sts	0x3568, r24	; 0x803568 <evSystemState>
    40fc:	90 93 69 35 	sts	0x3569, r25	; 0x803569 <evSystemState+0x1>
	
	//Create Tasks
	xTaskCreate( vLedBlink, (const char *) "ledBlink", configMINIMAL_STACK_SIZE+10, NULL, 1, NULL);
    4100:	e1 2c       	mov	r14, r1
    4102:	f1 2c       	mov	r15, r1
    4104:	01 e0       	ldi	r16, 0x01	; 1
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	42 ed       	ldi	r20, 0xD2	; 210
    410c:	50 e0       	ldi	r21, 0x00	; 0
    410e:	61 e1       	ldi	r22, 0x11	; 17
    4110:	70 e2       	ldi	r23, 0x20	; 32
    4112:	8c e1       	ldi	r24, 0x1C	; 28
    4114:	96 e2       	ldi	r25, 0x26	; 38
    4116:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCreate>
	xTaskCreate(vButtonHandler, (const char*) "btTask", configMINIMAL_STACK_SIZE+30, NULL, 2, NULL);
    411a:	e1 2c       	mov	r14, r1
    411c:	f1 2c       	mov	r15, r1
    411e:	02 e0       	ldi	r16, 0x02	; 2
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	46 ee       	ldi	r20, 0xE6	; 230
    4126:	50 e0       	ldi	r21, 0x00	; 0
    4128:	6a e1       	ldi	r22, 0x1A	; 26
    412a:	70 e2       	ldi	r23, 0x20	; 32
    412c:	81 e9       	ldi	r24, 0x91	; 145
    412e:	95 e2       	ldi	r25, 0x25	; 37
    4130:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCreate>
	xTaskCreate(vTimeHandler, (const char*) "timeTask", configMINIMAL_STACK_SIZE+30, NULL, 3, NULL);
    4134:	e1 2c       	mov	r14, r1
    4136:	f1 2c       	mov	r15, r1
    4138:	03 e0       	ldi	r16, 0x03	; 3
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	46 ee       	ldi	r20, 0xE6	; 230
    4140:	50 e0       	ldi	r21, 0x00	; 0
    4142:	61 e2       	ldi	r22, 0x21	; 33
    4144:	70 e2       	ldi	r23, 0x20	; 32
    4146:	8e eb       	ldi	r24, 0xBE	; 190
    4148:	90 e2       	ldi	r25, 0x20	; 32
    414a:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCreate>
	xTaskCreate(vUIHandler, (const char*) "uiTask", configMINIMAL_STACK_SIZE+100, NULL, 1, NULL);
    414e:	e1 2c       	mov	r14, r1
    4150:	f1 2c       	mov	r15, r1
    4152:	01 e0       	ldi	r16, 0x01	; 1
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	4c e2       	ldi	r20, 0x2C	; 44
    415a:	51 e0       	ldi	r21, 0x01	; 1
    415c:	6a e2       	ldi	r22, 0x2A	; 42
    415e:	70 e2       	ldi	r23, 0x20	; 32
    4160:	85 eb       	ldi	r24, 0xB5	; 181
    4162:	91 e2       	ldi	r25, 0x21	; 33
    4164:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCreate>
	
	vTaskStartScheduler();
    4168:	0e 94 3f 14 	call	0x287e	; 0x287e <vTaskStartScheduler>
	return 0;
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	90 e0       	ldi	r25, 0x00	; 0
}
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	0f 91       	pop	r16
    4176:	ff 90       	pop	r15
    4178:	ef 90       	pop	r14
    417a:	08 95       	ret

0000417c <vTimeHandler>:
uint8_t alarm_sec = 0;

/***************************************************************************************************
*                                      TimeHandler Task to track hours, mins and seconds.
***************************************************************************************************/
void vTimeHandler(void* param) {
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	00 d0       	rcall	.+0      	; 0x4182 <vTimeHandler+0x6>
    4182:	00 d0       	rcall	.+0      	; 0x4184 <vTimeHandler+0x8>
    4184:	cd b7       	in	r28, 0x3d	; 61
    4186:	de b7       	in	r29, 0x3e	; 62
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	9e 83       	std	Y+6, r25	; 0x06
	TickType_t lasttime = xTaskGetTickCount();
    418c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <xTaskGetTickCount>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	89 83       	std	Y+1, r24	; 0x01
    4196:	9a 83       	std	Y+2, r25	; 0x02
    4198:	ab 83       	std	Y+3, r26	; 0x03
    419a:	bc 83       	std	Y+4, r27	; 0x04
	for(;;) {
		time_sec++;
    419c:	80 91 36 35 	lds	r24, 0x3536	; 0x803536 <time_sec>
    41a0:	8f 5f       	subi	r24, 0xFF	; 255
    41a2:	80 93 36 35 	sts	0x3536, r24	; 0x803536 <time_sec>
		if(time_sec >= 60) {
    41a6:	80 91 36 35 	lds	r24, 0x3536	; 0x803536 <time_sec>
    41aa:	8c 33       	cpi	r24, 0x3C	; 60
    41ac:	38 f0       	brcs	.+14     	; 0x41bc <vTimeHandler+0x40>
			time_sec = 0;
    41ae:	10 92 36 35 	sts	0x3536, r1	; 0x803536 <time_sec>
			time_min++;
    41b2:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <time_min>
    41b6:	8f 5f       	subi	r24, 0xFF	; 255
    41b8:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <time_min>
		}
		if(time_min >= 60) {
    41bc:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <time_min>
    41c0:	8c 33       	cpi	r24, 0x3C	; 60
    41c2:	38 f0       	brcs	.+14     	; 0x41d2 <vTimeHandler+0x56>
			time_min = 0;
    41c4:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <time_min>
			time_hour++;
    41c8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    41cc:	8f 5f       	subi	r24, 0xFF	; 255
    41ce:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
		}
		if(time_hour >= 24) {
    41d2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    41d6:	88 31       	cpi	r24, 0x18	; 24
    41d8:	10 f0       	brcs	.+4      	; 0x41de <vTimeHandler+0x62>
			time_hour = 0;
    41da:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
		}
		vTaskDelayUntil(&lasttime, 1000/portTICK_RATE_MS);
    41de:	48 ee       	ldi	r20, 0xE8	; 232
    41e0:	53 e0       	ldi	r21, 0x03	; 3
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	70 e0       	ldi	r23, 0x00	; 0
    41e6:	ce 01       	movw	r24, r28
    41e8:	01 96       	adiw	r24, 0x01	; 1
    41ea:	0e 94 59 13 	call	0x26b2	; 0x26b2 <vTaskDelayUntil>
	}
    41ee:	d6 cf       	rjmp	.-84     	; 0x419c <vTimeHandler+0x20>

000041f0 <incrementTime>:
}

/***************************************************************************************************
*                                      Helper Function to increment Time
***************************************************************************************************/
void incrementTime(uint8_t timeslot) {
    41f0:	cf 93       	push	r28
    41f2:	df 93       	push	r29
    41f4:	1f 92       	push	r1
    41f6:	cd b7       	in	r28, 0x3d	; 61
    41f8:	de b7       	in	r29, 0x3e	; 62
    41fa:	89 83       	std	Y+1, r24	; 0x01
	switch(timeslot) {
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	88 2f       	mov	r24, r24
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	81 30       	cpi	r24, 0x01	; 1
    4204:	91 05       	cpc	r25, r1
    4206:	61 f0       	breq	.+24     	; 0x4220 <incrementTime+0x30>
    4208:	82 30       	cpi	r24, 0x02	; 2
    420a:	91 05       	cpc	r25, r1
    420c:	79 f0       	breq	.+30     	; 0x422c <incrementTime+0x3c>
    420e:	89 2b       	or	r24, r25
    4210:	09 f0       	breq	.+2      	; 0x4214 <incrementTime+0x24>
		break;
		case 2:
			time_sec++;
		break;
	}
}
    4212:	12 c0       	rjmp	.+36     	; 0x4238 <incrementTime+0x48>
*                                      Helper Function to increment Time
***************************************************************************************************/
void incrementTime(uint8_t timeslot) {
	switch(timeslot) {
		case 0:
			time_hour++;
    4214:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    4218:	8f 5f       	subi	r24, 0xFF	; 255
    421a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
		break;
    421e:	0c c0       	rjmp	.+24     	; 0x4238 <incrementTime+0x48>
		case 1:
			time_min++;
    4220:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <time_min>
    4224:	8f 5f       	subi	r24, 0xFF	; 255
    4226:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <time_min>
		break;
    422a:	06 c0       	rjmp	.+12     	; 0x4238 <incrementTime+0x48>
		case 2:
			time_sec++;
    422c:	80 91 36 35 	lds	r24, 0x3536	; 0x803536 <time_sec>
    4230:	8f 5f       	subi	r24, 0xFF	; 255
    4232:	80 93 36 35 	sts	0x3536, r24	; 0x803536 <time_sec>
		break;
    4236:	00 00       	nop
	}
}
    4238:	00 00       	nop
    423a:	0f 90       	pop	r0
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	08 95       	ret

00004242 <decrementTime>:

/***************************************************************************************************
*                                      Helper Function to decrement Time
***************************************************************************************************/
void decrementTime(uint8_t timeslot) {
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	1f 92       	push	r1
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
    424c:	89 83       	std	Y+1, r24	; 0x01
	switch(timeslot) {
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	88 2f       	mov	r24, r24
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	81 30       	cpi	r24, 0x01	; 1
    4256:	91 05       	cpc	r25, r1
    4258:	61 f0       	breq	.+24     	; 0x4272 <decrementTime+0x30>
    425a:	82 30       	cpi	r24, 0x02	; 2
    425c:	91 05       	cpc	r25, r1
    425e:	79 f0       	breq	.+30     	; 0x427e <decrementTime+0x3c>
    4260:	89 2b       	or	r24, r25
    4262:	09 f0       	breq	.+2      	; 0x4266 <decrementTime+0x24>
		break;
		case 2:
			time_sec=0;
		break;
	}
}
    4264:	0f c0       	rjmp	.+30     	; 0x4284 <decrementTime+0x42>
*                                      Helper Function to decrement Time
***************************************************************************************************/
void decrementTime(uint8_t timeslot) {
	switch(timeslot) {
		case 0:
			time_hour--;
    4266:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    426a:	81 50       	subi	r24, 0x01	; 1
    426c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
		break;
    4270:	09 c0       	rjmp	.+18     	; 0x4284 <decrementTime+0x42>
		case 1:
			time_min--;
    4272:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <time_min>
    4276:	81 50       	subi	r24, 0x01	; 1
    4278:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <time_min>
		break;
    427c:	03 c0       	rjmp	.+6      	; 0x4284 <decrementTime+0x42>
		case 2:
			time_sec=0;
    427e:	10 92 36 35 	sts	0x3536, r1	; 0x803536 <time_sec>
		break;
    4282:	00 00       	nop
	}
}
    4284:	00 00       	nop
    4286:	0f 90       	pop	r0
    4288:	df 91       	pop	r29
    428a:	cf 91       	pop	r28
    428c:	08 95       	ret

0000428e <incrementAlarm>:

/***************************************************************************************************
*                                      Helper Function to increment Alarm Time
***************************************************************************************************/
void incrementAlarm(uint8_t timeslot) {
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	1f 92       	push	r1
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
    4298:	89 83       	std	Y+1, r24	; 0x01
	switch(timeslot) {
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	88 2f       	mov	r24, r24
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	81 30       	cpi	r24, 0x01	; 1
    42a2:	91 05       	cpc	r25, r1
    42a4:	61 f0       	breq	.+24     	; 0x42be <incrementAlarm+0x30>
    42a6:	82 30       	cpi	r24, 0x02	; 2
    42a8:	91 05       	cpc	r25, r1
    42aa:	79 f0       	breq	.+30     	; 0x42ca <incrementAlarm+0x3c>
    42ac:	89 2b       	or	r24, r25
    42ae:	09 f0       	breq	.+2      	; 0x42b2 <incrementAlarm+0x24>
		break;
		case 2:
			alarm_sec++;
		break;
	}
}
    42b0:	12 c0       	rjmp	.+36     	; 0x42d6 <incrementAlarm+0x48>
*                                      Helper Function to increment Alarm Time
***************************************************************************************************/
void incrementAlarm(uint8_t timeslot) {
	switch(timeslot) {
		case 0:
			alarm_hour++;
    42b2:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <alarm_hour>
    42b6:	8f 5f       	subi	r24, 0xFF	; 255
    42b8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <alarm_hour>
		break;
    42bc:	0c c0       	rjmp	.+24     	; 0x42d6 <incrementAlarm+0x48>
		case 1:
			alarm_min++;
    42be:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <alarm_min>
    42c2:	8f 5f       	subi	r24, 0xFF	; 255
    42c4:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <alarm_min>
		break;
    42c8:	06 c0       	rjmp	.+12     	; 0x42d6 <incrementAlarm+0x48>
		case 2:
			alarm_sec++;
    42ca:	80 91 37 35 	lds	r24, 0x3537	; 0x803537 <alarm_sec>
    42ce:	8f 5f       	subi	r24, 0xFF	; 255
    42d0:	80 93 37 35 	sts	0x3537, r24	; 0x803537 <alarm_sec>
		break;
    42d4:	00 00       	nop
	}
}
    42d6:	00 00       	nop
    42d8:	0f 90       	pop	r0
    42da:	df 91       	pop	r29
    42dc:	cf 91       	pop	r28
    42de:	08 95       	ret

000042e0 <decrementAlarm>:

/***************************************************************************************************
*                                      Helper Function to decrement Alarm Time
***************************************************************************************************/
void decrementAlarm(uint8_t timeslot) {
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	1f 92       	push	r1
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    42ea:	89 83       	std	Y+1, r24	; 0x01
	switch(timeslot) {
    42ec:	89 81       	ldd	r24, Y+1	; 0x01
    42ee:	88 2f       	mov	r24, r24
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	81 30       	cpi	r24, 0x01	; 1
    42f4:	91 05       	cpc	r25, r1
    42f6:	61 f0       	breq	.+24     	; 0x4310 <decrementAlarm+0x30>
    42f8:	82 30       	cpi	r24, 0x02	; 2
    42fa:	91 05       	cpc	r25, r1
    42fc:	79 f0       	breq	.+30     	; 0x431c <decrementAlarm+0x3c>
    42fe:	89 2b       	or	r24, r25
    4300:	09 f0       	breq	.+2      	; 0x4304 <decrementAlarm+0x24>
		break;
		case 2:
			alarm_sec--;
		break;
	}
}
    4302:	12 c0       	rjmp	.+36     	; 0x4328 <decrementAlarm+0x48>
*                                      Helper Function to decrement Alarm Time
***************************************************************************************************/
void decrementAlarm(uint8_t timeslot) {
	switch(timeslot) {
		case 0:
			alarm_hour--;
    4304:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <alarm_hour>
    4308:	81 50       	subi	r24, 0x01	; 1
    430a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <alarm_hour>
		break;
    430e:	0c c0       	rjmp	.+24     	; 0x4328 <decrementAlarm+0x48>
		case 1:
			alarm_min--;
    4310:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <alarm_min>
    4314:	81 50       	subi	r24, 0x01	; 1
    4316:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <alarm_min>
		break;
    431a:	06 c0       	rjmp	.+12     	; 0x4328 <decrementAlarm+0x48>
		case 2:
			alarm_sec--;
    431c:	80 91 37 35 	lds	r24, 0x3537	; 0x803537 <alarm_sec>
    4320:	81 50       	subi	r24, 0x01	; 1
    4322:	80 93 37 35 	sts	0x3537, r24	; 0x803537 <alarm_sec>
		break;
    4326:	00 00       	nop
	}
}
    4328:	00 00       	nop
    432a:	0f 90       	pop	r0
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	08 95       	ret

00004332 <checkIfAlarmTime>:

/***************************************************************************************************
*                                      Helper Function to check if Alarm Time is reached
***************************************************************************************************/
bool checkIfAlarmTime() {
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
	if(time_hour == alarm_hour && time_min == alarm_min && time_sec == alarm_sec) {
    433a:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    433e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <alarm_hour>
    4342:	98 17       	cp	r25, r24
    4344:	71 f4       	brne	.+28     	; 0x4362 <checkIfAlarmTime+0x30>
    4346:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <time_min>
    434a:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <alarm_min>
    434e:	98 17       	cp	r25, r24
    4350:	41 f4       	brne	.+16     	; 0x4362 <checkIfAlarmTime+0x30>
    4352:	90 91 36 35 	lds	r25, 0x3536	; 0x803536 <time_sec>
    4356:	80 91 37 35 	lds	r24, 0x3537	; 0x803537 <alarm_sec>
    435a:	98 17       	cp	r25, r24
    435c:	11 f4       	brne	.+4      	; 0x4362 <checkIfAlarmTime+0x30>
		return true;
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	01 c0       	rjmp	.+2      	; 0x4364 <checkIfAlarmTime+0x32>
	}
	return false;
    4362:	80 e0       	ldi	r24, 0x00	; 0
}
    4364:	df 91       	pop	r29
    4366:	cf 91       	pop	r28
    4368:	08 95       	ret

0000436a <vUIHandler>:
uint8_t uiMode = UIMODE_INIT;

/***************************************************************************************************
*                                      UIHandler Task with Finite State Machine for UIModes
***************************************************************************************************/
void vUIHandler(void* param) {
    436a:	cf 93       	push	r28
    436c:	df 93       	push	r29
    436e:	cd b7       	in	r28, 0x3d	; 61
    4370:	de b7       	in	r29, 0x3e	; 62
    4372:	6d 97       	sbiw	r28, 0x1d	; 29
    4374:	cd bf       	out	0x3d, r28	; 61
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	8c 8f       	std	Y+28, r24	; 0x1c
    437a:	9d 8f       	std	Y+29, r25	; 0x1d
	char timestring[20] = "              "; //Helper Variable for printing complex variables to screen
    437c:	8f e0       	ldi	r24, 0x0F	; 15
    437e:	ef ee       	ldi	r30, 0xEF	; 239
    4380:	f0 e2       	ldi	r31, 0x20	; 32
    4382:	de 01       	movw	r26, r28
    4384:	18 96       	adiw	r26, 0x08	; 8
    4386:	01 90       	ld	r0, Z+
    4388:	0d 92       	st	X+, r0
    438a:	8a 95       	dec	r24
    438c:	e1 f7       	brne	.-8      	; 0x4386 <vUIHandler+0x1c>
    438e:	25 e0       	ldi	r18, 0x05	; 5
    4390:	ce 01       	movw	r24, r28
    4392:	47 96       	adiw	r24, 0x17	; 23
    4394:	fc 01       	movw	r30, r24
    4396:	32 2f       	mov	r19, r18
    4398:	11 92       	st	Z+, r1
    439a:	3a 95       	dec	r19
    439c:	e9 f7       	brne	.-6      	; 0x4398 <vUIHandler+0x2e>
	bool alarmOn = false; //Helper Varaible to save if alarm is on/off
    439e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t uidelay = 10; //Helper Variable to be able to delay certain effects in the FSM
    43a0:	8a e0       	ldi	r24, 0x0A	; 10
    43a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t timeslot = 0; //Helper Variable to save selected timeslot when setting time/alarm
    43a4:	1b 82       	std	Y+3, r1	; 0x03
	for(;;) {
		vDisplayClear(); //Always clear Display first
    43a6:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <vDisplayClear>
		uint32_t buttonState = (xEventGroupGetBits(evButtonEvents)) & 0x000000FF; //Read Button States from EventGroup
    43aa:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    43ae:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    43b2:	40 e0       	ldi	r20, 0x00	; 0
    43b4:	50 e0       	ldi	r21, 0x00	; 0
    43b6:	ba 01       	movw	r22, r20
    43b8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <xEventGroupClearBits>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	99 27       	eor	r25, r25
    43c2:	aa 27       	eor	r26, r26
    43c4:	bb 27       	eor	r27, r27
    43c6:	8c 83       	std	Y+4, r24	; 0x04
    43c8:	9d 83       	std	Y+5, r25	; 0x05
    43ca:	ae 83       	std	Y+6, r26	; 0x06
    43cc:	bf 83       	std	Y+7, r27	; 0x07
		xEventGroupClearBits(evButtonEvents, EVBUTTONS_CLEAR); //As the Button State is saved now, we can clear the EventGroup for new Button presses
    43ce:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    43d2:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    43d6:	4f ef       	ldi	r20, 0xFF	; 255
    43d8:	50 e0       	ldi	r21, 0x00	; 0
    43da:	60 e0       	ldi	r22, 0x00	; 0
    43dc:	70 e0       	ldi	r23, 0x00	; 0
    43de:	0e 94 54 05 	call	0xaa8	; 0xaa8 <xEventGroupClearBits>
		switch(uiMode) { //Primary Finite State Machine for UIMode handling
    43e2:	80 91 38 35 	lds	r24, 0x3538	; 0x803538 <uiMode>
    43e6:	88 2f       	mov	r24, r24
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	82 30       	cpi	r24, 0x02	; 2
    43ec:	91 05       	cpc	r25, r1
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <vUIHandler+0x88>
    43f0:	a3 c1       	rjmp	.+838    	; 0x4738 <vUIHandler+0x3ce>
    43f2:	83 30       	cpi	r24, 0x03	; 3
    43f4:	91 05       	cpc	r25, r1
    43f6:	34 f4       	brge	.+12     	; 0x4404 <vUIHandler+0x9a>
    43f8:	00 97       	sbiw	r24, 0x00	; 0
    43fa:	61 f0       	breq	.+24     	; 0x4414 <vUIHandler+0xaa>
    43fc:	01 97       	sbiw	r24, 0x01	; 1
    43fe:	09 f4       	brne	.+2      	; 0x4402 <vUIHandler+0x98>
    4400:	74 c0       	rjmp	.+232    	; 0x44ea <vUIHandler+0x180>
    4402:	88 c3       	rjmp	.+1808   	; 0x4b14 <vUIHandler+0x7aa>
    4404:	83 30       	cpi	r24, 0x03	; 3
    4406:	91 05       	cpc	r25, r1
    4408:	09 f4       	brne	.+2      	; 0x440c <vUIHandler+0xa2>
    440a:	60 c2       	rjmp	.+1216   	; 0x48cc <vUIHandler+0x562>
    440c:	04 97       	sbiw	r24, 0x04	; 4
    440e:	09 f4       	brne	.+2      	; 0x4412 <vUIHandler+0xa8>
    4410:	27 c3       	rjmp	.+1614   	; 0x4a60 <vUIHandler+0x6f6>
    4412:	80 c3       	rjmp	.+1792   	; 0x4b14 <vUIHandler+0x7aa>
			case UIMODE_INIT: { //Completely unnescessary, but neat startup effect
				vDisplayWriteStringAtPos(0,0, "ALARM-CLOCK HS 2023"); 
    4414:	81 e3       	ldi	r24, 0x31	; 49
    4416:	90 e2       	ldi	r25, 0x20	; 32
    4418:	89 2f       	mov	r24, r25
    441a:	8f 93       	push	r24
    441c:	81 e3       	ldi	r24, 0x31	; 49
    441e:	90 e2       	ldi	r25, 0x20	; 32
    4420:	8f 93       	push	r24
    4422:	1f 92       	push	r1
    4424:	1f 92       	push	r1
    4426:	1f 92       	push	r1
    4428:	1f 92       	push	r1
    442a:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	0f 90       	pop	r0
				switch(uidelay) { 
    443a:	8a 81       	ldd	r24, Y+2	; 0x02
    443c:	88 2f       	mov	r24, r24
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	09 2e       	mov	r0, r25
    4442:	00 0c       	add	r0, r0
    4444:	aa 0b       	sbc	r26, r26
    4446:	bb 0b       	sbc	r27, r27
    4448:	41 e0       	ldi	r20, 0x01	; 1
    444a:	50 e0       	ldi	r21, 0x00	; 0
    444c:	29 e0       	ldi	r18, 0x09	; 9
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	84 1b       	sub	r24, r20
    4452:	95 0b       	sbc	r25, r21
    4454:	28 17       	cp	r18, r24
    4456:	39 07       	cpc	r19, r25
    4458:	28 f1       	brcs	.+74     	; 0x44a4 <vUIHandler+0x13a>
    445a:	fc 01       	movw	r30, r24
    445c:	88 27       	eor	r24, r24
    445e:	e8 5f       	subi	r30, 0xF8	; 248
    4460:	fe 4f       	sbci	r31, 0xFE	; 254
    4462:	8f 4f       	sbci	r24, 0xFF	; 255
    4464:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__tablejump2__>
					case 10:
						timestring[0] = '.';
    4468:	8e e2       	ldi	r24, 0x2E	; 46
    446a:	88 87       	std	Y+8, r24	; 0x08
					break;
    446c:	1b c0       	rjmp	.+54     	; 0x44a4 <vUIHandler+0x13a>
					case 9:
					timestring[1] = '.';
    446e:	8e e2       	ldi	r24, 0x2E	; 46
    4470:	89 87       	std	Y+9, r24	; 0x09
					break;
    4472:	18 c0       	rjmp	.+48     	; 0x44a4 <vUIHandler+0x13a>
					case 8:
						timestring[2] = '.';
    4474:	8e e2       	ldi	r24, 0x2E	; 46
    4476:	8a 87       	std	Y+10, r24	; 0x0a
					break;
    4478:	15 c0       	rjmp	.+42     	; 0x44a4 <vUIHandler+0x13a>
					case 7:
						timestring[3] = '.';
    447a:	8e e2       	ldi	r24, 0x2E	; 46
    447c:	8b 87       	std	Y+11, r24	; 0x0b
					break;
    447e:	12 c0       	rjmp	.+36     	; 0x44a4 <vUIHandler+0x13a>
					case 6:
						timestring[4] = '.';
    4480:	8e e2       	ldi	r24, 0x2E	; 46
    4482:	8c 87       	std	Y+12, r24	; 0x0c
					break;
    4484:	0f c0       	rjmp	.+30     	; 0x44a4 <vUIHandler+0x13a>
					case 5:
						timestring[5] = '.';
    4486:	8e e2       	ldi	r24, 0x2E	; 46
    4488:	8d 87       	std	Y+13, r24	; 0x0d
					break;
    448a:	0c c0       	rjmp	.+24     	; 0x44a4 <vUIHandler+0x13a>
					case 4:
						timestring[6] = '.';
    448c:	8e e2       	ldi	r24, 0x2E	; 46
    448e:	8e 87       	std	Y+14, r24	; 0x0e
					break;
    4490:	09 c0       	rjmp	.+18     	; 0x44a4 <vUIHandler+0x13a>
					case 3:
						timestring[7] = '.';
    4492:	8e e2       	ldi	r24, 0x2E	; 46
    4494:	8f 87       	std	Y+15, r24	; 0x0f
					break;
    4496:	06 c0       	rjmp	.+12     	; 0x44a4 <vUIHandler+0x13a>
					case 2:
						timestring[8] = '.';
    4498:	8e e2       	ldi	r24, 0x2E	; 46
    449a:	88 8b       	std	Y+16, r24	; 0x10
					break;
    449c:	03 c0       	rjmp	.+6      	; 0x44a4 <vUIHandler+0x13a>
					case 1:
						timestring[9] = '.';
    449e:	8e e2       	ldi	r24, 0x2E	; 46
    44a0:	89 8b       	std	Y+17, r24	; 0x11
					break;
    44a2:	00 00       	nop
				}
				vDisplayWriteStringAtPos(2,0, "Loading.%s", timestring);
    44a4:	ce 01       	movw	r24, r28
    44a6:	08 96       	adiw	r24, 0x08	; 8
    44a8:	29 2f       	mov	r18, r25
    44aa:	2f 93       	push	r18
    44ac:	8f 93       	push	r24
    44ae:	85 e4       	ldi	r24, 0x45	; 69
    44b0:	90 e2       	ldi	r25, 0x20	; 32
    44b2:	89 2f       	mov	r24, r25
    44b4:	8f 93       	push	r24
    44b6:	85 e4       	ldi	r24, 0x45	; 69
    44b8:	90 e2       	ldi	r25, 0x20	; 32
    44ba:	8f 93       	push	r24
    44bc:	1f 92       	push	r1
    44be:	1f 92       	push	r1
    44c0:	1f 92       	push	r1
    44c2:	82 e0       	ldi	r24, 0x02	; 2
    44c4:	8f 93       	push	r24
    44c6:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    44ca:	8d b7       	in	r24, 0x3d	; 61
    44cc:	9e b7       	in	r25, 0x3e	; 62
    44ce:	08 96       	adiw	r24, 0x08	; 8
    44d0:	cd bf       	out	0x3d, r28	; 61
    44d2:	de bf       	out	0x3e, r29	; 62
				if(uidelay > 0) {
    44d4:	8a 81       	ldd	r24, Y+2	; 0x02
    44d6:	88 23       	and	r24, r24
    44d8:	21 f0       	breq	.+8      	; 0x44e2 <vUIHandler+0x178>
					uidelay--;
    44da:	8a 81       	ldd	r24, Y+2	; 0x02
    44dc:	81 50       	subi	r24, 0x01	; 1
    44de:	8a 83       	std	Y+2, r24	; 0x02
				} else {				
					uiMode = UIMODE_MAIN; //When delay is reached, move on to Main-Screen
				}
			}
			break;
    44e0:	19 c3       	rjmp	.+1586   	; 0x4b14 <vUIHandler+0x7aa>
				}
				vDisplayWriteStringAtPos(2,0, "Loading.%s", timestring);
				if(uidelay > 0) {
					uidelay--;
				} else {				
					uiMode = UIMODE_MAIN; //When delay is reached, move on to Main-Screen
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	80 93 38 35 	sts	0x3538, r24	; 0x803538 <uiMode>
				}
			}
			break;
    44e8:	15 c3       	rjmp	.+1578   	; 0x4b14 <vUIHandler+0x7aa>
			case UIMODE_MAIN: //Main Menu
				//Prepare Data to put on Screen
				sprintf(&timestring[0], "%.2i:%.2i:%.2i", time_hour, time_min, time_sec);
    44ea:	80 91 36 35 	lds	r24, 0x3536	; 0x803536 <time_sec>
    44ee:	48 2f       	mov	r20, r24
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <time_min>
    44f6:	28 2f       	mov	r18, r24
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    44fe:	88 2f       	mov	r24, r24
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	65 2f       	mov	r22, r21
    4504:	6f 93       	push	r22
    4506:	4f 93       	push	r20
    4508:	43 2f       	mov	r20, r19
    450a:	4f 93       	push	r20
    450c:	2f 93       	push	r18
    450e:	29 2f       	mov	r18, r25
    4510:	2f 93       	push	r18
    4512:	8f 93       	push	r24
    4514:	80 e5       	ldi	r24, 0x50	; 80
    4516:	90 e2       	ldi	r25, 0x20	; 32
    4518:	89 2f       	mov	r24, r25
    451a:	8f 93       	push	r24
    451c:	80 e5       	ldi	r24, 0x50	; 80
    451e:	90 e2       	ldi	r25, 0x20	; 32
    4520:	8f 93       	push	r24
    4522:	ce 01       	movw	r24, r28
    4524:	08 96       	adiw	r24, 0x08	; 8
    4526:	29 2f       	mov	r18, r25
    4528:	2f 93       	push	r18
    452a:	8f 93       	push	r24
    452c:	0e 94 53 32 	call	0x64a6	; 0x64a6 <sprintf>
    4530:	ed b7       	in	r30, 0x3d	; 61
    4532:	fe b7       	in	r31, 0x3e	; 62
    4534:	3a 96       	adiw	r30, 0x0a	; 10
    4536:	cd bf       	out	0x3d, r28	; 61
    4538:	de bf       	out	0x3e, r29	; 62
				//Write to Screen
				vDisplayWriteStringAtPos(0,0, "ALARM-CLOCK 2023");
    453a:	8f e5       	ldi	r24, 0x5F	; 95
    453c:	90 e2       	ldi	r25, 0x20	; 32
    453e:	89 2f       	mov	r24, r25
    4540:	8f 93       	push	r24
    4542:	8f e5       	ldi	r24, 0x5F	; 95
    4544:	90 e2       	ldi	r25, 0x20	; 32
    4546:	8f 93       	push	r24
    4548:	1f 92       	push	r1
    454a:	1f 92       	push	r1
    454c:	1f 92       	push	r1
    454e:	1f 92       	push	r1
    4550:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4554:	0f 90       	pop	r0
    4556:	0f 90       	pop	r0
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(1,0, "Time:  %s", timestring);
    4560:	ce 01       	movw	r24, r28
    4562:	08 96       	adiw	r24, 0x08	; 8
    4564:	29 2f       	mov	r18, r25
    4566:	2f 93       	push	r18
    4568:	8f 93       	push	r24
    456a:	80 e7       	ldi	r24, 0x70	; 112
    456c:	90 e2       	ldi	r25, 0x20	; 32
    456e:	89 2f       	mov	r24, r25
    4570:	8f 93       	push	r24
    4572:	80 e7       	ldi	r24, 0x70	; 112
    4574:	90 e2       	ldi	r25, 0x20	; 32
    4576:	8f 93       	push	r24
    4578:	1f 92       	push	r1
    457a:	1f 92       	push	r1
    457c:	1f 92       	push	r1
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	8f 93       	push	r24
    4582:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4586:	8d b7       	in	r24, 0x3d	; 61
    4588:	9e b7       	in	r25, 0x3e	; 62
    458a:	08 96       	adiw	r24, 0x08	; 8
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	de bf       	out	0x3e, r29	; 62
				sprintf(&timestring[0], "%.2i:%.2i:%.2i", alarm_hour, alarm_min, alarm_sec);
    4590:	80 91 37 35 	lds	r24, 0x3537	; 0x803537 <alarm_sec>
    4594:	48 2f       	mov	r20, r24
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <alarm_min>
    459c:	28 2f       	mov	r18, r24
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <alarm_hour>
    45a4:	88 2f       	mov	r24, r24
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	65 2f       	mov	r22, r21
    45aa:	6f 93       	push	r22
    45ac:	4f 93       	push	r20
    45ae:	43 2f       	mov	r20, r19
    45b0:	4f 93       	push	r20
    45b2:	2f 93       	push	r18
    45b4:	29 2f       	mov	r18, r25
    45b6:	2f 93       	push	r18
    45b8:	8f 93       	push	r24
    45ba:	80 e5       	ldi	r24, 0x50	; 80
    45bc:	90 e2       	ldi	r25, 0x20	; 32
    45be:	89 2f       	mov	r24, r25
    45c0:	8f 93       	push	r24
    45c2:	80 e5       	ldi	r24, 0x50	; 80
    45c4:	90 e2       	ldi	r25, 0x20	; 32
    45c6:	8f 93       	push	r24
    45c8:	ce 01       	movw	r24, r28
    45ca:	08 96       	adiw	r24, 0x08	; 8
    45cc:	29 2f       	mov	r18, r25
    45ce:	2f 93       	push	r18
    45d0:	8f 93       	push	r24
    45d2:	0e 94 53 32 	call	0x64a6	; 0x64a6 <sprintf>
    45d6:	ed b7       	in	r30, 0x3d	; 61
    45d8:	fe b7       	in	r31, 0x3e	; 62
    45da:	3a 96       	adiw	r30, 0x0a	; 10
    45dc:	cd bf       	out	0x3d, r28	; 61
    45de:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(2,0, "Alarm: %s", timestring);
    45e0:	ce 01       	movw	r24, r28
    45e2:	08 96       	adiw	r24, 0x08	; 8
    45e4:	29 2f       	mov	r18, r25
    45e6:	2f 93       	push	r18
    45e8:	8f 93       	push	r24
    45ea:	8a e7       	ldi	r24, 0x7A	; 122
    45ec:	90 e2       	ldi	r25, 0x20	; 32
    45ee:	89 2f       	mov	r24, r25
    45f0:	8f 93       	push	r24
    45f2:	8a e7       	ldi	r24, 0x7A	; 122
    45f4:	90 e2       	ldi	r25, 0x20	; 32
    45f6:	8f 93       	push	r24
    45f8:	1f 92       	push	r1
    45fa:	1f 92       	push	r1
    45fc:	1f 92       	push	r1
    45fe:	82 e0       	ldi	r24, 0x02	; 2
    4600:	8f 93       	push	r24
    4602:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4606:	8d b7       	in	r24, 0x3d	; 61
    4608:	9e b7       	in	r25, 0x3e	; 62
    460a:	08 96       	adiw	r24, 0x08	; 8
    460c:	cd bf       	out	0x3d, r28	; 61
    460e:	de bf       	out	0x3e, r29	; 62
				//Depending on alarm state ON/OFF is written to screen
				if(alarmOn == false) {
    4610:	99 81       	ldd	r25, Y+1	; 0x01
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	89 27       	eor	r24, r25
    4616:	88 23       	and	r24, r24
    4618:	b1 f0       	breq	.+44     	; 0x4646 <vUIHandler+0x2dc>
					vDisplayWriteStringAtPos(2,16, "OFF");
    461a:	84 e8       	ldi	r24, 0x84	; 132
    461c:	90 e2       	ldi	r25, 0x20	; 32
    461e:	89 2f       	mov	r24, r25
    4620:	8f 93       	push	r24
    4622:	84 e8       	ldi	r24, 0x84	; 132
    4624:	90 e2       	ldi	r25, 0x20	; 32
    4626:	8f 93       	push	r24
    4628:	1f 92       	push	r1
    462a:	80 e1       	ldi	r24, 0x10	; 16
    462c:	8f 93       	push	r24
    462e:	1f 92       	push	r1
    4630:	82 e0       	ldi	r24, 0x02	; 2
    4632:	8f 93       	push	r24
    4634:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4638:	0f 90       	pop	r0
    463a:	0f 90       	pop	r0
    463c:	0f 90       	pop	r0
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	15 c0       	rjmp	.+42     	; 0x4670 <vUIHandler+0x306>
				} else {
					vDisplayWriteStringAtPos(2,16, "ON");
    4646:	88 e8       	ldi	r24, 0x88	; 136
    4648:	90 e2       	ldi	r25, 0x20	; 32
    464a:	89 2f       	mov	r24, r25
    464c:	8f 93       	push	r24
    464e:	88 e8       	ldi	r24, 0x88	; 136
    4650:	90 e2       	ldi	r25, 0x20	; 32
    4652:	8f 93       	push	r24
    4654:	1f 92       	push	r1
    4656:	80 e1       	ldi	r24, 0x10	; 16
    4658:	8f 93       	push	r24
    465a:	1f 92       	push	r1
    465c:	82 e0       	ldi	r24, 0x02	; 2
    465e:	8f 93       	push	r24
    4660:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	0f 90       	pop	r0
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
				}
				vDisplayWriteStringAtPos(3,0, "    | EA |_SA_|_ST_", timestring);
    4670:	ce 01       	movw	r24, r28
    4672:	08 96       	adiw	r24, 0x08	; 8
    4674:	29 2f       	mov	r18, r25
    4676:	2f 93       	push	r18
    4678:	8f 93       	push	r24
    467a:	8b e8       	ldi	r24, 0x8B	; 139
    467c:	90 e2       	ldi	r25, 0x20	; 32
    467e:	89 2f       	mov	r24, r25
    4680:	8f 93       	push	r24
    4682:	8b e8       	ldi	r24, 0x8B	; 139
    4684:	90 e2       	ldi	r25, 0x20	; 32
    4686:	8f 93       	push	r24
    4688:	1f 92       	push	r1
    468a:	1f 92       	push	r1
    468c:	1f 92       	push	r1
    468e:	83 e0       	ldi	r24, 0x03	; 3
    4690:	8f 93       	push	r24
    4692:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4696:	ed b7       	in	r30, 0x3d	; 61
    4698:	fe b7       	in	r31, 0x3e	; 62
    469a:	38 96       	adiw	r30, 0x08	; 8
    469c:	cd bf       	out	0x3d, r28	; 61
    469e:	de bf       	out	0x3e, r29	; 62
				//Change UIMode according to buttonpresses
				if((buttonState & EVBUTTONS_L4) != 0) {
    46a0:	8c 81       	ldd	r24, Y+4	; 0x04
    46a2:	9d 81       	ldd	r25, Y+5	; 0x05
    46a4:	ae 81       	ldd	r26, Y+6	; 0x06
    46a6:	bf 81       	ldd	r27, Y+7	; 0x07
    46a8:	80 78       	andi	r24, 0x80	; 128
    46aa:	99 27       	eor	r25, r25
    46ac:	aa 27       	eor	r26, r26
    46ae:	bb 27       	eor	r27, r27
    46b0:	89 2b       	or	r24, r25
    46b2:	8a 2b       	or	r24, r26
    46b4:	8b 2b       	or	r24, r27
    46b6:	21 f0       	breq	.+8      	; 0x46c0 <vUIHandler+0x356>
					uiMode = UIMODE_TIMESET;
    46b8:	82 e0       	ldi	r24, 0x02	; 2
    46ba:	80 93 38 35 	sts	0x3538, r24	; 0x803538 <uiMode>
					timeslot = 0;
    46be:	1b 82       	std	Y+3, r1	; 0x03
				}
				if(buttonState & EVBUTTONS_L3) {
    46c0:	8c 81       	ldd	r24, Y+4	; 0x04
    46c2:	9d 81       	ldd	r25, Y+5	; 0x05
    46c4:	ae 81       	ldd	r26, Y+6	; 0x06
    46c6:	bf 81       	ldd	r27, Y+7	; 0x07
    46c8:	80 74       	andi	r24, 0x40	; 64
    46ca:	99 27       	eor	r25, r25
    46cc:	aa 27       	eor	r26, r26
    46ce:	bb 27       	eor	r27, r27
    46d0:	89 2b       	or	r24, r25
    46d2:	8a 2b       	or	r24, r26
    46d4:	8b 2b       	or	r24, r27
    46d6:	21 f0       	breq	.+8      	; 0x46e0 <vUIHandler+0x376>
					uiMode = UIMODE_ALARMSET;
    46d8:	83 e0       	ldi	r24, 0x03	; 3
    46da:	80 93 38 35 	sts	0x3538, r24	; 0x803538 <uiMode>
					timeslot = 0;
    46de:	1b 82       	std	Y+3, r1	; 0x03
				}
				if(buttonState & EVBUTTONS_S2) {
    46e0:	8c 81       	ldd	r24, Y+4	; 0x04
    46e2:	9d 81       	ldd	r25, Y+5	; 0x05
    46e4:	ae 81       	ldd	r26, Y+6	; 0x06
    46e6:	bf 81       	ldd	r27, Y+7	; 0x07
    46e8:	82 70       	andi	r24, 0x02	; 2
    46ea:	99 27       	eor	r25, r25
    46ec:	aa 27       	eor	r26, r26
    46ee:	bb 27       	eor	r27, r27
    46f0:	89 2b       	or	r24, r25
    46f2:	8a 2b       	or	r24, r26
    46f4:	8b 2b       	or	r24, r27
    46f6:	39 f0       	breq	.+14     	; 0x4706 <vUIHandler+0x39c>
					alarmOn = (alarmOn?false:true);
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
    46fa:	88 23       	and	r24, r24
    46fc:	11 f0       	breq	.+4      	; 0x4702 <vUIHandler+0x398>
    46fe:	80 e0       	ldi	r24, 0x00	; 0
    4700:	01 c0       	rjmp	.+2      	; 0x4704 <vUIHandler+0x39a>
    4702:	81 e0       	ldi	r24, 0x01	; 1
    4704:	89 83       	std	Y+1, r24	; 0x01
				}
				if(alarmOn && checkIfAlarmTime()) {
    4706:	89 81       	ldd	r24, Y+1	; 0x01
    4708:	88 23       	and	r24, r24
    470a:	09 f4       	brne	.+2      	; 0x470e <vUIHandler+0x3a4>
    470c:	00 c2       	rjmp	.+1024   	; 0x4b0e <vUIHandler+0x7a4>
    470e:	0e 94 99 21 	call	0x4332	; 0x4332 <checkIfAlarmTime>
    4712:	88 23       	and	r24, r24
    4714:	09 f4       	brne	.+2      	; 0x4718 <vUIHandler+0x3ae>
    4716:	fb c1       	rjmp	.+1014   	; 0x4b0e <vUIHandler+0x7a4>
					uiMode = UIMODE_ALARM;
    4718:	84 e0       	ldi	r24, 0x04	; 4
    471a:	80 93 38 35 	sts	0x3538, r24	; 0x803538 <uiMode>
					uidelay = 50; // After 10s Alarm Menu shall go back to main menu
    471e:	82 e3       	ldi	r24, 0x32	; 50
    4720:	8a 83       	std	Y+2, r24	; 0x02
					xEventGroupSetBits(evSystemState, EV_ALARM_ON); //Enable LED Blinker
    4722:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evSystemState>
    4726:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evSystemState+0x1>
    472a:	41 e0       	ldi	r20, 0x01	; 1
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
				}
			break;
    4736:	eb c1       	rjmp	.+982    	; 0x4b0e <vUIHandler+0x7a4>
			case UIMODE_TIMESET: //Menu to configure time
				//Prepare Data to put on Screen
				sprintf(&timestring[0], "%.2i:%.2i:%.2i", time_hour, time_min, time_sec);				
    4738:	80 91 36 35 	lds	r24, 0x3536	; 0x803536 <time_sec>
    473c:	48 2f       	mov	r20, r24
    473e:	50 e0       	ldi	r21, 0x00	; 0
    4740:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <time_min>
    4744:	28 2f       	mov	r18, r24
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    474c:	88 2f       	mov	r24, r24
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	65 2f       	mov	r22, r21
    4752:	6f 93       	push	r22
    4754:	4f 93       	push	r20
    4756:	43 2f       	mov	r20, r19
    4758:	4f 93       	push	r20
    475a:	2f 93       	push	r18
    475c:	29 2f       	mov	r18, r25
    475e:	2f 93       	push	r18
    4760:	8f 93       	push	r24
    4762:	80 e5       	ldi	r24, 0x50	; 80
    4764:	90 e2       	ldi	r25, 0x20	; 32
    4766:	89 2f       	mov	r24, r25
    4768:	8f 93       	push	r24
    476a:	80 e5       	ldi	r24, 0x50	; 80
    476c:	90 e2       	ldi	r25, 0x20	; 32
    476e:	8f 93       	push	r24
    4770:	ce 01       	movw	r24, r28
    4772:	08 96       	adiw	r24, 0x08	; 8
    4774:	29 2f       	mov	r18, r25
    4776:	2f 93       	push	r18
    4778:	8f 93       	push	r24
    477a:	0e 94 53 32 	call	0x64a6	; 0x64a6 <sprintf>
    477e:	8d b7       	in	r24, 0x3d	; 61
    4780:	9e b7       	in	r25, 0x3e	; 62
    4782:	0a 96       	adiw	r24, 0x0a	; 10
    4784:	cd bf       	out	0x3d, r28	; 61
    4786:	de bf       	out	0x3e, r29	; 62
				//Write to Screen
				vDisplayWriteStringAtPos(0,0, "Set Time:");				
    4788:	8f e9       	ldi	r24, 0x9F	; 159
    478a:	90 e2       	ldi	r25, 0x20	; 32
    478c:	89 2f       	mov	r24, r25
    478e:	8f 93       	push	r24
    4790:	8f e9       	ldi	r24, 0x9F	; 159
    4792:	90 e2       	ldi	r25, 0x20	; 32
    4794:	8f 93       	push	r24
    4796:	1f 92       	push	r1
    4798:	1f 92       	push	r1
    479a:	1f 92       	push	r1
    479c:	1f 92       	push	r1
    479e:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    47a2:	0f 90       	pop	r0
    47a4:	0f 90       	pop	r0
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(1,0, "Time:  %s", timestring);
    47ae:	ce 01       	movw	r24, r28
    47b0:	08 96       	adiw	r24, 0x08	; 8
    47b2:	29 2f       	mov	r18, r25
    47b4:	2f 93       	push	r18
    47b6:	8f 93       	push	r24
    47b8:	80 e7       	ldi	r24, 0x70	; 112
    47ba:	90 e2       	ldi	r25, 0x20	; 32
    47bc:	89 2f       	mov	r24, r25
    47be:	8f 93       	push	r24
    47c0:	80 e7       	ldi	r24, 0x70	; 112
    47c2:	90 e2       	ldi	r25, 0x20	; 32
    47c4:	8f 93       	push	r24
    47c6:	1f 92       	push	r1
    47c8:	1f 92       	push	r1
    47ca:	1f 92       	push	r1
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	8f 93       	push	r24
    47d0:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    47d4:	ed b7       	in	r30, 0x3d	; 61
    47d6:	fe b7       	in	r31, 0x3e	; 62
    47d8:	38 96       	adiw	r30, 0x08	; 8
    47da:	cd bf       	out	0x3d, r28	; 61
    47dc:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(3,0, "  - | +  | >  |BACK", timestring);
    47de:	ce 01       	movw	r24, r28
    47e0:	08 96       	adiw	r24, 0x08	; 8
    47e2:	29 2f       	mov	r18, r25
    47e4:	2f 93       	push	r18
    47e6:	8f 93       	push	r24
    47e8:	89 ea       	ldi	r24, 0xA9	; 169
    47ea:	90 e2       	ldi	r25, 0x20	; 32
    47ec:	89 2f       	mov	r24, r25
    47ee:	8f 93       	push	r24
    47f0:	89 ea       	ldi	r24, 0xA9	; 169
    47f2:	90 e2       	ldi	r25, 0x20	; 32
    47f4:	8f 93       	push	r24
    47f6:	1f 92       	push	r1
    47f8:	1f 92       	push	r1
    47fa:	1f 92       	push	r1
    47fc:	83 e0       	ldi	r24, 0x03	; 3
    47fe:	8f 93       	push	r24
    4800:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4804:	8d b7       	in	r24, 0x3d	; 61
    4806:	9e b7       	in	r25, 0x3e	; 62
    4808:	08 96       	adiw	r24, 0x08	; 8
    480a:	cd bf       	out	0x3d, r28	; 61
    480c:	de bf       	out	0x3e, r29	; 62
				//Change UIMode according to buttonpresses
				if((buttonState & EVBUTTONS_S4) != 0) {
    480e:	8c 81       	ldd	r24, Y+4	; 0x04
    4810:	9d 81       	ldd	r25, Y+5	; 0x05
    4812:	ae 81       	ldd	r26, Y+6	; 0x06
    4814:	bf 81       	ldd	r27, Y+7	; 0x07
    4816:	88 70       	andi	r24, 0x08	; 8
    4818:	99 27       	eor	r25, r25
    481a:	aa 27       	eor	r26, r26
    481c:	bb 27       	eor	r27, r27
    481e:	89 2b       	or	r24, r25
    4820:	8a 2b       	or	r24, r26
    4822:	8b 2b       	or	r24, r27
    4824:	19 f0       	breq	.+6      	; 0x482c <vUIHandler+0x4c2>
					uiMode = UIMODE_MAIN;
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	80 93 38 35 	sts	0x3538, r24	; 0x803538 <uiMode>
				}
				if((buttonState & EVBUTTONS_S1) != 0) {
    482c:	8c 81       	ldd	r24, Y+4	; 0x04
    482e:	9d 81       	ldd	r25, Y+5	; 0x05
    4830:	ae 81       	ldd	r26, Y+6	; 0x06
    4832:	bf 81       	ldd	r27, Y+7	; 0x07
    4834:	81 70       	andi	r24, 0x01	; 1
    4836:	99 27       	eor	r25, r25
    4838:	aa 27       	eor	r26, r26
    483a:	bb 27       	eor	r27, r27
    483c:	89 2b       	or	r24, r25
    483e:	8a 2b       	or	r24, r26
    4840:	8b 2b       	or	r24, r27
    4842:	19 f0       	breq	.+6      	; 0x484a <vUIHandler+0x4e0>
					decrementTime(timeslot);
    4844:	8b 81       	ldd	r24, Y+3	; 0x03
    4846:	0e 94 21 21 	call	0x4242	; 0x4242 <decrementTime>
				}
				if((buttonState & EVBUTTONS_S2) != 0) {
    484a:	8c 81       	ldd	r24, Y+4	; 0x04
    484c:	9d 81       	ldd	r25, Y+5	; 0x05
    484e:	ae 81       	ldd	r26, Y+6	; 0x06
    4850:	bf 81       	ldd	r27, Y+7	; 0x07
    4852:	82 70       	andi	r24, 0x02	; 2
    4854:	99 27       	eor	r25, r25
    4856:	aa 27       	eor	r26, r26
    4858:	bb 27       	eor	r27, r27
    485a:	89 2b       	or	r24, r25
    485c:	8a 2b       	or	r24, r26
    485e:	8b 2b       	or	r24, r27
    4860:	19 f0       	breq	.+6      	; 0x4868 <vUIHandler+0x4fe>
					incrementTime(timeslot);
    4862:	8b 81       	ldd	r24, Y+3	; 0x03
    4864:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <incrementTime>
				}
				if((buttonState & EVBUTTONS_S3) != 0) {
    4868:	8c 81       	ldd	r24, Y+4	; 0x04
    486a:	9d 81       	ldd	r25, Y+5	; 0x05
    486c:	ae 81       	ldd	r26, Y+6	; 0x06
    486e:	bf 81       	ldd	r27, Y+7	; 0x07
    4870:	84 70       	andi	r24, 0x04	; 4
    4872:	99 27       	eor	r25, r25
    4874:	aa 27       	eor	r26, r26
    4876:	bb 27       	eor	r27, r27
    4878:	89 2b       	or	r24, r25
    487a:	8a 2b       	or	r24, r26
    487c:	8b 2b       	or	r24, r27
    487e:	39 f0       	breq	.+14     	; 0x488e <vUIHandler+0x524>
					timeslot++;
    4880:	8b 81       	ldd	r24, Y+3	; 0x03
    4882:	8f 5f       	subi	r24, 0xFF	; 255
    4884:	8b 83       	std	Y+3, r24	; 0x03
					if(timeslot >= 3) {
    4886:	8b 81       	ldd	r24, Y+3	; 0x03
    4888:	83 30       	cpi	r24, 0x03	; 3
    488a:	08 f0       	brcs	.+2      	; 0x488e <vUIHandler+0x524>
						timeslot = 0;
    488c:	1b 82       	std	Y+3, r1	; 0x03
					}
				}
				//Print Timeslot indicator below selected timeslot hour/min/sec
				vDisplayWriteStringAtPos(2,(7+(timeslot*3)), "^^");
    488e:	8b 81       	ldd	r24, Y+3	; 0x03
    4890:	28 2f       	mov	r18, r24
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	c9 01       	movw	r24, r18
    4896:	88 0f       	add	r24, r24
    4898:	99 1f       	adc	r25, r25
    489a:	82 0f       	add	r24, r18
    489c:	93 1f       	adc	r25, r19
    489e:	07 96       	adiw	r24, 0x07	; 7
    48a0:	2d eb       	ldi	r18, 0xBD	; 189
    48a2:	30 e2       	ldi	r19, 0x20	; 32
    48a4:	23 2f       	mov	r18, r19
    48a6:	2f 93       	push	r18
    48a8:	2d eb       	ldi	r18, 0xBD	; 189
    48aa:	30 e2       	ldi	r19, 0x20	; 32
    48ac:	2f 93       	push	r18
    48ae:	29 2f       	mov	r18, r25
    48b0:	2f 93       	push	r18
    48b2:	8f 93       	push	r24
    48b4:	1f 92       	push	r1
    48b6:	82 e0       	ldi	r24, 0x02	; 2
    48b8:	8f 93       	push	r24
    48ba:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    48be:	0f 90       	pop	r0
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
			break;
    48ca:	24 c1       	rjmp	.+584    	; 0x4b14 <vUIHandler+0x7aa>
			case UIMODE_ALARMSET: //Menu to configure Alarm
				//Prepare Data to put on Screen
				sprintf(&timestring[0], "%.2i:%.2i:%.2i", alarm_hour, alarm_min, alarm_sec);
    48cc:	80 91 37 35 	lds	r24, 0x3537	; 0x803537 <alarm_sec>
    48d0:	48 2f       	mov	r20, r24
    48d2:	50 e0       	ldi	r21, 0x00	; 0
    48d4:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <alarm_min>
    48d8:	28 2f       	mov	r18, r24
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <alarm_hour>
    48e0:	88 2f       	mov	r24, r24
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	65 2f       	mov	r22, r21
    48e6:	6f 93       	push	r22
    48e8:	4f 93       	push	r20
    48ea:	43 2f       	mov	r20, r19
    48ec:	4f 93       	push	r20
    48ee:	2f 93       	push	r18
    48f0:	29 2f       	mov	r18, r25
    48f2:	2f 93       	push	r18
    48f4:	8f 93       	push	r24
    48f6:	80 e5       	ldi	r24, 0x50	; 80
    48f8:	90 e2       	ldi	r25, 0x20	; 32
    48fa:	89 2f       	mov	r24, r25
    48fc:	8f 93       	push	r24
    48fe:	80 e5       	ldi	r24, 0x50	; 80
    4900:	90 e2       	ldi	r25, 0x20	; 32
    4902:	8f 93       	push	r24
    4904:	ce 01       	movw	r24, r28
    4906:	08 96       	adiw	r24, 0x08	; 8
    4908:	29 2f       	mov	r18, r25
    490a:	2f 93       	push	r18
    490c:	8f 93       	push	r24
    490e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <sprintf>
    4912:	ed b7       	in	r30, 0x3d	; 61
    4914:	fe b7       	in	r31, 0x3e	; 62
    4916:	3a 96       	adiw	r30, 0x0a	; 10
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	de bf       	out	0x3e, r29	; 62
				//Write to Screen
				vDisplayWriteStringAtPos(0,0, "Set Alarm");				
    491c:	80 ec       	ldi	r24, 0xC0	; 192
    491e:	90 e2       	ldi	r25, 0x20	; 32
    4920:	89 2f       	mov	r24, r25
    4922:	8f 93       	push	r24
    4924:	80 ec       	ldi	r24, 0xC0	; 192
    4926:	90 e2       	ldi	r25, 0x20	; 32
    4928:	8f 93       	push	r24
    492a:	1f 92       	push	r1
    492c:	1f 92       	push	r1
    492e:	1f 92       	push	r1
    4930:	1f 92       	push	r1
    4932:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4936:	0f 90       	pop	r0
    4938:	0f 90       	pop	r0
    493a:	0f 90       	pop	r0
    493c:	0f 90       	pop	r0
    493e:	0f 90       	pop	r0
    4940:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(2,0, "Alarm: %s", timestring);
    4942:	ce 01       	movw	r24, r28
    4944:	08 96       	adiw	r24, 0x08	; 8
    4946:	29 2f       	mov	r18, r25
    4948:	2f 93       	push	r18
    494a:	8f 93       	push	r24
    494c:	8a e7       	ldi	r24, 0x7A	; 122
    494e:	90 e2       	ldi	r25, 0x20	; 32
    4950:	89 2f       	mov	r24, r25
    4952:	8f 93       	push	r24
    4954:	8a e7       	ldi	r24, 0x7A	; 122
    4956:	90 e2       	ldi	r25, 0x20	; 32
    4958:	8f 93       	push	r24
    495a:	1f 92       	push	r1
    495c:	1f 92       	push	r1
    495e:	1f 92       	push	r1
    4960:	82 e0       	ldi	r24, 0x02	; 2
    4962:	8f 93       	push	r24
    4964:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4968:	8d b7       	in	r24, 0x3d	; 61
    496a:	9e b7       	in	r25, 0x3e	; 62
    496c:	08 96       	adiw	r24, 0x08	; 8
    496e:	cd bf       	out	0x3d, r28	; 61
    4970:	de bf       	out	0x3e, r29	; 62
				vDisplayWriteStringAtPos(3,0, "  - | +  | >  |BACK", timestring);
    4972:	ce 01       	movw	r24, r28
    4974:	08 96       	adiw	r24, 0x08	; 8
    4976:	29 2f       	mov	r18, r25
    4978:	2f 93       	push	r18
    497a:	8f 93       	push	r24
    497c:	89 ea       	ldi	r24, 0xA9	; 169
    497e:	90 e2       	ldi	r25, 0x20	; 32
    4980:	89 2f       	mov	r24, r25
    4982:	8f 93       	push	r24
    4984:	89 ea       	ldi	r24, 0xA9	; 169
    4986:	90 e2       	ldi	r25, 0x20	; 32
    4988:	8f 93       	push	r24
    498a:	1f 92       	push	r1
    498c:	1f 92       	push	r1
    498e:	1f 92       	push	r1
    4990:	83 e0       	ldi	r24, 0x03	; 3
    4992:	8f 93       	push	r24
    4994:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4998:	ed b7       	in	r30, 0x3d	; 61
    499a:	fe b7       	in	r31, 0x3e	; 62
    499c:	38 96       	adiw	r30, 0x08	; 8
    499e:	cd bf       	out	0x3d, r28	; 61
    49a0:	de bf       	out	0x3e, r29	; 62
				//Change UIMode according to buttonpresses
				if((buttonState & EVBUTTONS_S4) != 0) {
    49a2:	8c 81       	ldd	r24, Y+4	; 0x04
    49a4:	9d 81       	ldd	r25, Y+5	; 0x05
    49a6:	ae 81       	ldd	r26, Y+6	; 0x06
    49a8:	bf 81       	ldd	r27, Y+7	; 0x07
    49aa:	88 70       	andi	r24, 0x08	; 8
    49ac:	99 27       	eor	r25, r25
    49ae:	aa 27       	eor	r26, r26
    49b0:	bb 27       	eor	r27, r27
    49b2:	89 2b       	or	r24, r25
    49b4:	8a 2b       	or	r24, r26
    49b6:	8b 2b       	or	r24, r27
    49b8:	19 f0       	breq	.+6      	; 0x49c0 <vUIHandler+0x656>
					uiMode = UIMODE_MAIN;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	80 93 38 35 	sts	0x3538, r24	; 0x803538 <uiMode>
				}
				if((buttonState & EVBUTTONS_S1) != 0) {
    49c0:	8c 81       	ldd	r24, Y+4	; 0x04
    49c2:	9d 81       	ldd	r25, Y+5	; 0x05
    49c4:	ae 81       	ldd	r26, Y+6	; 0x06
    49c6:	bf 81       	ldd	r27, Y+7	; 0x07
    49c8:	81 70       	andi	r24, 0x01	; 1
    49ca:	99 27       	eor	r25, r25
    49cc:	aa 27       	eor	r26, r26
    49ce:	bb 27       	eor	r27, r27
    49d0:	89 2b       	or	r24, r25
    49d2:	8a 2b       	or	r24, r26
    49d4:	8b 2b       	or	r24, r27
    49d6:	19 f0       	breq	.+6      	; 0x49de <vUIHandler+0x674>
					decrementAlarm(timeslot);
    49d8:	8b 81       	ldd	r24, Y+3	; 0x03
    49da:	0e 94 70 21 	call	0x42e0	; 0x42e0 <decrementAlarm>
				}
				if((buttonState & EVBUTTONS_S2) != 0) {
    49de:	8c 81       	ldd	r24, Y+4	; 0x04
    49e0:	9d 81       	ldd	r25, Y+5	; 0x05
    49e2:	ae 81       	ldd	r26, Y+6	; 0x06
    49e4:	bf 81       	ldd	r27, Y+7	; 0x07
    49e6:	82 70       	andi	r24, 0x02	; 2
    49e8:	99 27       	eor	r25, r25
    49ea:	aa 27       	eor	r26, r26
    49ec:	bb 27       	eor	r27, r27
    49ee:	89 2b       	or	r24, r25
    49f0:	8a 2b       	or	r24, r26
    49f2:	8b 2b       	or	r24, r27
    49f4:	19 f0       	breq	.+6      	; 0x49fc <vUIHandler+0x692>
					incrementAlarm(timeslot);
    49f6:	8b 81       	ldd	r24, Y+3	; 0x03
    49f8:	0e 94 47 21 	call	0x428e	; 0x428e <incrementAlarm>
				}
				if((buttonState & EVBUTTONS_S3) != 0) {
    49fc:	8c 81       	ldd	r24, Y+4	; 0x04
    49fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4a00:	ae 81       	ldd	r26, Y+6	; 0x06
    4a02:	bf 81       	ldd	r27, Y+7	; 0x07
    4a04:	84 70       	andi	r24, 0x04	; 4
    4a06:	99 27       	eor	r25, r25
    4a08:	aa 27       	eor	r26, r26
    4a0a:	bb 27       	eor	r27, r27
    4a0c:	89 2b       	or	r24, r25
    4a0e:	8a 2b       	or	r24, r26
    4a10:	8b 2b       	or	r24, r27
    4a12:	39 f0       	breq	.+14     	; 0x4a22 <vUIHandler+0x6b8>
					timeslot++;
    4a14:	8b 81       	ldd	r24, Y+3	; 0x03
    4a16:	8f 5f       	subi	r24, 0xFF	; 255
    4a18:	8b 83       	std	Y+3, r24	; 0x03
					if(timeslot >= 3) {
    4a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1c:	83 30       	cpi	r24, 0x03	; 3
    4a1e:	08 f0       	brcs	.+2      	; 0x4a22 <vUIHandler+0x6b8>
						timeslot = 0;
    4a20:	1b 82       	std	Y+3, r1	; 0x03
					}
				}
				//Print Timeslot indicator above selected timeslot hour/min/sec
				vDisplayWriteStringAtPos(1,(7+(timeslot*3)), "vv");
    4a22:	8b 81       	ldd	r24, Y+3	; 0x03
    4a24:	28 2f       	mov	r18, r24
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	c9 01       	movw	r24, r18
    4a2a:	88 0f       	add	r24, r24
    4a2c:	99 1f       	adc	r25, r25
    4a2e:	82 0f       	add	r24, r18
    4a30:	93 1f       	adc	r25, r19
    4a32:	07 96       	adiw	r24, 0x07	; 7
    4a34:	2a ec       	ldi	r18, 0xCA	; 202
    4a36:	30 e2       	ldi	r19, 0x20	; 32
    4a38:	23 2f       	mov	r18, r19
    4a3a:	2f 93       	push	r18
    4a3c:	2a ec       	ldi	r18, 0xCA	; 202
    4a3e:	30 e2       	ldi	r19, 0x20	; 32
    4a40:	2f 93       	push	r18
    4a42:	29 2f       	mov	r18, r25
    4a44:	2f 93       	push	r18
    4a46:	8f 93       	push	r24
    4a48:	1f 92       	push	r1
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	8f 93       	push	r24
    4a4e:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4a52:	0f 90       	pop	r0
    4a54:	0f 90       	pop	r0
    4a56:	0f 90       	pop	r0
    4a58:	0f 90       	pop	r0
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
			break;
    4a5e:	5a c0       	rjmp	.+180    	; 0x4b14 <vUIHandler+0x7aa>
			case UIMODE_ALARM: //Alarm Menu
				vDisplayWriteStringAtPos(0,0, "  !A-L-A-R-M!");
    4a60:	8d ec       	ldi	r24, 0xCD	; 205
    4a62:	90 e2       	ldi	r25, 0x20	; 32
    4a64:	89 2f       	mov	r24, r25
    4a66:	8f 93       	push	r24
    4a68:	8d ec       	ldi	r24, 0xCD	; 205
    4a6a:	90 e2       	ldi	r25, 0x20	; 32
    4a6c:	8f 93       	push	r24
    4a6e:	1f 92       	push	r1
    4a70:	1f 92       	push	r1
    4a72:	1f 92       	push	r1
    4a74:	1f 92       	push	r1
    4a76:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4a7a:	0f 90       	pop	r0
    4a7c:	0f 90       	pop	r0
    4a7e:	0f 90       	pop	r0
    4a80:	0f 90       	pop	r0
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
				vDisplayWriteStringAtPos(3,0, "    |    |    |BACK");
    4a86:	8b ed       	ldi	r24, 0xDB	; 219
    4a88:	90 e2       	ldi	r25, 0x20	; 32
    4a8a:	89 2f       	mov	r24, r25
    4a8c:	8f 93       	push	r24
    4a8e:	8b ed       	ldi	r24, 0xDB	; 219
    4a90:	90 e2       	ldi	r25, 0x20	; 32
    4a92:	8f 93       	push	r24
    4a94:	1f 92       	push	r1
    4a96:	1f 92       	push	r1
    4a98:	1f 92       	push	r1
    4a9a:	83 e0       	ldi	r24, 0x03	; 3
    4a9c:	8f 93       	push	r24
    4a9e:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <vDisplayWriteStringAtPos>
    4aa2:	0f 90       	pop	r0
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
				if(uidelay > 0) { //When alarm is not acknowledged within uidelay, state goes back to main-menu
    4aae:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab0:	88 23       	and	r24, r24
    4ab2:	99 f0       	breq	.+38     	; 0x4ada <vUIHandler+0x770>
					if(--uidelay == 0) {
    4ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab6:	81 50       	subi	r24, 0x01	; 1
    4ab8:	8a 83       	std	Y+2, r24	; 0x02
    4aba:	8a 81       	ldd	r24, Y+2	; 0x02
    4abc:	88 23       	and	r24, r24
    4abe:	69 f4       	brne	.+26     	; 0x4ada <vUIHandler+0x770>
						xEventGroupClearBits(evSystemState, EV_ALARM_ON); //Disable Blinking
    4ac0:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evSystemState>
    4ac4:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evSystemState+0x1>
    4ac8:	41 e0       	ldi	r20, 0x01	; 1
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <xEventGroupClearBits>
						uiMode = UIMODE_MAIN;
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	80 93 38 35 	sts	0x3538, r24	; 0x803538 <uiMode>
					}
				}
				//Change UIMode according to buttonpresses
				if((buttonState & EVBUTTONS_S4) != 0) {
    4ada:	8c 81       	ldd	r24, Y+4	; 0x04
    4adc:	9d 81       	ldd	r25, Y+5	; 0x05
    4ade:	ae 81       	ldd	r26, Y+6	; 0x06
    4ae0:	bf 81       	ldd	r27, Y+7	; 0x07
    4ae2:	88 70       	andi	r24, 0x08	; 8
    4ae4:	99 27       	eor	r25, r25
    4ae6:	aa 27       	eor	r26, r26
    4ae8:	bb 27       	eor	r27, r27
    4aea:	89 2b       	or	r24, r25
    4aec:	8a 2b       	or	r24, r26
    4aee:	8b 2b       	or	r24, r27
    4af0:	81 f0       	breq	.+32     	; 0x4b12 <vUIHandler+0x7a8>
					xEventGroupClearBits(evSystemState, EV_ALARM_ON); //Disable Blinking
    4af2:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evSystemState>
    4af6:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evSystemState+0x1>
    4afa:	41 e0       	ldi	r20, 0x01	; 1
    4afc:	50 e0       	ldi	r21, 0x00	; 0
    4afe:	60 e0       	ldi	r22, 0x00	; 0
    4b00:	70 e0       	ldi	r23, 0x00	; 0
    4b02:	0e 94 54 05 	call	0xaa8	; 0xaa8 <xEventGroupClearBits>
					uiMode = UIMODE_MAIN;
    4b06:	81 e0       	ldi	r24, 0x01	; 1
    4b08:	80 93 38 35 	sts	0x3538, r24	; 0x803538 <uiMode>
				}				
			break;
    4b0c:	02 c0       	rjmp	.+4      	; 0x4b12 <vUIHandler+0x7a8>
				if(alarmOn && checkIfAlarmTime()) {
					uiMode = UIMODE_ALARM;
					uidelay = 50; // After 10s Alarm Menu shall go back to main menu
					xEventGroupSetBits(evSystemState, EV_ALARM_ON); //Enable LED Blinker
				}
			break;
    4b0e:	00 00       	nop
    4b10:	01 c0       	rjmp	.+2      	; 0x4b14 <vUIHandler+0x7aa>
				//Change UIMode according to buttonpresses
				if((buttonState & EVBUTTONS_S4) != 0) {
					xEventGroupClearBits(evSystemState, EV_ALARM_ON); //Disable Blinking
					uiMode = UIMODE_MAIN;
				}				
			break;
    4b12:	00 00       	nop
		}
		vTaskDelay(200/portTICK_RATE_MS); //FSM Delay
    4b14:	68 ec       	ldi	r22, 0xC8	; 200
    4b16:	70 e0       	ldi	r23, 0x00	; 0
    4b18:	80 e0       	ldi	r24, 0x00	; 0
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	0e 94 11 14 	call	0x2822	; 0x2822 <vTaskDelay>
	}
    4b20:	42 cc       	rjmp	.-1916   	; 0x43a6 <vUIHandler+0x3c>

00004b22 <vButtonHandler>:
}

/***************************************************************************************************
*                                      ButtonHandler Task to send Button Events to UIHandler
***************************************************************************************************/
void vButtonHandler(void* param) {
    4b22:	cf 93       	push	r28
    4b24:	df 93       	push	r29
    4b26:	1f 92       	push	r1
    4b28:	1f 92       	push	r1
    4b2a:	cd b7       	in	r28, 0x3d	; 61
    4b2c:	de b7       	in	r29, 0x3e	; 62
    4b2e:	89 83       	std	Y+1, r24	; 0x01
    4b30:	9a 83       	std	Y+2, r25	; 0x02
	initButtons(); //Initialize Buttonhandler
    4b32:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <initButtons>
	for(;;) {
		updateButtons(); //Update Button States
    4b36:	0e 94 86 01 	call	0x30c	; 0x30c <updateButtons>
		
		//Read Button State and set EventBits in EventGroup
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>
    4b40:	81 30       	cpi	r24, 0x01	; 1
    4b42:	51 f4       	brne	.+20     	; 0x4b58 <vButtonHandler+0x36>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S1);
    4b44:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    4b48:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    4b4c:	41 e0       	ldi	r20, 0x01	; 1
    4b4e:	50 e0       	ldi	r21, 0x00	; 0
    4b50:	60 e0       	ldi	r22, 0x00	; 0
    4b52:	70 e0       	ldi	r23, 0x00	; 0
    4b54:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    4b58:	81 e0       	ldi	r24, 0x01	; 1
    4b5a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>
    4b5e:	81 30       	cpi	r24, 0x01	; 1
    4b60:	51 f4       	brne	.+20     	; 0x4b76 <vButtonHandler+0x54>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S2);
    4b62:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    4b66:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    4b6a:	42 e0       	ldi	r20, 0x02	; 2
    4b6c:	50 e0       	ldi	r21, 0x00	; 0
    4b6e:	60 e0       	ldi	r22, 0x00	; 0
    4b70:	70 e0       	ldi	r23, 0x00	; 0
    4b72:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    4b76:	82 e0       	ldi	r24, 0x02	; 2
    4b78:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>
    4b7c:	81 30       	cpi	r24, 0x01	; 1
    4b7e:	51 f4       	brne	.+20     	; 0x4b94 <vButtonHandler+0x72>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S3);
    4b80:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    4b84:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    4b88:	44 e0       	ldi	r20, 0x04	; 4
    4b8a:	50 e0       	ldi	r21, 0x00	; 0
    4b8c:	60 e0       	ldi	r22, 0x00	; 0
    4b8e:	70 e0       	ldi	r23, 0x00	; 0
    4b90:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    4b94:	83 e0       	ldi	r24, 0x03	; 3
    4b96:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>
    4b9a:	81 30       	cpi	r24, 0x01	; 1
    4b9c:	51 f4       	brne	.+20     	; 0x4bb2 <vButtonHandler+0x90>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_S4);
    4b9e:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    4ba2:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    4ba6:	48 e0       	ldi	r20, 0x08	; 8
    4ba8:	50 e0       	ldi	r21, 0x00	; 0
    4baa:	60 e0       	ldi	r22, 0x00	; 0
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>
    4bb8:	88 23       	and	r24, r24
    4bba:	51 f4       	brne	.+20     	; 0x4bd0 <vButtonHandler+0xae>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L1);
    4bbc:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    4bc0:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    4bc4:	40 e1       	ldi	r20, 0x10	; 16
    4bc6:	50 e0       	ldi	r21, 0x00	; 0
    4bc8:	60 e0       	ldi	r22, 0x00	; 0
    4bca:	70 e0       	ldi	r23, 0x00	; 0
    4bcc:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>
    4bd6:	88 23       	and	r24, r24
    4bd8:	51 f4       	brne	.+20     	; 0x4bee <vButtonHandler+0xcc>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L2);
    4bda:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    4bde:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    4be2:	40 e2       	ldi	r20, 0x20	; 32
    4be4:	50 e0       	ldi	r21, 0x00	; 0
    4be6:	60 e0       	ldi	r22, 0x00	; 0
    4be8:	70 e0       	ldi	r23, 0x00	; 0
    4bea:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    4bee:	82 e0       	ldi	r24, 0x02	; 2
    4bf0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>
    4bf4:	88 23       	and	r24, r24
    4bf6:	51 f4       	brne	.+20     	; 0x4c0c <vButtonHandler+0xea>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L3);
    4bf8:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    4bfc:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    4c00:	40 e4       	ldi	r20, 0x40	; 64
    4c02:	50 e0       	ldi	r21, 0x00	; 0
    4c04:	60 e0       	ldi	r22, 0x00	; 0
    4c06:	70 e0       	ldi	r23, 0x00	; 0
    4c08:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
		}
		if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    4c0c:	83 e0       	ldi	r24, 0x03	; 3
    4c0e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>
    4c12:	88 23       	and	r24, r24
    4c14:	51 f4       	brne	.+20     	; 0x4c2a <vButtonHandler+0x108>
			xEventGroupSetBits(evButtonEvents, EVBUTTONS_L4);
    4c16:	80 91 66 35 	lds	r24, 0x3566	; 0x803566 <evButtonEvents>
    4c1a:	90 91 67 35 	lds	r25, 0x3567	; 0x803567 <evButtonEvents+0x1>
    4c1e:	40 e8       	ldi	r20, 0x80	; 128
    4c20:	50 e0       	ldi	r21, 0x00	; 0
    4c22:	60 e0       	ldi	r22, 0x00	; 0
    4c24:	70 e0       	ldi	r23, 0x00	; 0
    4c26:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
		}
		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS); //Buttonupdate Delay
    4c2a:	6a e0       	ldi	r22, 0x0A	; 10
    4c2c:	70 e0       	ldi	r23, 0x00	; 0
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	0e 94 11 14 	call	0x2822	; 0x2822 <vTaskDelay>
	}
    4c36:	7f cf       	rjmp	.-258    	; 0x4b36 <vButtonHandler+0x14>

00004c38 <vLedBlink>:
}

/***************************************************************************************************
*                                      LedBlink Handler to let LED's blink when Alarm enabled
***************************************************************************************************/
void vLedBlink(void *pvParameters) {
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	00 d0       	rcall	.+0      	; 0x4c3e <vLedBlink+0x6>
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
    4c42:	8a 83       	std	Y+2, r24	; 0x02
    4c44:	9b 83       	std	Y+3, r25	; 0x03
	(void) pvParameters;
	//Initialize LED's
	PORTF.DIRSET = 0x0F;
    4c46:	80 ea       	ldi	r24, 0xA0	; 160
    4c48:	96 e0       	ldi	r25, 0x06	; 6
    4c4a:	2f e0       	ldi	r18, 0x0F	; 15
    4c4c:	fc 01       	movw	r30, r24
    4c4e:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRSET = 0x0F;
    4c50:	80 e8       	ldi	r24, 0x80	; 128
    4c52:	96 e0       	ldi	r25, 0x06	; 6
    4c54:	2f e0       	ldi	r18, 0x0F	; 15
    4c56:	fc 01       	movw	r30, r24
    4c58:	21 83       	std	Z+1, r18	; 0x01
	PORTF.OUT = 0x0F;
    4c5a:	80 ea       	ldi	r24, 0xA0	; 160
    4c5c:	96 e0       	ldi	r25, 0x06	; 6
    4c5e:	2f e0       	ldi	r18, 0x0F	; 15
    4c60:	fc 01       	movw	r30, r24
    4c62:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT = 0x0F;
    4c64:	80 e8       	ldi	r24, 0x80	; 128
    4c66:	96 e0       	ldi	r25, 0x06	; 6
    4c68:	2f e0       	ldi	r18, 0x0F	; 15
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	24 83       	std	Z+4, r18	; 0x04
	uint8_t blinkstate = 0;
    4c6e:	19 82       	std	Y+1, r1	; 0x01
	for(;;) {
		if(xEventGroupGetBits(evSystemState) & EV_ALARM_ON) {
    4c70:	80 91 68 35 	lds	r24, 0x3568	; 0x803568 <evSystemState>
    4c74:	90 91 69 35 	lds	r25, 0x3569	; 0x803569 <evSystemState+0x1>
    4c78:	40 e0       	ldi	r20, 0x00	; 0
    4c7a:	50 e0       	ldi	r21, 0x00	; 0
    4c7c:	ba 01       	movw	r22, r20
    4c7e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <xEventGroupClearBits>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	81 70       	andi	r24, 0x01	; 1
    4c88:	99 27       	eor	r25, r25
    4c8a:	aa 27       	eor	r26, r26
    4c8c:	bb 27       	eor	r27, r27
    4c8e:	89 2b       	or	r24, r25
    4c90:	8a 2b       	or	r24, r26
    4c92:	8b 2b       	or	r24, r27
    4c94:	e9 f0       	breq	.+58     	; 0x4cd0 <vLedBlink+0x98>
			//When Alarm is activated, LEDS shall blink
			blinkstate ^=0x01; //toggle Alarm helper variable to let LED's blink
    4c96:	99 81       	ldd	r25, Y+1	; 0x01
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	89 27       	eor	r24, r25
    4c9c:	89 83       	std	Y+1, r24	; 0x01
			if(blinkstate == 0) {
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	88 23       	and	r24, r24
    4ca2:	59 f4       	brne	.+22     	; 0x4cba <vLedBlink+0x82>
				PORTF.OUTSET = 0x0F;
    4ca4:	80 ea       	ldi	r24, 0xA0	; 160
    4ca6:	96 e0       	ldi	r25, 0x06	; 6
    4ca8:	2f e0       	ldi	r18, 0x0F	; 15
    4caa:	fc 01       	movw	r30, r24
    4cac:	25 83       	std	Z+5, r18	; 0x05
				PORTE.OUTCLR = 0x0F;
    4cae:	80 e8       	ldi	r24, 0x80	; 128
    4cb0:	96 e0       	ldi	r25, 0x06	; 6
    4cb2:	2f e0       	ldi	r18, 0x0F	; 15
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	26 83       	std	Z+6, r18	; 0x06
    4cb8:	15 c0       	rjmp	.+42     	; 0x4ce4 <vLedBlink+0xac>
			} else {
				PORTF.OUTCLR = 0x0F;
    4cba:	80 ea       	ldi	r24, 0xA0	; 160
    4cbc:	96 e0       	ldi	r25, 0x06	; 6
    4cbe:	2f e0       	ldi	r18, 0x0F	; 15
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	26 83       	std	Z+6, r18	; 0x06
				PORTE.OUTSET = 0x0F;	
    4cc4:	80 e8       	ldi	r24, 0x80	; 128
    4cc6:	96 e0       	ldi	r25, 0x06	; 6
    4cc8:	2f e0       	ldi	r18, 0x0F	; 15
    4cca:	fc 01       	movw	r30, r24
    4ccc:	25 83       	std	Z+5, r18	; 0x05
    4cce:	0a c0       	rjmp	.+20     	; 0x4ce4 <vLedBlink+0xac>
			}
			
		} else {
			// When Alarm State is off, disable LED's
			PORTF.OUT = 0x0F;
    4cd0:	80 ea       	ldi	r24, 0xA0	; 160
    4cd2:	96 e0       	ldi	r25, 0x06	; 6
    4cd4:	2f e0       	ldi	r18, 0x0F	; 15
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	24 83       	std	Z+4, r18	; 0x04
			PORTE.OUT = 0x0F;
    4cda:	80 e8       	ldi	r24, 0x80	; 128
    4cdc:	96 e0       	ldi	r25, 0x06	; 6
    4cde:	2f e0       	ldi	r18, 0x0F	; 15
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	24 83       	std	Z+4, r18	; 0x04
		}
		vTaskDelay(100 / portTICK_RATE_MS); //Blink Delay
    4ce4:	64 e6       	ldi	r22, 0x64	; 100
    4ce6:	70 e0       	ldi	r23, 0x00	; 0
    4ce8:	80 e0       	ldi	r24, 0x00	; 0
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	0e 94 11 14 	call	0x2822	; 0x2822 <vTaskDelay>
	}
    4cf0:	bf cf       	rjmp	.-130    	; 0x4c70 <vLedBlink+0x38>

00004cf2 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    4cf2:	1f 92       	push	r1
    4cf4:	0f 92       	push	r0
    4cf6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    4cfa:	0f 92       	push	r0
    4cfc:	11 24       	eor	r1, r1
    4cfe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    4d02:	0f 92       	push	r0
    4d04:	2f 93       	push	r18
    4d06:	3f 93       	push	r19
    4d08:	4f 93       	push	r20
    4d0a:	5f 93       	push	r21
    4d0c:	6f 93       	push	r22
    4d0e:	7f 93       	push	r23
    4d10:	8f 93       	push	r24
    4d12:	9f 93       	push	r25
    4d14:	af 93       	push	r26
    4d16:	bf 93       	push	r27
    4d18:	ef 93       	push	r30
    4d1a:	ff 93       	push	r31
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	1f 92       	push	r1
    4d22:	cd b7       	in	r28, 0x3d	; 61
    4d24:	de b7       	in	r29, 0x3e	; 62
    4d26:	19 82       	std	Y+1, r1	; 0x01
    4d28:	80 91 6c 35 	lds	r24, 0x356C	; 0x80356c <egDisplayTiming>
    4d2c:	90 91 6d 35 	lds	r25, 0x356D	; 0x80356d <egDisplayTiming+0x1>
    4d30:	9e 01       	movw	r18, r28
    4d32:	2f 5f       	subi	r18, 0xFF	; 255
    4d34:	3f 4f       	sbci	r19, 0xFF	; 255
    4d36:	41 e0       	ldi	r20, 0x01	; 1
    4d38:	50 e0       	ldi	r21, 0x00	; 0
    4d3a:	60 e0       	ldi	r22, 0x00	; 0
    4d3c:	70 e0       	ldi	r23, 0x00	; 0
    4d3e:	0e 94 0c 07 	call	0xe18	; 0xe18 <xEventGroupSetBitsFromISR>
    4d42:	60 e0       	ldi	r22, 0x00	; 0
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	9b e0       	ldi	r25, 0x0B	; 11
    4d48:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <TC0_ConfigClockSource>
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	9b e0       	ldi	r25, 0x0B	; 11
    4d50:	fc 01       	movw	r30, r24
    4d52:	16 82       	std	Z+6, r1	; 0x06
    4d54:	00 00       	nop
    4d56:	0f 90       	pop	r0
    4d58:	df 91       	pop	r29
    4d5a:	cf 91       	pop	r28
    4d5c:	ff 91       	pop	r31
    4d5e:	ef 91       	pop	r30
    4d60:	bf 91       	pop	r27
    4d62:	af 91       	pop	r26
    4d64:	9f 91       	pop	r25
    4d66:	8f 91       	pop	r24
    4d68:	7f 91       	pop	r23
    4d6a:	6f 91       	pop	r22
    4d6c:	5f 91       	pop	r21
    4d6e:	4f 91       	pop	r20
    4d70:	3f 91       	pop	r19
    4d72:	2f 91       	pop	r18
    4d74:	0f 90       	pop	r0
    4d76:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    4d7a:	0f 90       	pop	r0
    4d7c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    4d80:	0f 90       	pop	r0
    4d82:	1f 90       	pop	r1
    4d84:	18 95       	reti

00004d86 <delayUS>:
    4d86:	cf 92       	push	r12
    4d88:	df 92       	push	r13
    4d8a:	ef 92       	push	r14
    4d8c:	ff 92       	push	r15
    4d8e:	0f 93       	push	r16
    4d90:	cf 93       	push	r28
    4d92:	df 93       	push	r29
    4d94:	00 d0       	rcall	.+0      	; 0x4d96 <delayUS+0x10>
    4d96:	1f 92       	push	r1
    4d98:	cd b7       	in	r28, 0x3d	; 61
    4d9a:	de b7       	in	r29, 0x3e	; 62
    4d9c:	69 83       	std	Y+1, r22	; 0x01
    4d9e:	7a 83       	std	Y+2, r23	; 0x02
    4da0:	8b 83       	std	Y+3, r24	; 0x03
    4da2:	9c 83       	std	Y+4, r25	; 0x04
    4da4:	89 81       	ldd	r24, Y+1	; 0x01
    4da6:	9a 81       	ldd	r25, Y+2	; 0x02
    4da8:	ab 81       	ldd	r26, Y+3	; 0x03
    4daa:	bc 81       	ldd	r27, Y+4	; 0x04
    4dac:	02 97       	sbiw	r24, 0x02	; 2
    4dae:	a1 05       	cpc	r26, r1
    4db0:	b1 05       	cpc	r27, r1
    4db2:	40 f4       	brcc	.+16     	; 0x4dc4 <delayUS+0x3e>
    4db4:	82 e0       	ldi	r24, 0x02	; 2
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	a0 e0       	ldi	r26, 0x00	; 0
    4dba:	b0 e0       	ldi	r27, 0x00	; 0
    4dbc:	89 83       	std	Y+1, r24	; 0x01
    4dbe:	9a 83       	std	Y+2, r25	; 0x02
    4dc0:	ab 83       	std	Y+3, r26	; 0x03
    4dc2:	bc 83       	std	Y+4, r27	; 0x04
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	9b e0       	ldi	r25, 0x0B	; 11
    4dc8:	21 e0       	ldi	r18, 0x01	; 1
    4dca:	fc 01       	movw	r30, r24
    4dcc:	26 83       	std	Z+6, r18	; 0x06
    4dce:	80 e0       	ldi	r24, 0x00	; 0
    4dd0:	9b e0       	ldi	r25, 0x0B	; 11
    4dd2:	fc 01       	movw	r30, r24
    4dd4:	10 a2       	std	Z+32, r1	; 0x20
    4dd6:	11 a2       	std	Z+33, r1	; 0x21
    4dd8:	60 e0       	ldi	r22, 0x00	; 0
    4dda:	80 e0       	ldi	r24, 0x00	; 0
    4ddc:	9b e0       	ldi	r25, 0x0B	; 11
    4dde:	0e 94 77 03 	call	0x6ee	; 0x6ee <TC0_ConfigWGM>
    4de2:	89 81       	ldd	r24, Y+1	; 0x01
    4de4:	9a 81       	ldd	r25, Y+2	; 0x02
    4de6:	ab 81       	ldd	r26, Y+3	; 0x03
    4de8:	bc 81       	ldd	r27, Y+4	; 0x04
    4dea:	8e 3f       	cpi	r24, 0xFE	; 254
    4dec:	9f 4f       	sbci	r25, 0xFF	; 255
    4dee:	a1 05       	cpc	r26, r1
    4df0:	b1 05       	cpc	r27, r1
    4df2:	98 f4       	brcc	.+38     	; 0x4e1a <delayUS+0x94>
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	3b e0       	ldi	r19, 0x0B	; 11
    4df8:	89 81       	ldd	r24, Y+1	; 0x01
    4dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfc:	ab 81       	ldd	r26, Y+3	; 0x03
    4dfe:	bc 81       	ldd	r27, Y+4	; 0x04
    4e00:	b6 95       	lsr	r27
    4e02:	a7 95       	ror	r26
    4e04:	97 95       	ror	r25
    4e06:	87 95       	ror	r24
    4e08:	f9 01       	movw	r30, r18
    4e0a:	86 a3       	std	Z+38, r24	; 0x26
    4e0c:	97 a3       	std	Z+39, r25	; 0x27
    4e0e:	65 e0       	ldi	r22, 0x05	; 5
    4e10:	80 e0       	ldi	r24, 0x00	; 0
    4e12:	9b e0       	ldi	r25, 0x0B	; 11
    4e14:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <TC0_ConfigClockSource>
    4e18:	1f c0       	rjmp	.+62     	; 0x4e58 <delayUS+0xd2>
    4e1a:	89 81       	ldd	r24, Y+1	; 0x01
    4e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1e:	ab 81       	ldd	r26, Y+3	; 0x03
    4e20:	bc 81       	ldd	r27, Y+4	; 0x04
    4e22:	80 34       	cpi	r24, 0x40	; 64
    4e24:	92 44       	sbci	r25, 0x42	; 66
    4e26:	af 40       	sbci	r26, 0x0F	; 15
    4e28:	b1 05       	cpc	r27, r1
    4e2a:	b0 f4       	brcc	.+44     	; 0x4e58 <delayUS+0xd2>
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	3b e0       	ldi	r19, 0x0B	; 11
    4e30:	89 81       	ldd	r24, Y+1	; 0x01
    4e32:	9a 81       	ldd	r25, Y+2	; 0x02
    4e34:	ab 81       	ldd	r26, Y+3	; 0x03
    4e36:	bc 81       	ldd	r27, Y+4	; 0x04
    4e38:	68 94       	set
    4e3a:	14 f8       	bld	r1, 4
    4e3c:	b6 95       	lsr	r27
    4e3e:	a7 95       	ror	r26
    4e40:	97 95       	ror	r25
    4e42:	87 95       	ror	r24
    4e44:	16 94       	lsr	r1
    4e46:	d1 f7       	brne	.-12     	; 0x4e3c <delayUS+0xb6>
    4e48:	f9 01       	movw	r30, r18
    4e4a:	86 a3       	std	Z+38, r24	; 0x26
    4e4c:	97 a3       	std	Z+39, r25	; 0x27
    4e4e:	67 e0       	ldi	r22, 0x07	; 7
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	9b e0       	ldi	r25, 0x0B	; 11
    4e54:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <TC0_ConfigClockSource>
    4e58:	80 91 6c 35 	lds	r24, 0x356C	; 0x80356c <egDisplayTiming>
    4e5c:	90 91 6d 35 	lds	r25, 0x356D	; 0x80356d <egDisplayTiming+0x1>
    4e60:	0f 2e       	mov	r0, r31
    4e62:	f4 ef       	ldi	r31, 0xF4	; 244
    4e64:	cf 2e       	mov	r12, r31
    4e66:	dd 24       	eor	r13, r13
    4e68:	d3 94       	inc	r13
    4e6a:	e1 2c       	mov	r14, r1
    4e6c:	f1 2c       	mov	r15, r1
    4e6e:	f0 2d       	mov	r31, r0
    4e70:	00 e0       	ldi	r16, 0x00	; 0
    4e72:	21 e0       	ldi	r18, 0x01	; 1
    4e74:	41 e0       	ldi	r20, 0x01	; 1
    4e76:	50 e0       	ldi	r21, 0x00	; 0
    4e78:	60 e0       	ldi	r22, 0x00	; 0
    4e7a:	70 e0       	ldi	r23, 0x00	; 0
    4e7c:	0e 94 1c 04 	call	0x838	; 0x838 <xEventGroupWaitBits>
    4e80:	00 00       	nop
    4e82:	24 96       	adiw	r28, 0x04	; 4
    4e84:	cd bf       	out	0x3d, r28	; 61
    4e86:	de bf       	out	0x3e, r29	; 62
    4e88:	df 91       	pop	r29
    4e8a:	cf 91       	pop	r28
    4e8c:	0f 91       	pop	r16
    4e8e:	ff 90       	pop	r15
    4e90:	ef 90       	pop	r14
    4e92:	df 90       	pop	r13
    4e94:	cf 90       	pop	r12
    4e96:	08 95       	ret

00004e98 <setPort>:
    4e98:	cf 93       	push	r28
    4e9a:	df 93       	push	r29
    4e9c:	1f 92       	push	r1
    4e9e:	cd b7       	in	r28, 0x3d	; 61
    4ea0:	de b7       	in	r29, 0x3e	; 62
    4ea2:	89 83       	std	Y+1, r24	; 0x01
    4ea4:	89 81       	ldd	r24, Y+1	; 0x01
    4ea6:	8f 70       	andi	r24, 0x0F	; 15
    4ea8:	89 83       	std	Y+1, r24	; 0x01
    4eaa:	89 81       	ldd	r24, Y+1	; 0x01
    4eac:	82 95       	swap	r24
    4eae:	80 7f       	andi	r24, 0xF0	; 240
    4eb0:	89 83       	std	Y+1, r24	; 0x01
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	96 e0       	ldi	r25, 0x06	; 6
    4eb6:	20 e0       	ldi	r18, 0x00	; 0
    4eb8:	36 e0       	ldi	r19, 0x06	; 6
    4eba:	f9 01       	movw	r30, r18
    4ebc:	34 81       	ldd	r19, Z+4	; 0x04
    4ebe:	29 81       	ldd	r18, Y+1	; 0x01
    4ec0:	2f 60       	ori	r18, 0x0F	; 15
    4ec2:	23 23       	and	r18, r19
    4ec4:	fc 01       	movw	r30, r24
    4ec6:	24 83       	std	Z+4, r18	; 0x04
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	96 e0       	ldi	r25, 0x06	; 6
    4ecc:	20 e0       	ldi	r18, 0x00	; 0
    4ece:	36 e0       	ldi	r19, 0x06	; 6
    4ed0:	f9 01       	movw	r30, r18
    4ed2:	34 81       	ldd	r19, Z+4	; 0x04
    4ed4:	29 81       	ldd	r18, Y+1	; 0x01
    4ed6:	23 2b       	or	r18, r19
    4ed8:	fc 01       	movw	r30, r24
    4eda:	24 83       	std	Z+4, r18	; 0x04
    4edc:	00 00       	nop
    4ede:	0f 90       	pop	r0
    4ee0:	df 91       	pop	r29
    4ee2:	cf 91       	pop	r28
    4ee4:	08 95       	ret

00004ee6 <setRS>:
    4ee6:	cf 93       	push	r28
    4ee8:	df 93       	push	r29
    4eea:	1f 92       	push	r1
    4eec:	cd b7       	in	r28, 0x3d	; 61
    4eee:	de b7       	in	r29, 0x3e	; 62
    4ef0:	89 83       	std	Y+1, r24	; 0x01
    4ef2:	89 81       	ldd	r24, Y+1	; 0x01
    4ef4:	88 23       	and	r24, r24
    4ef6:	31 f0       	breq	.+12     	; 0x4f04 <setRS+0x1e>
    4ef8:	80 e6       	ldi	r24, 0x60	; 96
    4efa:	96 e0       	ldi	r25, 0x06	; 6
    4efc:	21 e0       	ldi	r18, 0x01	; 1
    4efe:	fc 01       	movw	r30, r24
    4f00:	25 83       	std	Z+5, r18	; 0x05
    4f02:	05 c0       	rjmp	.+10     	; 0x4f0e <setRS+0x28>
    4f04:	80 e6       	ldi	r24, 0x60	; 96
    4f06:	96 e0       	ldi	r25, 0x06	; 6
    4f08:	21 e0       	ldi	r18, 0x01	; 1
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	26 83       	std	Z+6, r18	; 0x06
    4f0e:	00 00       	nop
    4f10:	0f 90       	pop	r0
    4f12:	df 91       	pop	r29
    4f14:	cf 91       	pop	r28
    4f16:	08 95       	ret

00004f18 <setRW>:
    4f18:	cf 93       	push	r28
    4f1a:	df 93       	push	r29
    4f1c:	1f 92       	push	r1
    4f1e:	cd b7       	in	r28, 0x3d	; 61
    4f20:	de b7       	in	r29, 0x3e	; 62
    4f22:	89 83       	std	Y+1, r24	; 0x01
    4f24:	89 81       	ldd	r24, Y+1	; 0x01
    4f26:	88 23       	and	r24, r24
    4f28:	31 f0       	breq	.+12     	; 0x4f36 <setRW+0x1e>
    4f2a:	80 e6       	ldi	r24, 0x60	; 96
    4f2c:	96 e0       	ldi	r25, 0x06	; 6
    4f2e:	22 e0       	ldi	r18, 0x02	; 2
    4f30:	fc 01       	movw	r30, r24
    4f32:	25 83       	std	Z+5, r18	; 0x05
    4f34:	05 c0       	rjmp	.+10     	; 0x4f40 <setRW+0x28>
    4f36:	80 e6       	ldi	r24, 0x60	; 96
    4f38:	96 e0       	ldi	r25, 0x06	; 6
    4f3a:	22 e0       	ldi	r18, 0x02	; 2
    4f3c:	fc 01       	movw	r30, r24
    4f3e:	26 83       	std	Z+6, r18	; 0x06
    4f40:	00 00       	nop
    4f42:	0f 90       	pop	r0
    4f44:	df 91       	pop	r29
    4f46:	cf 91       	pop	r28
    4f48:	08 95       	ret

00004f4a <setE>:
    4f4a:	cf 93       	push	r28
    4f4c:	df 93       	push	r29
    4f4e:	1f 92       	push	r1
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    4f54:	89 83       	std	Y+1, r24	; 0x01
    4f56:	89 81       	ldd	r24, Y+1	; 0x01
    4f58:	88 23       	and	r24, r24
    4f5a:	31 f0       	breq	.+12     	; 0x4f68 <setE+0x1e>
    4f5c:	80 e6       	ldi	r24, 0x60	; 96
    4f5e:	96 e0       	ldi	r25, 0x06	; 6
    4f60:	24 e0       	ldi	r18, 0x04	; 4
    4f62:	fc 01       	movw	r30, r24
    4f64:	25 83       	std	Z+5, r18	; 0x05
    4f66:	05 c0       	rjmp	.+10     	; 0x4f72 <setE+0x28>
    4f68:	80 e6       	ldi	r24, 0x60	; 96
    4f6a:	96 e0       	ldi	r25, 0x06	; 6
    4f6c:	24 e0       	ldi	r18, 0x04	; 4
    4f6e:	fc 01       	movw	r30, r24
    4f70:	26 83       	std	Z+6, r18	; 0x06
    4f72:	00 00       	nop
    4f74:	0f 90       	pop	r0
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	08 95       	ret

00004f7c <Nybble>:
    4f7c:	cf 93       	push	r28
    4f7e:	df 93       	push	r29
    4f80:	cd b7       	in	r28, 0x3d	; 61
    4f82:	de b7       	in	r29, 0x3e	; 62
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <setE>
    4f8a:	61 e0       	ldi	r22, 0x01	; 1
    4f8c:	70 e0       	ldi	r23, 0x00	; 0
    4f8e:	80 e0       	ldi	r24, 0x00	; 0
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <delayUS>
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <setE>
    4f9c:	00 00       	nop
    4f9e:	df 91       	pop	r29
    4fa0:	cf 91       	pop	r28
    4fa2:	08 95       	ret

00004fa4 <command>:
    4fa4:	cf 93       	push	r28
    4fa6:	df 93       	push	r29
    4fa8:	1f 92       	push	r1
    4faa:	cd b7       	in	r28, 0x3d	; 61
    4fac:	de b7       	in	r29, 0x3e	; 62
    4fae:	89 83       	std	Y+1, r24	; 0x01
    4fb0:	89 81       	ldd	r24, Y+1	; 0x01
    4fb2:	82 95       	swap	r24
    4fb4:	8f 70       	andi	r24, 0x0F	; 15
    4fb6:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <setPort>
    4fba:	80 e0       	ldi	r24, 0x00	; 0
    4fbc:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <setRS>
    4fc0:	80 e0       	ldi	r24, 0x00	; 0
    4fc2:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <setRW>
    4fc6:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <Nybble>
    4fca:	89 81       	ldd	r24, Y+1	; 0x01
    4fcc:	8f 70       	andi	r24, 0x0F	; 15
    4fce:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <setPort>
    4fd2:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <Nybble>
    4fd6:	00 00       	nop
    4fd8:	0f 90       	pop	r0
    4fda:	df 91       	pop	r29
    4fdc:	cf 91       	pop	r28
    4fde:	08 95       	ret

00004fe0 <write>:
    4fe0:	cf 93       	push	r28
    4fe2:	df 93       	push	r29
    4fe4:	1f 92       	push	r1
    4fe6:	cd b7       	in	r28, 0x3d	; 61
    4fe8:	de b7       	in	r29, 0x3e	; 62
    4fea:	89 83       	std	Y+1, r24	; 0x01
    4fec:	89 81       	ldd	r24, Y+1	; 0x01
    4fee:	82 95       	swap	r24
    4ff0:	8f 70       	andi	r24, 0x0F	; 15
    4ff2:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <setPort>
    4ff6:	81 e0       	ldi	r24, 0x01	; 1
    4ff8:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <setRS>
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <setRW>
    5002:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <Nybble>
    5006:	89 81       	ldd	r24, Y+1	; 0x01
    5008:	8f 70       	andi	r24, 0x0F	; 15
    500a:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <setPort>
    500e:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <Nybble>
    5012:	00 00       	nop
    5014:	0f 90       	pop	r0
    5016:	df 91       	pop	r29
    5018:	cf 91       	pop	r28
    501a:	08 95       	ret

0000501c <vInitDisplay>:
 
 void vInitDisplay() {
    501c:	ef 92       	push	r14
    501e:	ff 92       	push	r15
    5020:	0f 93       	push	r16
    5022:	cf 93       	push	r28
    5024:	df 93       	push	r29
    5026:	cd b7       	in	r28, 0x3d	; 61
    5028:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    502a:	80 e0       	ldi	r24, 0x00	; 0
    502c:	96 e0       	ldi	r25, 0x06	; 6
    502e:	20 e1       	ldi	r18, 0x10	; 16
    5030:	fc 01       	movw	r30, r24
    5032:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	96 e0       	ldi	r25, 0x06	; 6
    5038:	20 e2       	ldi	r18, 0x20	; 32
    503a:	fc 01       	movw	r30, r24
    503c:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    503e:	80 e0       	ldi	r24, 0x00	; 0
    5040:	96 e0       	ldi	r25, 0x06	; 6
    5042:	20 e4       	ldi	r18, 0x40	; 64
    5044:	fc 01       	movw	r30, r24
    5046:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    5048:	80 e0       	ldi	r24, 0x00	; 0
    504a:	96 e0       	ldi	r25, 0x06	; 6
    504c:	20 e8       	ldi	r18, 0x80	; 128
    504e:	fc 01       	movw	r30, r24
    5050:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    5052:	80 e6       	ldi	r24, 0x60	; 96
    5054:	96 e0       	ldi	r25, 0x06	; 6
    5056:	21 e0       	ldi	r18, 0x01	; 1
    5058:	fc 01       	movw	r30, r24
    505a:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    505c:	80 e6       	ldi	r24, 0x60	; 96
    505e:	96 e0       	ldi	r25, 0x06	; 6
    5060:	22 e0       	ldi	r18, 0x02	; 2
    5062:	fc 01       	movw	r30, r24
    5064:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    5066:	80 e6       	ldi	r24, 0x60	; 96
    5068:	96 e0       	ldi	r25, 0x06	; 6
    506a:	24 e0       	ldi	r18, 0x04	; 4
    506c:	fc 01       	movw	r30, r24
    506e:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    5070:	80 e0       	ldi	r24, 0x00	; 0
    5072:	96 e0       	ldi	r25, 0x06	; 6
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	36 e0       	ldi	r19, 0x06	; 6
    5078:	f9 01       	movw	r30, r18
    507a:	24 81       	ldd	r18, Z+4	; 0x04
    507c:	2f 70       	andi	r18, 0x0F	; 15
    507e:	fc 01       	movw	r30, r24
    5080:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    5082:	80 e6       	ldi	r24, 0x60	; 96
    5084:	96 e0       	ldi	r25, 0x06	; 6
    5086:	20 e6       	ldi	r18, 0x60	; 96
    5088:	36 e0       	ldi	r19, 0x06	; 6
    508a:	f9 01       	movw	r30, r18
    508c:	24 81       	ldd	r18, Z+4	; 0x04
    508e:	28 7f       	andi	r18, 0xF8	; 248
    5090:	fc 01       	movw	r30, r24
    5092:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    5094:	40 e0       	ldi	r20, 0x00	; 0
    5096:	66 e1       	ldi	r22, 0x16	; 22
    5098:	88 e0       	ldi	r24, 0x08	; 8
    509a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <xQueueGenericCreate>
    509e:	80 93 6a 35 	sts	0x356A, r24	; 0x80356a <displayLineQueue>
    50a2:	90 93 6b 35 	sts	0x356B, r25	; 0x80356b <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    50a6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <xEventGroupCreate>
    50aa:	80 93 6c 35 	sts	0x356C, r24	; 0x80356c <egDisplayTiming>
    50ae:	90 93 6d 35 	sts	0x356D, r25	; 0x80356d <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    50b2:	e1 2c       	mov	r14, r1
    50b4:	f1 2c       	mov	r15, r1
    50b6:	01 e0       	ldi	r16, 0x01	; 1
    50b8:	20 e0       	ldi	r18, 0x00	; 0
    50ba:	30 e0       	ldi	r19, 0x00	; 0
    50bc:	4e e5       	ldi	r20, 0x5E	; 94
    50be:	51 e0       	ldi	r21, 0x01	; 1
    50c0:	63 e0       	ldi	r22, 0x03	; 3
    50c2:	71 e2       	ldi	r23, 0x21	; 33
    50c4:	8c e0       	ldi	r24, 0x0C	; 12
    50c6:	99 e2       	ldi	r25, 0x29	; 41
    50c8:	0e 94 86 11 	call	0x230c	; 0x230c <xTaskCreate>
 }
    50cc:	00 00       	nop
    50ce:	df 91       	pop	r29
    50d0:	cf 91       	pop	r28
    50d2:	0f 91       	pop	r16
    50d4:	ff 90       	pop	r15
    50d6:	ef 90       	pop	r14
    50d8:	08 95       	ret

000050da <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    50da:	cf 93       	push	r28
    50dc:	df 93       	push	r29
    50de:	00 d0       	rcall	.+0      	; 0x50e0 <_displaySetPos+0x6>
    50e0:	1f 92       	push	r1
    50e2:	cd b7       	in	r28, 0x3d	; 61
    50e4:	de b7       	in	r29, 0x3e	; 62
    50e6:	89 83       	std	Y+1, r24	; 0x01
    50e8:	9a 83       	std	Y+2, r25	; 0x02
    50ea:	6b 83       	std	Y+3, r22	; 0x03
    50ec:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    50ee:	89 81       	ldd	r24, Y+1	; 0x01
    50f0:	9a 81       	ldd	r25, Y+2	; 0x02
    50f2:	81 30       	cpi	r24, 0x01	; 1
    50f4:	91 05       	cpc	r25, r1
    50f6:	89 f0       	breq	.+34     	; 0x511a <_displaySetPos+0x40>
    50f8:	82 30       	cpi	r24, 0x02	; 2
    50fa:	91 05       	cpc	r25, r1
    50fc:	1c f4       	brge	.+6      	; 0x5104 <_displaySetPos+0x2a>
    50fe:	89 2b       	or	r24, r25
    5100:	39 f0       	breq	.+14     	; 0x5110 <_displaySetPos+0x36>
    5102:	1a c0       	rjmp	.+52     	; 0x5138 <_displaySetPos+0x5e>
    5104:	82 30       	cpi	r24, 0x02	; 2
    5106:	91 05       	cpc	r25, r1
    5108:	69 f0       	breq	.+26     	; 0x5124 <_displaySetPos+0x4a>
    510a:	03 97       	sbiw	r24, 0x03	; 3
    510c:	81 f0       	breq	.+32     	; 0x512e <_displaySetPos+0x54>
    510e:	14 c0       	rjmp	.+40     	; 0x5138 <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    5110:	8b 81       	ldd	r24, Y+3	; 0x03
    5112:	80 58       	subi	r24, 0x80	; 128
    5114:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <command>
		 break;
    5118:	0f c0       	rjmp	.+30     	; 0x5138 <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    511a:	8b 81       	ldd	r24, Y+3	; 0x03
    511c:	80 54       	subi	r24, 0x40	; 64
    511e:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <command>
		 break;
    5122:	0a c0       	rjmp	.+20     	; 0x5138 <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    5124:	8b 81       	ldd	r24, Y+3	; 0x03
    5126:	8c 56       	subi	r24, 0x6C	; 108
    5128:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <command>
		 break;
    512c:	05 c0       	rjmp	.+10     	; 0x5138 <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    512e:	8b 81       	ldd	r24, Y+3	; 0x03
    5130:	8c 52       	subi	r24, 0x2C	; 44
    5132:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <command>
		 break;
    5136:	00 00       	nop
	 }
	 delayUS(39);
    5138:	67 e2       	ldi	r22, 0x27	; 39
    513a:	70 e0       	ldi	r23, 0x00	; 0
    513c:	80 e0       	ldi	r24, 0x00	; 0
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <delayUS>
 }
    5144:	00 00       	nop
    5146:	24 96       	adiw	r28, 0x04	; 4
    5148:	cd bf       	out	0x3d, r28	; 61
    514a:	de bf       	out	0x3e, r29	; 62
    514c:	df 91       	pop	r29
    514e:	cf 91       	pop	r28
    5150:	08 95       	ret

00005152 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    5152:	cf 93       	push	r28
    5154:	df 93       	push	r29
    5156:	1f 92       	push	r1
    5158:	cd b7       	in	r28, 0x3d	; 61
    515a:	de b7       	in	r29, 0x3e	; 62
    515c:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    515e:	89 81       	ldd	r24, Y+1	; 0x01
    5160:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <write>
	 delayUS(43);
    5164:	6b e2       	ldi	r22, 0x2B	; 43
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	80 e0       	ldi	r24, 0x00	; 0
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <delayUS>
 }
    5170:	00 00       	nop
    5172:	0f 90       	pop	r0
    5174:	df 91       	pop	r29
    5176:	cf 91       	pop	r28
    5178:	08 95       	ret

0000517a <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    517a:	cf 93       	push	r28
    517c:	df 93       	push	r29
    517e:	00 d0       	rcall	.+0      	; 0x5180 <_displayWriteString+0x6>
    5180:	1f 92       	push	r1
    5182:	cd b7       	in	r28, 0x3d	; 61
    5184:	de b7       	in	r29, 0x3e	; 62
    5186:	8b 83       	std	Y+3, r24	; 0x03
    5188:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    518a:	19 82       	std	Y+1, r1	; 0x01
    518c:	1a 82       	std	Y+2, r1	; 0x02
    518e:	19 c0       	rjmp	.+50     	; 0x51c2 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    5190:	89 81       	ldd	r24, Y+1	; 0x01
    5192:	9a 81       	ldd	r25, Y+2	; 0x02
    5194:	2b 81       	ldd	r18, Y+3	; 0x03
    5196:	3c 81       	ldd	r19, Y+4	; 0x04
    5198:	82 0f       	add	r24, r18
    519a:	93 1f       	adc	r25, r19
    519c:	fc 01       	movw	r30, r24
    519e:	80 81       	ld	r24, Z
    51a0:	88 23       	and	r24, r24
    51a2:	a1 f0       	breq	.+40     	; 0x51cc <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    51a4:	89 81       	ldd	r24, Y+1	; 0x01
    51a6:	9a 81       	ldd	r25, Y+2	; 0x02
    51a8:	2b 81       	ldd	r18, Y+3	; 0x03
    51aa:	3c 81       	ldd	r19, Y+4	; 0x04
    51ac:	82 0f       	add	r24, r18
    51ae:	93 1f       	adc	r25, r19
    51b0:	fc 01       	movw	r30, r24
    51b2:	80 81       	ld	r24, Z
    51b4:	0e 94 a9 28 	call	0x5152	; 0x5152 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    51b8:	89 81       	ldd	r24, Y+1	; 0x01
    51ba:	9a 81       	ldd	r25, Y+2	; 0x02
    51bc:	01 96       	adiw	r24, 0x01	; 1
    51be:	89 83       	std	Y+1, r24	; 0x01
    51c0:	9a 83       	std	Y+2, r25	; 0x02
    51c2:	89 81       	ldd	r24, Y+1	; 0x01
    51c4:	9a 81       	ldd	r25, Y+2	; 0x02
    51c6:	44 97       	sbiw	r24, 0x14	; 20
    51c8:	1c f3       	brlt	.-58     	; 0x5190 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    51ca:	01 c0       	rjmp	.+2      	; 0x51ce <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    51cc:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    51ce:	00 00       	nop
    51d0:	24 96       	adiw	r28, 0x04	; 4
    51d2:	cd bf       	out	0x3d, r28	; 61
    51d4:	de bf       	out	0x3e, r29	; 62
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	08 95       	ret

000051dc <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    51dc:	cf 93       	push	r28
    51de:	df 93       	push	r29
    51e0:	00 d0       	rcall	.+0      	; 0x51e2 <_displayWriteStringAtPos+0x6>
    51e2:	00 d0       	rcall	.+0      	; 0x51e4 <_displayWriteStringAtPos+0x8>
    51e4:	cd b7       	in	r28, 0x3d	; 61
    51e6:	de b7       	in	r29, 0x3e	; 62
    51e8:	89 83       	std	Y+1, r24	; 0x01
    51ea:	9a 83       	std	Y+2, r25	; 0x02
    51ec:	6b 83       	std	Y+3, r22	; 0x03
    51ee:	7c 83       	std	Y+4, r23	; 0x04
    51f0:	4d 83       	std	Y+5, r20	; 0x05
    51f2:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    51f4:	2b 81       	ldd	r18, Y+3	; 0x03
    51f6:	3c 81       	ldd	r19, Y+4	; 0x04
    51f8:	89 81       	ldd	r24, Y+1	; 0x01
    51fa:	9a 81       	ldd	r25, Y+2	; 0x02
    51fc:	b9 01       	movw	r22, r18
    51fe:	0e 94 6d 28 	call	0x50da	; 0x50da <_displaySetPos>
	 _displayWriteString(s);
    5202:	8d 81       	ldd	r24, Y+5	; 0x05
    5204:	9e 81       	ldd	r25, Y+6	; 0x06
    5206:	0e 94 bd 28 	call	0x517a	; 0x517a <_displayWriteString>
 }
    520a:	00 00       	nop
    520c:	26 96       	adiw	r28, 0x06	; 6
    520e:	cd bf       	out	0x3d, r28	; 61
    5210:	de bf       	out	0x3e, r29	; 62
    5212:	df 91       	pop	r29
    5214:	cf 91       	pop	r28
    5216:	08 95       	ret

00005218 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    5218:	cf 93       	push	r28
    521a:	df 93       	push	r29
    521c:	cd b7       	in	r28, 0x3d	; 61
    521e:	de b7       	in	r29, 0x3e	; 62
    5220:	c0 57       	subi	r28, 0x70	; 112
    5222:	d1 09       	sbc	r29, r1
    5224:	cd bf       	out	0x3d, r28	; 61
    5226:	de bf       	out	0x3e, r29	; 62
    5228:	9e 01       	movw	r18, r28
    522a:	21 59       	subi	r18, 0x91	; 145
    522c:	3f 4f       	sbci	r19, 0xFF	; 255
    522e:	f9 01       	movw	r30, r18
    5230:	80 83       	st	Z, r24
    5232:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    5234:	19 82       	std	Y+1, r1	; 0x01
    5236:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    5238:	1b 82       	std	Y+3, r1	; 0x03
    523a:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    523c:	1d 82       	std	Y+5, r1	; 0x05
    523e:	1e 82       	std	Y+6, r1	; 0x06
    5240:	26 c0       	rjmp	.+76     	; 0x528e <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    5242:	1f 82       	std	Y+7, r1	; 0x07
    5244:	18 86       	std	Y+8, r1	; 0x08
    5246:	1a c0       	rjmp	.+52     	; 0x527c <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    5248:	2d 81       	ldd	r18, Y+5	; 0x05
    524a:	3e 81       	ldd	r19, Y+6	; 0x06
    524c:	44 e1       	ldi	r20, 0x14	; 20
    524e:	42 9f       	mul	r20, r18
    5250:	c0 01       	movw	r24, r0
    5252:	43 9f       	mul	r20, r19
    5254:	90 0d       	add	r25, r0
    5256:	11 24       	eor	r1, r1
    5258:	9e 01       	movw	r18, r28
    525a:	2f 5f       	subi	r18, 0xFF	; 255
    525c:	3f 4f       	sbci	r19, 0xFF	; 255
    525e:	28 0f       	add	r18, r24
    5260:	39 1f       	adc	r19, r25
    5262:	8f 81       	ldd	r24, Y+7	; 0x07
    5264:	98 85       	ldd	r25, Y+8	; 0x08
    5266:	82 0f       	add	r24, r18
    5268:	93 1f       	adc	r25, r19
    526a:	08 96       	adiw	r24, 0x08	; 8
    526c:	20 e2       	ldi	r18, 0x20	; 32
    526e:	fc 01       	movw	r30, r24
    5270:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    5272:	8f 81       	ldd	r24, Y+7	; 0x07
    5274:	98 85       	ldd	r25, Y+8	; 0x08
    5276:	01 96       	adiw	r24, 0x01	; 1
    5278:	8f 83       	std	Y+7, r24	; 0x07
    527a:	98 87       	std	Y+8, r25	; 0x08
    527c:	8f 81       	ldd	r24, Y+7	; 0x07
    527e:	98 85       	ldd	r25, Y+8	; 0x08
    5280:	44 97       	sbiw	r24, 0x14	; 20
    5282:	14 f3       	brlt	.-60     	; 0x5248 <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    5284:	8d 81       	ldd	r24, Y+5	; 0x05
    5286:	9e 81       	ldd	r25, Y+6	; 0x06
    5288:	01 96       	adiw	r24, 0x01	; 1
    528a:	8d 83       	std	Y+5, r24	; 0x05
    528c:	9e 83       	std	Y+6, r25	; 0x06
    528e:	8d 81       	ldd	r24, Y+5	; 0x05
    5290:	9e 81       	ldd	r25, Y+6	; 0x06
    5292:	04 97       	sbiw	r24, 0x04	; 4
    5294:	b4 f2       	brlt	.-84     	; 0x5242 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    5296:	60 e4       	ldi	r22, 0x40	; 64
    5298:	7c e9       	ldi	r23, 0x9C	; 156
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <delayUS>
	 setPort(0x03);
    52a2:	83 e0       	ldi	r24, 0x03	; 3
    52a4:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <setPort>
	 delayUS(5000);
    52a8:	68 e8       	ldi	r22, 0x88	; 136
    52aa:	73 e1       	ldi	r23, 0x13	; 19
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <delayUS>
	 Nybble();
    52b4:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <Nybble>
	 delayUS(160);
    52b8:	60 ea       	ldi	r22, 0xA0	; 160
    52ba:	70 e0       	ldi	r23, 0x00	; 0
    52bc:	80 e0       	ldi	r24, 0x00	; 0
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <delayUS>
	 Nybble();
    52c4:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <Nybble>
	 delayUS(160);
    52c8:	60 ea       	ldi	r22, 0xA0	; 160
    52ca:	70 e0       	ldi	r23, 0x00	; 0
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <delayUS>
	 Nybble();
    52d4:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <Nybble>
	 delayUS(160);
    52d8:	60 ea       	ldi	r22, 0xA0	; 160
    52da:	70 e0       	ldi	r23, 0x00	; 0
    52dc:	80 e0       	ldi	r24, 0x00	; 0
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <delayUS>
	 setPort(0x02);
    52e4:	82 e0       	ldi	r24, 0x02	; 2
    52e6:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <setPort>
	 Nybble();
    52ea:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <Nybble>
	 command(0x28);
    52ee:	88 e2       	ldi	r24, 0x28	; 40
    52f0:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <command>
	 command(0x10);
    52f4:	80 e1       	ldi	r24, 0x10	; 16
    52f6:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <command>
	 command(0x0C); //Cursor and Blinking off
    52fa:	8c e0       	ldi	r24, 0x0C	; 12
    52fc:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <command>
	 command(0x06);
    5300:	86 e0       	ldi	r24, 0x06	; 6
    5302:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    5306:	68 ec       	ldi	r22, 0xC8	; 200
    5308:	70 e0       	ldi	r23, 0x00	; 0
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	0e 94 11 14 	call	0x2822	; 0x2822 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    5312:	80 91 6c 35 	lds	r24, 0x356C	; 0x80356c <egDisplayTiming>
    5316:	90 91 6d 35 	lds	r25, 0x356D	; 0x80356d <egDisplayTiming+0x1>
    531a:	40 e0       	ldi	r20, 0x00	; 0
    531c:	50 e0       	ldi	r21, 0x00	; 0
    531e:	ba 01       	movw	r22, r20
    5320:	0e 94 54 05 	call	0xaa8	; 0xaa8 <xEventGroupClearBits>
    5324:	dc 01       	movw	r26, r24
    5326:	cb 01       	movw	r24, r22
    5328:	89 2b       	or	r24, r25
    532a:	8a 2b       	or	r24, r26
    532c:	8b 2b       	or	r24, r27
    532e:	09 f4       	brne	.+2      	; 0x5332 <vDisplayUpdateTask+0x11a>
    5330:	96 c0       	rjmp	.+300    	; 0x545e <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    5332:	80 91 6c 35 	lds	r24, 0x356C	; 0x80356c <egDisplayTiming>
    5336:	90 91 6d 35 	lds	r25, 0x356D	; 0x80356d <egDisplayTiming+0x1>
    533a:	42 e0       	ldi	r20, 0x02	; 2
    533c:	50 e0       	ldi	r21, 0x00	; 0
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	70 e0       	ldi	r23, 0x00	; 0
    5342:	0e 94 54 05 	call	0xaa8	; 0xaa8 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    5346:	19 82       	std	Y+1, r1	; 0x01
    5348:	1a 82       	std	Y+2, r1	; 0x02
    534a:	26 c0       	rjmp	.+76     	; 0x5398 <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    534c:	1b 82       	std	Y+3, r1	; 0x03
    534e:	1c 82       	std	Y+4, r1	; 0x04
    5350:	1a c0       	rjmp	.+52     	; 0x5386 <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    5352:	29 81       	ldd	r18, Y+1	; 0x01
    5354:	3a 81       	ldd	r19, Y+2	; 0x02
    5356:	44 e1       	ldi	r20, 0x14	; 20
    5358:	42 9f       	mul	r20, r18
    535a:	c0 01       	movw	r24, r0
    535c:	43 9f       	mul	r20, r19
    535e:	90 0d       	add	r25, r0
    5360:	11 24       	eor	r1, r1
    5362:	9e 01       	movw	r18, r28
    5364:	2f 5f       	subi	r18, 0xFF	; 255
    5366:	3f 4f       	sbci	r19, 0xFF	; 255
    5368:	28 0f       	add	r18, r24
    536a:	39 1f       	adc	r19, r25
    536c:	8b 81       	ldd	r24, Y+3	; 0x03
    536e:	9c 81       	ldd	r25, Y+4	; 0x04
    5370:	82 0f       	add	r24, r18
    5372:	93 1f       	adc	r25, r19
    5374:	08 96       	adiw	r24, 0x08	; 8
    5376:	20 e2       	ldi	r18, 0x20	; 32
    5378:	fc 01       	movw	r30, r24
    537a:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    537c:	8b 81       	ldd	r24, Y+3	; 0x03
    537e:	9c 81       	ldd	r25, Y+4	; 0x04
    5380:	01 96       	adiw	r24, 0x01	; 1
    5382:	8b 83       	std	Y+3, r24	; 0x03
    5384:	9c 83       	std	Y+4, r25	; 0x04
    5386:	8b 81       	ldd	r24, Y+3	; 0x03
    5388:	9c 81       	ldd	r25, Y+4	; 0x04
    538a:	44 97       	sbiw	r24, 0x14	; 20
    538c:	14 f3       	brlt	.-60     	; 0x5352 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	9a 81       	ldd	r25, Y+2	; 0x02
    5392:	01 96       	adiw	r24, 0x01	; 1
    5394:	89 83       	std	Y+1, r24	; 0x01
    5396:	9a 83       	std	Y+2, r25	; 0x02
    5398:	89 81       	ldd	r24, Y+1	; 0x01
    539a:	9a 81       	ldd	r25, Y+2	; 0x02
    539c:	04 97       	sbiw	r24, 0x04	; 4
    539e:	b4 f2       	brlt	.-84     	; 0x534c <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    53a0:	5e c0       	rjmp	.+188    	; 0x545e <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    53a2:	80 91 6a 35 	lds	r24, 0x356A	; 0x80356a <displayLineQueue>
    53a6:	90 91 6b 35 	lds	r25, 0x356B	; 0x80356b <displayLineQueue+0x1>
    53aa:	be 01       	movw	r22, r28
    53ac:	67 5a       	subi	r22, 0xA7	; 167
    53ae:	7f 4f       	sbci	r23, 0xFF	; 255
    53b0:	2f ef       	ldi	r18, 0xFF	; 255
    53b2:	3f ef       	ldi	r19, 0xFF	; 255
    53b4:	a9 01       	movw	r20, r18
    53b6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <xQueueReceive>
    53ba:	88 23       	and	r24, r24
    53bc:	09 f4       	brne	.+2      	; 0x53c0 <vDisplayUpdateTask+0x1a8>
    53be:	4f c0       	rjmp	.+158    	; 0x545e <vDisplayUpdateTask+0x246>
				i=0;			
    53c0:	19 82       	std	Y+1, r1	; 0x01
    53c2:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    53c4:	32 c0       	rjmp	.+100    	; 0x542a <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    53c6:	ce 01       	movw	r24, r28
    53c8:	87 5a       	subi	r24, 0xA7	; 167
    53ca:	9f 4f       	sbci	r25, 0xFF	; 255
    53cc:	fc 01       	movw	r30, r24
    53ce:	80 81       	ld	r24, Z
    53d0:	48 2f       	mov	r20, r24
    53d2:	50 e0       	ldi	r21, 0x00	; 0
    53d4:	ce 01       	movw	r24, r28
    53d6:	87 5a       	subi	r24, 0xA7	; 167
    53d8:	9f 4f       	sbci	r25, 0xFF	; 255
    53da:	fc 01       	movw	r30, r24
    53dc:	81 81       	ldd	r24, Z+1	; 0x01
    53de:	28 2f       	mov	r18, r24
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	89 81       	ldd	r24, Y+1	; 0x01
    53e4:	9a 81       	ldd	r25, Y+2	; 0x02
    53e6:	82 0f       	add	r24, r18
    53e8:	93 1f       	adc	r25, r19
    53ea:	be 01       	movw	r22, r28
    53ec:	67 5a       	subi	r22, 0xA7	; 167
    53ee:	7f 4f       	sbci	r23, 0xFF	; 255
    53f0:	29 81       	ldd	r18, Y+1	; 0x01
    53f2:	3a 81       	ldd	r19, Y+2	; 0x02
    53f4:	26 0f       	add	r18, r22
    53f6:	37 1f       	adc	r19, r23
    53f8:	2e 5f       	subi	r18, 0xFE	; 254
    53fa:	3f 4f       	sbci	r19, 0xFF	; 255
    53fc:	f9 01       	movw	r30, r18
    53fe:	60 81       	ld	r22, Z
    5400:	74 e1       	ldi	r23, 0x14	; 20
    5402:	74 9f       	mul	r23, r20
    5404:	90 01       	movw	r18, r0
    5406:	75 9f       	mul	r23, r21
    5408:	30 0d       	add	r19, r0
    540a:	11 24       	eor	r1, r1
    540c:	ae 01       	movw	r20, r28
    540e:	4f 5f       	subi	r20, 0xFF	; 255
    5410:	5f 4f       	sbci	r21, 0xFF	; 255
    5412:	24 0f       	add	r18, r20
    5414:	35 1f       	adc	r19, r21
    5416:	82 0f       	add	r24, r18
    5418:	93 1f       	adc	r25, r19
    541a:	08 96       	adiw	r24, 0x08	; 8
    541c:	fc 01       	movw	r30, r24
    541e:	60 83       	st	Z, r22
					i++;
    5420:	89 81       	ldd	r24, Y+1	; 0x01
    5422:	9a 81       	ldd	r25, Y+2	; 0x02
    5424:	01 96       	adiw	r24, 0x01	; 1
    5426:	89 83       	std	Y+1, r24	; 0x01
    5428:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    542a:	ce 01       	movw	r24, r28
    542c:	87 5a       	subi	r24, 0xA7	; 167
    542e:	9f 4f       	sbci	r25, 0xFF	; 255
    5430:	fc 01       	movw	r30, r24
    5432:	81 81       	ldd	r24, Z+1	; 0x01
    5434:	28 2f       	mov	r18, r24
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	89 81       	ldd	r24, Y+1	; 0x01
    543a:	9a 81       	ldd	r25, Y+2	; 0x02
    543c:	82 0f       	add	r24, r18
    543e:	93 1f       	adc	r25, r19
    5440:	44 97       	sbiw	r24, 0x14	; 20
    5442:	6c f4       	brge	.+26     	; 0x545e <vDisplayUpdateTask+0x246>
    5444:	9e 01       	movw	r18, r28
    5446:	27 5a       	subi	r18, 0xA7	; 167
    5448:	3f 4f       	sbci	r19, 0xFF	; 255
    544a:	89 81       	ldd	r24, Y+1	; 0x01
    544c:	9a 81       	ldd	r25, Y+2	; 0x02
    544e:	82 0f       	add	r24, r18
    5450:	93 1f       	adc	r25, r19
    5452:	02 96       	adiw	r24, 0x02	; 2
    5454:	fc 01       	movw	r30, r24
    5456:	80 81       	ld	r24, Z
    5458:	88 23       	and	r24, r24
    545a:	09 f0       	breq	.+2      	; 0x545e <vDisplayUpdateTask+0x246>
    545c:	b4 cf       	rjmp	.-152    	; 0x53c6 <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    545e:	80 91 6a 35 	lds	r24, 0x356A	; 0x80356a <displayLineQueue>
    5462:	90 91 6b 35 	lds	r25, 0x356B	; 0x80356b <displayLineQueue+0x1>
    5466:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uxQueueMessagesWaiting>
    546a:	88 23       	and	r24, r24
    546c:	09 f0       	breq	.+2      	; 0x5470 <vDisplayUpdateTask+0x258>
    546e:	99 cf       	rjmp	.-206    	; 0x53a2 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    5470:	19 82       	std	Y+1, r1	; 0x01
    5472:	1a 82       	std	Y+2, r1	; 0x02
    5474:	19 c0       	rjmp	.+50     	; 0x54a8 <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    5476:	9e 01       	movw	r18, r28
    5478:	27 5f       	subi	r18, 0xF7	; 247
    547a:	3f 4f       	sbci	r19, 0xFF	; 255
    547c:	49 81       	ldd	r20, Y+1	; 0x01
    547e:	5a 81       	ldd	r21, Y+2	; 0x02
    5480:	64 e1       	ldi	r22, 0x14	; 20
    5482:	64 9f       	mul	r22, r20
    5484:	c0 01       	movw	r24, r0
    5486:	65 9f       	mul	r22, r21
    5488:	90 0d       	add	r25, r0
    548a:	11 24       	eor	r1, r1
    548c:	28 0f       	add	r18, r24
    548e:	39 1f       	adc	r19, r25
    5490:	89 81       	ldd	r24, Y+1	; 0x01
    5492:	9a 81       	ldd	r25, Y+2	; 0x02
    5494:	a9 01       	movw	r20, r18
    5496:	60 e0       	ldi	r22, 0x00	; 0
    5498:	70 e0       	ldi	r23, 0x00	; 0
    549a:	0e 94 ee 28 	call	0x51dc	; 0x51dc <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    549e:	89 81       	ldd	r24, Y+1	; 0x01
    54a0:	9a 81       	ldd	r25, Y+2	; 0x02
    54a2:	01 96       	adiw	r24, 0x01	; 1
    54a4:	89 83       	std	Y+1, r24	; 0x01
    54a6:	9a 83       	std	Y+2, r25	; 0x02
    54a8:	89 81       	ldd	r24, Y+1	; 0x01
    54aa:	9a 81       	ldd	r25, Y+2	; 0x02
    54ac:	04 97       	sbiw	r24, 0x04	; 4
    54ae:	1c f3       	brlt	.-58     	; 0x5476 <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    54b0:	2a cf       	rjmp	.-428    	; 0x5306 <vDisplayUpdateTask+0xee>

000054b2 <vDisplayClear>:
 }
 

void vDisplayClear() {
    54b2:	cf 93       	push	r28
    54b4:	df 93       	push	r29
    54b6:	cd b7       	in	r28, 0x3d	; 61
    54b8:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    54ba:	80 91 6c 35 	lds	r24, 0x356C	; 0x80356c <egDisplayTiming>
    54be:	90 91 6d 35 	lds	r25, 0x356D	; 0x80356d <egDisplayTiming+0x1>
    54c2:	42 e0       	ldi	r20, 0x02	; 2
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	60 e0       	ldi	r22, 0x00	; 0
    54c8:	70 e0       	ldi	r23, 0x00	; 0
    54ca:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xEventGroupSetBits>
}
    54ce:	00 00       	nop
    54d0:	df 91       	pop	r29
    54d2:	cf 91       	pop	r28
    54d4:	08 95       	ret

000054d6 <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29
    54da:	1f 92       	push	r1
    54dc:	1f 92       	push	r1
    54de:	cd b7       	in	r28, 0x3d	; 61
    54e0:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    54e2:	ce 01       	movw	r24, r28
    54e4:	0e 96       	adiw	r24, 0x0e	; 14
    54e6:	89 83       	std	Y+1, r24	; 0x01
    54e8:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    54ea:	29 81       	ldd	r18, Y+1	; 0x01
    54ec:	3a 81       	ldd	r19, Y+2	; 0x02
    54ee:	4c 85       	ldd	r20, Y+12	; 0x0c
    54f0:	5d 85       	ldd	r21, Y+13	; 0x0d
    54f2:	6a 85       	ldd	r22, Y+10	; 0x0a
    54f4:	7b 85       	ldd	r23, Y+11	; 0x0b
    54f6:	88 85       	ldd	r24, Y+8	; 0x08
    54f8:	99 85       	ldd	r25, Y+9	; 0x09
    54fa:	0e 94 85 2a 	call	0x550a	; 0x550a <display_vprintf>
	va_end(arg);	
}
    54fe:	00 00       	nop
    5500:	0f 90       	pop	r0
    5502:	0f 90       	pop	r0
    5504:	df 91       	pop	r29
    5506:	cf 91       	pop	r28
    5508:	08 95       	ret

0000550a <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    550a:	0f 93       	push	r16
    550c:	cf 93       	push	r28
    550e:	df 93       	push	r29
    5510:	cd b7       	in	r28, 0x3d	; 61
    5512:	de b7       	in	r29, 0x3e	; 62
    5514:	ec 97       	sbiw	r28, 0x3c	; 60
    5516:	cd bf       	out	0x3d, r28	; 61
    5518:	de bf       	out	0x3e, r29	; 62
    551a:	8d ab       	std	Y+53, r24	; 0x35
    551c:	9e ab       	std	Y+54, r25	; 0x36
    551e:	6f ab       	std	Y+55, r22	; 0x37
    5520:	78 af       	std	Y+56, r23	; 0x38
    5522:	49 af       	std	Y+57, r20	; 0x39
    5524:	5a af       	std	Y+58, r21	; 0x3a
    5526:	2b af       	std	Y+59, r18	; 0x3b
    5528:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    552a:	19 82       	std	Y+1, r1	; 0x01
    552c:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    552e:	1b 82       	std	Y+3, r1	; 0x03
    5530:	1c 82       	std	Y+4, r1	; 0x04
    5532:	0b c0       	rjmp	.+22     	; 0x554a <display_vprintf+0x40>
		buffer[i] = 0x00;
    5534:	8b 81       	ldd	r24, Y+3	; 0x03
    5536:	9c 81       	ldd	r25, Y+4	; 0x04
    5538:	87 5c       	subi	r24, 0xC7	; 199
    553a:	9a 4c       	sbci	r25, 0xCA	; 202
    553c:	fc 01       	movw	r30, r24
    553e:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    5540:	8b 81       	ldd	r24, Y+3	; 0x03
    5542:	9c 81       	ldd	r25, Y+4	; 0x04
    5544:	01 96       	adiw	r24, 0x01	; 1
    5546:	8b 83       	std	Y+3, r24	; 0x03
    5548:	9c 83       	std	Y+4, r25	; 0x04
    554a:	8b 81       	ldd	r24, Y+3	; 0x03
    554c:	9c 81       	ldd	r25, Y+4	; 0x04
    554e:	44 97       	sbiw	r24, 0x14	; 20
    5550:	8c f3       	brlt	.-30     	; 0x5534 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    5552:	1d 82       	std	Y+5, r1	; 0x05
    5554:	1e 82       	std	Y+6, r1	; 0x06
    5556:	0b c0       	rjmp	.+22     	; 0x556e <display_vprintf+0x64>
		str[i] = 0x00;
    5558:	8d 81       	ldd	r24, Y+5	; 0x05
    555a:	9e 81       	ldd	r25, Y+6	; 0x06
    555c:	83 5b       	subi	r24, 0xB3	; 179
    555e:	9a 4c       	sbci	r25, 0xCA	; 202
    5560:	fc 01       	movw	r30, r24
    5562:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    5564:	8d 81       	ldd	r24, Y+5	; 0x05
    5566:	9e 81       	ldd	r25, Y+6	; 0x06
    5568:	01 96       	adiw	r24, 0x01	; 1
    556a:	8d 83       	std	Y+5, r24	; 0x05
    556c:	9e 83       	std	Y+6, r25	; 0x06
    556e:	8d 81       	ldd	r24, Y+5	; 0x05
    5570:	9e 81       	ldd	r25, Y+6	; 0x06
    5572:	44 97       	sbiw	r24, 0x14	; 20
    5574:	8c f3       	brlt	.-30     	; 0x5558 <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    5576:	be c1       	rjmp	.+892    	; 0x58f4 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    5578:	8d 89       	ldd	r24, Y+21	; 0x15
    557a:	85 32       	cpi	r24, 0x25	; 37
    557c:	09 f0       	breq	.+2      	; 0x5580 <display_vprintf+0x76>
    557e:	a0 c1       	rjmp	.+832    	; 0x58c0 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    5580:	89 ad       	ldd	r24, Y+57	; 0x39
    5582:	9a ad       	ldd	r25, Y+58	; 0x3a
    5584:	9c 01       	movw	r18, r24
    5586:	2f 5f       	subi	r18, 0xFF	; 255
    5588:	3f 4f       	sbci	r19, 0xFF	; 255
    558a:	29 af       	std	Y+57, r18	; 0x39
    558c:	3a af       	std	Y+58, r19	; 0x3a
    558e:	fc 01       	movw	r30, r24
    5590:	80 81       	ld	r24, Z
    5592:	8d 8b       	std	Y+21, r24	; 0x15
    5594:	8d 89       	ldd	r24, Y+21	; 0x15
    5596:	88 2f       	mov	r24, r24
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	85 36       	cpi	r24, 0x65	; 101
    559c:	91 05       	cpc	r25, r1
    559e:	09 f4       	brne	.+2      	; 0x55a2 <display_vprintf+0x98>
    55a0:	46 c1       	rjmp	.+652    	; 0x582e <display_vprintf+0x324>
    55a2:	86 36       	cpi	r24, 0x66	; 102
    55a4:	91 05       	cpc	r25, r1
    55a6:	54 f4       	brge	.+20     	; 0x55bc <display_vprintf+0xb2>
    55a8:	83 36       	cpi	r24, 0x63	; 99
    55aa:	91 05       	cpc	r25, r1
    55ac:	01 f1       	breq	.+64     	; 0x55ee <display_vprintf+0xe4>
    55ae:	84 36       	cpi	r24, 0x64	; 100
    55b0:	91 05       	cpc	r25, r1
    55b2:	0c f0       	brlt	.+2      	; 0x55b6 <display_vprintf+0xac>
    55b4:	70 c0       	rjmp	.+224    	; 0x5696 <display_vprintf+0x18c>
    55b6:	85 97       	sbiw	r24, 0x25	; 37
    55b8:	69 f0       	breq	.+26     	; 0x55d4 <display_vprintf+0xca>
    55ba:	9c c1       	rjmp	.+824    	; 0x58f4 <display_vprintf+0x3ea>
    55bc:	83 37       	cpi	r24, 0x73	; 115
    55be:	91 05       	cpc	r25, r1
    55c0:	71 f1       	breq	.+92     	; 0x561e <display_vprintf+0x114>
    55c2:	88 37       	cpi	r24, 0x78	; 120
    55c4:	91 05       	cpc	r25, r1
    55c6:	09 f4       	brne	.+2      	; 0x55ca <display_vprintf+0xc0>
    55c8:	a8 c0       	rjmp	.+336    	; 0x571a <display_vprintf+0x210>
    55ca:	86 36       	cpi	r24, 0x66	; 102
    55cc:	91 05       	cpc	r25, r1
    55ce:	09 f4       	brne	.+2      	; 0x55d2 <display_vprintf+0xc8>
    55d0:	e6 c0       	rjmp	.+460    	; 0x579e <display_vprintf+0x294>
    55d2:	90 c1       	rjmp	.+800    	; 0x58f4 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    55d4:	89 81       	ldd	r24, Y+1	; 0x01
    55d6:	9a 81       	ldd	r25, Y+2	; 0x02
    55d8:	83 5b       	subi	r24, 0xB3	; 179
    55da:	9a 4c       	sbci	r25, 0xCA	; 202
    55dc:	25 e2       	ldi	r18, 0x25	; 37
    55de:	fc 01       	movw	r30, r24
    55e0:	20 83       	st	Z, r18
				length++;
    55e2:	89 81       	ldd	r24, Y+1	; 0x01
    55e4:	9a 81       	ldd	r25, Y+2	; 0x02
    55e6:	01 96       	adiw	r24, 0x01	; 1
    55e8:	89 83       	std	Y+1, r24	; 0x01
    55ea:	9a 83       	std	Y+2, r25	; 0x02
				break;
    55ec:	83 c1       	rjmp	.+774    	; 0x58f4 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    55ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    55f0:	9c ad       	ldd	r25, Y+60	; 0x3c
    55f2:	9c 01       	movw	r18, r24
    55f4:	2e 5f       	subi	r18, 0xFE	; 254
    55f6:	3f 4f       	sbci	r19, 0xFF	; 255
    55f8:	2b af       	std	Y+59, r18	; 0x3b
    55fa:	3c af       	std	Y+60, r19	; 0x3c
    55fc:	fc 01       	movw	r30, r24
    55fe:	80 81       	ld	r24, Z
    5600:	91 81       	ldd	r25, Z+1	; 0x01
    5602:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    5604:	89 81       	ldd	r24, Y+1	; 0x01
    5606:	9a 81       	ldd	r25, Y+2	; 0x02
    5608:	83 5b       	subi	r24, 0xB3	; 179
    560a:	9a 4c       	sbci	r25, 0xCA	; 202
    560c:	2e 89       	ldd	r18, Y+22	; 0x16
    560e:	fc 01       	movw	r30, r24
    5610:	20 83       	st	Z, r18
				length++;
    5612:	89 81       	ldd	r24, Y+1	; 0x01
    5614:	9a 81       	ldd	r25, Y+2	; 0x02
    5616:	01 96       	adiw	r24, 0x01	; 1
    5618:	89 83       	std	Y+1, r24	; 0x01
    561a:	9a 83       	std	Y+2, r25	; 0x02
				break;
    561c:	6b c1       	rjmp	.+726    	; 0x58f4 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    561e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5620:	9c ad       	ldd	r25, Y+60	; 0x3c
    5622:	9c 01       	movw	r18, r24
    5624:	2e 5f       	subi	r18, 0xFE	; 254
    5626:	3f 4f       	sbci	r19, 0xFF	; 255
    5628:	2b af       	std	Y+59, r18	; 0x3b
    562a:	3c af       	std	Y+60, r19	; 0x3c
    562c:	fc 01       	movw	r30, r24
    562e:	80 81       	ld	r24, Z
    5630:	91 81       	ldd	r25, Z+1	; 0x01
    5632:	8f 8b       	std	Y+23, r24	; 0x17
    5634:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    5636:	1f 82       	std	Y+7, r1	; 0x07
    5638:	18 86       	std	Y+8, r1	; 0x08
    563a:	17 c0       	rjmp	.+46     	; 0x566a <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    563c:	29 81       	ldd	r18, Y+1	; 0x01
    563e:	3a 81       	ldd	r19, Y+2	; 0x02
    5640:	8f 81       	ldd	r24, Y+7	; 0x07
    5642:	98 85       	ldd	r25, Y+8	; 0x08
    5644:	82 0f       	add	r24, r18
    5646:	93 1f       	adc	r25, r19
    5648:	2f 81       	ldd	r18, Y+7	; 0x07
    564a:	38 85       	ldd	r19, Y+8	; 0x08
    564c:	4f 89       	ldd	r20, Y+23	; 0x17
    564e:	58 8d       	ldd	r21, Y+24	; 0x18
    5650:	24 0f       	add	r18, r20
    5652:	35 1f       	adc	r19, r21
    5654:	f9 01       	movw	r30, r18
    5656:	20 81       	ld	r18, Z
    5658:	83 5b       	subi	r24, 0xB3	; 179
    565a:	9a 4c       	sbci	r25, 0xCA	; 202
    565c:	fc 01       	movw	r30, r24
    565e:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    5660:	8f 81       	ldd	r24, Y+7	; 0x07
    5662:	98 85       	ldd	r25, Y+8	; 0x08
    5664:	01 96       	adiw	r24, 0x01	; 1
    5666:	8f 83       	std	Y+7, r24	; 0x07
    5668:	98 87       	std	Y+8, r25	; 0x08
    566a:	8f 89       	ldd	r24, Y+23	; 0x17
    566c:	98 8d       	ldd	r25, Y+24	; 0x18
    566e:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    5672:	9c 01       	movw	r18, r24
    5674:	8f 81       	ldd	r24, Y+7	; 0x07
    5676:	98 85       	ldd	r25, Y+8	; 0x08
    5678:	82 17       	cp	r24, r18
    567a:	93 07       	cpc	r25, r19
    567c:	f8 f2       	brcs	.-66     	; 0x563c <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    567e:	8f 89       	ldd	r24, Y+23	; 0x17
    5680:	98 8d       	ldd	r25, Y+24	; 0x18
    5682:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    5686:	9c 01       	movw	r18, r24
    5688:	89 81       	ldd	r24, Y+1	; 0x01
    568a:	9a 81       	ldd	r25, Y+2	; 0x02
    568c:	82 0f       	add	r24, r18
    568e:	93 1f       	adc	r25, r19
    5690:	89 83       	std	Y+1, r24	; 0x01
    5692:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5694:	2f c1       	rjmp	.+606    	; 0x58f4 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    5696:	8b ad       	ldd	r24, Y+59	; 0x3b
    5698:	9c ad       	ldd	r25, Y+60	; 0x3c
    569a:	9c 01       	movw	r18, r24
    569c:	2e 5f       	subi	r18, 0xFE	; 254
    569e:	3f 4f       	sbci	r19, 0xFF	; 255
    56a0:	2b af       	std	Y+59, r18	; 0x3b
    56a2:	3c af       	std	Y+60, r19	; 0x3c
    56a4:	fc 01       	movw	r30, r24
    56a6:	80 81       	ld	r24, Z
    56a8:	91 81       	ldd	r25, Z+1	; 0x01
    56aa:	89 8f       	std	Y+25, r24	; 0x19
    56ac:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    56ae:	89 8d       	ldd	r24, Y+25	; 0x19
    56b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    56b2:	4a e0       	ldi	r20, 0x0A	; 10
    56b4:	50 e0       	ldi	r21, 0x00	; 0
    56b6:	69 e3       	ldi	r22, 0x39	; 57
    56b8:	75 e3       	ldi	r23, 0x35	; 53
    56ba:	0e 94 23 32 	call	0x6446	; 0x6446 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    56be:	19 86       	std	Y+9, r1	; 0x09
    56c0:	1a 86       	std	Y+10, r1	; 0x0a
    56c2:	15 c0       	rjmp	.+42     	; 0x56ee <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    56c4:	29 81       	ldd	r18, Y+1	; 0x01
    56c6:	3a 81       	ldd	r19, Y+2	; 0x02
    56c8:	89 85       	ldd	r24, Y+9	; 0x09
    56ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    56cc:	82 0f       	add	r24, r18
    56ce:	93 1f       	adc	r25, r19
    56d0:	29 85       	ldd	r18, Y+9	; 0x09
    56d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    56d4:	27 5c       	subi	r18, 0xC7	; 199
    56d6:	3a 4c       	sbci	r19, 0xCA	; 202
    56d8:	f9 01       	movw	r30, r18
    56da:	20 81       	ld	r18, Z
    56dc:	83 5b       	subi	r24, 0xB3	; 179
    56de:	9a 4c       	sbci	r25, 0xCA	; 202
    56e0:	fc 01       	movw	r30, r24
    56e2:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    56e4:	89 85       	ldd	r24, Y+9	; 0x09
    56e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    56e8:	01 96       	adiw	r24, 0x01	; 1
    56ea:	89 87       	std	Y+9, r24	; 0x09
    56ec:	9a 87       	std	Y+10, r25	; 0x0a
    56ee:	89 e3       	ldi	r24, 0x39	; 57
    56f0:	95 e3       	ldi	r25, 0x35	; 53
    56f2:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    56f6:	9c 01       	movw	r18, r24
    56f8:	89 85       	ldd	r24, Y+9	; 0x09
    56fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    56fc:	82 17       	cp	r24, r18
    56fe:	93 07       	cpc	r25, r19
    5700:	08 f3       	brcs	.-62     	; 0x56c4 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5702:	89 e3       	ldi	r24, 0x39	; 57
    5704:	95 e3       	ldi	r25, 0x35	; 53
    5706:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    570a:	9c 01       	movw	r18, r24
    570c:	89 81       	ldd	r24, Y+1	; 0x01
    570e:	9a 81       	ldd	r25, Y+2	; 0x02
    5710:	82 0f       	add	r24, r18
    5712:	93 1f       	adc	r25, r19
    5714:	89 83       	std	Y+1, r24	; 0x01
    5716:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5718:	ed c0       	rjmp	.+474    	; 0x58f4 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    571a:	8b ad       	ldd	r24, Y+59	; 0x3b
    571c:	9c ad       	ldd	r25, Y+60	; 0x3c
    571e:	9c 01       	movw	r18, r24
    5720:	2e 5f       	subi	r18, 0xFE	; 254
    5722:	3f 4f       	sbci	r19, 0xFF	; 255
    5724:	2b af       	std	Y+59, r18	; 0x3b
    5726:	3c af       	std	Y+60, r19	; 0x3c
    5728:	fc 01       	movw	r30, r24
    572a:	80 81       	ld	r24, Z
    572c:	91 81       	ldd	r25, Z+1	; 0x01
    572e:	89 8f       	std	Y+25, r24	; 0x19
    5730:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    5732:	89 8d       	ldd	r24, Y+25	; 0x19
    5734:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5736:	40 e1       	ldi	r20, 0x10	; 16
    5738:	50 e0       	ldi	r21, 0x00	; 0
    573a:	69 e3       	ldi	r22, 0x39	; 57
    573c:	75 e3       	ldi	r23, 0x35	; 53
    573e:	0e 94 23 32 	call	0x6446	; 0x6446 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5742:	1b 86       	std	Y+11, r1	; 0x0b
    5744:	1c 86       	std	Y+12, r1	; 0x0c
    5746:	15 c0       	rjmp	.+42     	; 0x5772 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    5748:	29 81       	ldd	r18, Y+1	; 0x01
    574a:	3a 81       	ldd	r19, Y+2	; 0x02
    574c:	8b 85       	ldd	r24, Y+11	; 0x0b
    574e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5750:	82 0f       	add	r24, r18
    5752:	93 1f       	adc	r25, r19
    5754:	2b 85       	ldd	r18, Y+11	; 0x0b
    5756:	3c 85       	ldd	r19, Y+12	; 0x0c
    5758:	27 5c       	subi	r18, 0xC7	; 199
    575a:	3a 4c       	sbci	r19, 0xCA	; 202
    575c:	f9 01       	movw	r30, r18
    575e:	20 81       	ld	r18, Z
    5760:	83 5b       	subi	r24, 0xB3	; 179
    5762:	9a 4c       	sbci	r25, 0xCA	; 202
    5764:	fc 01       	movw	r30, r24
    5766:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    5768:	8b 85       	ldd	r24, Y+11	; 0x0b
    576a:	9c 85       	ldd	r25, Y+12	; 0x0c
    576c:	01 96       	adiw	r24, 0x01	; 1
    576e:	8b 87       	std	Y+11, r24	; 0x0b
    5770:	9c 87       	std	Y+12, r25	; 0x0c
    5772:	89 e3       	ldi	r24, 0x39	; 57
    5774:	95 e3       	ldi	r25, 0x35	; 53
    5776:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    577a:	9c 01       	movw	r18, r24
    577c:	8b 85       	ldd	r24, Y+11	; 0x0b
    577e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5780:	82 17       	cp	r24, r18
    5782:	93 07       	cpc	r25, r19
    5784:	08 f3       	brcs	.-62     	; 0x5748 <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5786:	89 e3       	ldi	r24, 0x39	; 57
    5788:	95 e3       	ldi	r25, 0x35	; 53
    578a:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    578e:	9c 01       	movw	r18, r24
    5790:	89 81       	ldd	r24, Y+1	; 0x01
    5792:	9a 81       	ldd	r25, Y+2	; 0x02
    5794:	82 0f       	add	r24, r18
    5796:	93 1f       	adc	r25, r19
    5798:	89 83       	std	Y+1, r24	; 0x01
    579a:	9a 83       	std	Y+2, r25	; 0x02
				break;
    579c:	ab c0       	rjmp	.+342    	; 0x58f4 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    579e:	8b ad       	ldd	r24, Y+59	; 0x3b
    57a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    57a2:	9c 01       	movw	r18, r24
    57a4:	2c 5f       	subi	r18, 0xFC	; 252
    57a6:	3f 4f       	sbci	r19, 0xFF	; 255
    57a8:	2b af       	std	Y+59, r18	; 0x3b
    57aa:	3c af       	std	Y+60, r19	; 0x3c
    57ac:	fc 01       	movw	r30, r24
    57ae:	80 81       	ld	r24, Z
    57b0:	91 81       	ldd	r25, Z+1	; 0x01
    57b2:	a2 81       	ldd	r26, Z+2	; 0x02
    57b4:	b3 81       	ldd	r27, Z+3	; 0x03
    57b6:	8b 8f       	std	Y+27, r24	; 0x1b
    57b8:	9c 8f       	std	Y+28, r25	; 0x1c
    57ba:	ad 8f       	std	Y+29, r26	; 0x1d
    57bc:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    57be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57c2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    57c4:	be 8d       	ldd	r27, Y+30	; 0x1e
    57c6:	ac 01       	movw	r20, r24
    57c8:	bd 01       	movw	r22, r26
    57ca:	89 e3       	ldi	r24, 0x39	; 57
    57cc:	95 e3       	ldi	r25, 0x35	; 53
    57ce:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    57d2:	1d 86       	std	Y+13, r1	; 0x0d
    57d4:	1e 86       	std	Y+14, r1	; 0x0e
    57d6:	15 c0       	rjmp	.+42     	; 0x5802 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    57d8:	29 81       	ldd	r18, Y+1	; 0x01
    57da:	3a 81       	ldd	r19, Y+2	; 0x02
    57dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    57de:	9e 85       	ldd	r25, Y+14	; 0x0e
    57e0:	82 0f       	add	r24, r18
    57e2:	93 1f       	adc	r25, r19
    57e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    57e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    57e8:	27 5c       	subi	r18, 0xC7	; 199
    57ea:	3a 4c       	sbci	r19, 0xCA	; 202
    57ec:	f9 01       	movw	r30, r18
    57ee:	20 81       	ld	r18, Z
    57f0:	83 5b       	subi	r24, 0xB3	; 179
    57f2:	9a 4c       	sbci	r25, 0xCA	; 202
    57f4:	fc 01       	movw	r30, r24
    57f6:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    57f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    57fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    57fc:	01 96       	adiw	r24, 0x01	; 1
    57fe:	8d 87       	std	Y+13, r24	; 0x0d
    5800:	9e 87       	std	Y+14, r25	; 0x0e
    5802:	89 e3       	ldi	r24, 0x39	; 57
    5804:	95 e3       	ldi	r25, 0x35	; 53
    5806:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    580a:	9c 01       	movw	r18, r24
    580c:	8d 85       	ldd	r24, Y+13	; 0x0d
    580e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5810:	82 17       	cp	r24, r18
    5812:	93 07       	cpc	r25, r19
    5814:	08 f3       	brcs	.-62     	; 0x57d8 <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5816:	89 e3       	ldi	r24, 0x39	; 57
    5818:	95 e3       	ldi	r25, 0x35	; 53
    581a:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    581e:	9c 01       	movw	r18, r24
    5820:	89 81       	ldd	r24, Y+1	; 0x01
    5822:	9a 81       	ldd	r25, Y+2	; 0x02
    5824:	82 0f       	add	r24, r18
    5826:	93 1f       	adc	r25, r19
    5828:	89 83       	std	Y+1, r24	; 0x01
    582a:	9a 83       	std	Y+2, r25	; 0x02
				break;
    582c:	63 c0       	rjmp	.+198    	; 0x58f4 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    582e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5830:	9c ad       	ldd	r25, Y+60	; 0x3c
    5832:	9c 01       	movw	r18, r24
    5834:	2c 5f       	subi	r18, 0xFC	; 252
    5836:	3f 4f       	sbci	r19, 0xFF	; 255
    5838:	2b af       	std	Y+59, r18	; 0x3b
    583a:	3c af       	std	Y+60, r19	; 0x3c
    583c:	fc 01       	movw	r30, r24
    583e:	80 81       	ld	r24, Z
    5840:	91 81       	ldd	r25, Z+1	; 0x01
    5842:	a2 81       	ldd	r26, Z+2	; 0x02
    5844:	b3 81       	ldd	r27, Z+3	; 0x03
    5846:	8b 8f       	std	Y+27, r24	; 0x1b
    5848:	9c 8f       	std	Y+28, r25	; 0x1c
    584a:	ad 8f       	std	Y+29, r26	; 0x1d
    584c:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    584e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5852:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5854:	be 8d       	ldd	r27, Y+30	; 0x1e
    5856:	ac 01       	movw	r20, r24
    5858:	bd 01       	movw	r22, r26
    585a:	89 e3       	ldi	r24, 0x39	; 57
    585c:	95 e3       	ldi	r25, 0x35	; 53
    585e:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    5862:	1f 86       	std	Y+15, r1	; 0x0f
    5864:	18 8a       	std	Y+16, r1	; 0x10
    5866:	15 c0       	rjmp	.+42     	; 0x5892 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    5868:	29 81       	ldd	r18, Y+1	; 0x01
    586a:	3a 81       	ldd	r19, Y+2	; 0x02
    586c:	8f 85       	ldd	r24, Y+15	; 0x0f
    586e:	98 89       	ldd	r25, Y+16	; 0x10
    5870:	82 0f       	add	r24, r18
    5872:	93 1f       	adc	r25, r19
    5874:	2f 85       	ldd	r18, Y+15	; 0x0f
    5876:	38 89       	ldd	r19, Y+16	; 0x10
    5878:	27 5c       	subi	r18, 0xC7	; 199
    587a:	3a 4c       	sbci	r19, 0xCA	; 202
    587c:	f9 01       	movw	r30, r18
    587e:	20 81       	ld	r18, Z
    5880:	83 5b       	subi	r24, 0xB3	; 179
    5882:	9a 4c       	sbci	r25, 0xCA	; 202
    5884:	fc 01       	movw	r30, r24
    5886:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    5888:	8f 85       	ldd	r24, Y+15	; 0x0f
    588a:	98 89       	ldd	r25, Y+16	; 0x10
    588c:	01 96       	adiw	r24, 0x01	; 1
    588e:	8f 87       	std	Y+15, r24	; 0x0f
    5890:	98 8b       	std	Y+16, r25	; 0x10
    5892:	89 e3       	ldi	r24, 0x39	; 57
    5894:	95 e3       	ldi	r25, 0x35	; 53
    5896:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    589a:	9c 01       	movw	r18, r24
    589c:	8f 85       	ldd	r24, Y+15	; 0x0f
    589e:	98 89       	ldd	r25, Y+16	; 0x10
    58a0:	82 17       	cp	r24, r18
    58a2:	93 07       	cpc	r25, r19
    58a4:	08 f3       	brcs	.-62     	; 0x5868 <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    58a6:	89 e3       	ldi	r24, 0x39	; 57
    58a8:	95 e3       	ldi	r25, 0x35	; 53
    58aa:	0e 94 1a 32 	call	0x6434	; 0x6434 <strlen>
    58ae:	9c 01       	movw	r18, r24
    58b0:	89 81       	ldd	r24, Y+1	; 0x01
    58b2:	9a 81       	ldd	r25, Y+2	; 0x02
    58b4:	82 0f       	add	r24, r18
    58b6:	93 1f       	adc	r25, r19
    58b8:	89 83       	std	Y+1, r24	; 0x01
    58ba:	9a 83       	std	Y+2, r25	; 0x02
				break;
    58bc:	00 00       	nop
    58be:	1a c0       	rjmp	.+52     	; 0x58f4 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    58c0:	89 81       	ldd	r24, Y+1	; 0x01
    58c2:	9a 81       	ldd	r25, Y+2	; 0x02
    58c4:	83 5b       	subi	r24, 0xB3	; 179
    58c6:	9a 4c       	sbci	r25, 0xCA	; 202
    58c8:	2d 89       	ldd	r18, Y+21	; 0x15
    58ca:	fc 01       	movw	r30, r24
    58cc:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    58ce:	89 81       	ldd	r24, Y+1	; 0x01
    58d0:	9a 81       	ldd	r25, Y+2	; 0x02
    58d2:	83 5b       	subi	r24, 0xB3	; 179
    58d4:	9a 4c       	sbci	r25, 0xCA	; 202
    58d6:	fc 01       	movw	r30, r24
    58d8:	80 81       	ld	r24, Z
    58da:	8a 30       	cpi	r24, 0x0A	; 10
    58dc:	31 f4       	brne	.+12     	; 0x58ea <display_vprintf+0x3e0>
				str[length] = '\0';				
    58de:	89 81       	ldd	r24, Y+1	; 0x01
    58e0:	9a 81       	ldd	r25, Y+2	; 0x02
    58e2:	83 5b       	subi	r24, 0xB3	; 179
    58e4:	9a 4c       	sbci	r25, 0xCA	; 202
    58e6:	fc 01       	movw	r30, r24
    58e8:	10 82       	st	Z, r1
			}
			length++;
    58ea:	89 81       	ldd	r24, Y+1	; 0x01
    58ec:	9a 81       	ldd	r25, Y+2	; 0x02
    58ee:	01 96       	adiw	r24, 0x01	; 1
    58f0:	89 83       	std	Y+1, r24	; 0x01
    58f2:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    58f4:	89 ad       	ldd	r24, Y+57	; 0x39
    58f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    58f8:	9c 01       	movw	r18, r24
    58fa:	2f 5f       	subi	r18, 0xFF	; 255
    58fc:	3f 4f       	sbci	r19, 0xFF	; 255
    58fe:	29 af       	std	Y+57, r18	; 0x39
    5900:	3a af       	std	Y+58, r19	; 0x3a
    5902:	fc 01       	movw	r30, r24
    5904:	80 81       	ld	r24, Z
    5906:	8d 8b       	std	Y+21, r24	; 0x15
    5908:	8d 89       	ldd	r24, Y+21	; 0x15
    590a:	88 23       	and	r24, r24
    590c:	09 f0       	breq	.+2      	; 0x5910 <display_vprintf+0x406>
    590e:	34 ce       	rjmp	.-920    	; 0x5578 <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    5910:	29 81       	ldd	r18, Y+1	; 0x01
    5912:	3a 81       	ldd	r19, Y+2	; 0x02
    5914:	8f a9       	ldd	r24, Y+55	; 0x37
    5916:	98 ad       	ldd	r25, Y+56	; 0x38
    5918:	82 0f       	add	r24, r18
    591a:	93 1f       	adc	r25, r19
    591c:	44 97       	sbiw	r24, 0x14	; 20
    591e:	54 f0       	brlt	.+20     	; 0x5934 <display_vprintf+0x42a>
		length = 20-pos;
    5920:	24 e1       	ldi	r18, 0x14	; 20
    5922:	30 e0       	ldi	r19, 0x00	; 0
    5924:	8f a9       	ldd	r24, Y+55	; 0x37
    5926:	98 ad       	ldd	r25, Y+56	; 0x38
    5928:	a9 01       	movw	r20, r18
    592a:	48 1b       	sub	r20, r24
    592c:	59 0b       	sbc	r21, r25
    592e:	ca 01       	movw	r24, r20
    5930:	89 83       	std	Y+1, r24	; 0x01
    5932:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    5934:	19 8a       	std	Y+17, r1	; 0x11
    5936:	1a 8a       	std	Y+18, r1	; 0x12
    5938:	0e c0       	rjmp	.+28     	; 0x5956 <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    593a:	9e 01       	movw	r18, r28
    593c:	2f 5d       	subi	r18, 0xDF	; 223
    593e:	3f 4f       	sbci	r19, 0xFF	; 255
    5940:	89 89       	ldd	r24, Y+17	; 0x11
    5942:	9a 89       	ldd	r25, Y+18	; 0x12
    5944:	82 0f       	add	r24, r18
    5946:	93 1f       	adc	r25, r19
    5948:	fc 01       	movw	r30, r24
    594a:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    594c:	89 89       	ldd	r24, Y+17	; 0x11
    594e:	9a 89       	ldd	r25, Y+18	; 0x12
    5950:	01 96       	adiw	r24, 0x01	; 1
    5952:	89 8b       	std	Y+17, r24	; 0x11
    5954:	9a 8b       	std	Y+18, r25	; 0x12
    5956:	89 89       	ldd	r24, Y+17	; 0x11
    5958:	9a 89       	ldd	r25, Y+18	; 0x12
    595a:	44 97       	sbiw	r24, 0x14	; 20
    595c:	74 f3       	brlt	.-36     	; 0x593a <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    595e:	8d a9       	ldd	r24, Y+53	; 0x35
    5960:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    5962:	8f a9       	ldd	r24, Y+55	; 0x37
    5964:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    5966:	1b 8a       	std	Y+19, r1	; 0x13
    5968:	1c 8a       	std	Y+20, r1	; 0x14
    596a:	14 c0       	rjmp	.+40     	; 0x5994 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    596c:	8b 89       	ldd	r24, Y+19	; 0x13
    596e:	9c 89       	ldd	r25, Y+20	; 0x14
    5970:	83 5b       	subi	r24, 0xB3	; 179
    5972:	9a 4c       	sbci	r25, 0xCA	; 202
    5974:	fc 01       	movw	r30, r24
    5976:	40 81       	ld	r20, Z
    5978:	9e 01       	movw	r18, r28
    597a:	2f 5d       	subi	r18, 0xDF	; 223
    597c:	3f 4f       	sbci	r19, 0xFF	; 255
    597e:	8b 89       	ldd	r24, Y+19	; 0x13
    5980:	9c 89       	ldd	r25, Y+20	; 0x14
    5982:	82 0f       	add	r24, r18
    5984:	93 1f       	adc	r25, r19
    5986:	fc 01       	movw	r30, r24
    5988:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    598a:	8b 89       	ldd	r24, Y+19	; 0x13
    598c:	9c 89       	ldd	r25, Y+20	; 0x14
    598e:	01 96       	adiw	r24, 0x01	; 1
    5990:	8b 8b       	std	Y+19, r24	; 0x13
    5992:	9c 8b       	std	Y+20, r25	; 0x14
    5994:	2b 89       	ldd	r18, Y+19	; 0x13
    5996:	3c 89       	ldd	r19, Y+20	; 0x14
    5998:	89 81       	ldd	r24, Y+1	; 0x01
    599a:	9a 81       	ldd	r25, Y+2	; 0x02
    599c:	28 17       	cp	r18, r24
    599e:	39 07       	cpc	r19, r25
    59a0:	2c f3       	brlt	.-54     	; 0x596c <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    59a2:	80 91 6a 35 	lds	r24, 0x356A	; 0x80356a <displayLineQueue>
    59a6:	90 91 6b 35 	lds	r25, 0x356B	; 0x80356b <displayLineQueue+0x1>
    59aa:	be 01       	movw	r22, r28
    59ac:	61 5e       	subi	r22, 0xE1	; 225
    59ae:	7f 4f       	sbci	r23, 0xFF	; 255
    59b0:	00 e0       	ldi	r16, 0x00	; 0
    59b2:	2f ef       	ldi	r18, 0xFF	; 255
    59b4:	3f ef       	ldi	r19, 0xFF	; 255
    59b6:	a9 01       	movw	r20, r18
    59b8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <xQueueGenericSend>
	
	
	return length;
    59bc:	89 81       	ldd	r24, Y+1	; 0x01
    59be:	9a 81       	ldd	r25, Y+2	; 0x02
}
    59c0:	ec 96       	adiw	r28, 0x3c	; 60
    59c2:	cd bf       	out	0x3d, r28	; 61
    59c4:	de bf       	out	0x3e, r29	; 62
    59c6:	df 91       	pop	r29
    59c8:	cf 91       	pop	r28
    59ca:	0f 91       	pop	r16
    59cc:	08 95       	ret

000059ce <normalize>:

static int normalize(double *val) {
    59ce:	cf 93       	push	r28
    59d0:	df 93       	push	r29
    59d2:	cd b7       	in	r28, 0x3d	; 61
    59d4:	de b7       	in	r29, 0x3e	; 62
    59d6:	28 97       	sbiw	r28, 0x08	; 8
    59d8:	cd bf       	out	0x3d, r28	; 61
    59da:	de bf       	out	0x3e, r29	; 62
    59dc:	8f 83       	std	Y+7, r24	; 0x07
    59de:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    59e0:	19 82       	std	Y+1, r1	; 0x01
    59e2:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    59e4:	8f 81       	ldd	r24, Y+7	; 0x07
    59e6:	98 85       	ldd	r25, Y+8	; 0x08
    59e8:	fc 01       	movw	r30, r24
    59ea:	80 81       	ld	r24, Z
    59ec:	91 81       	ldd	r25, Z+1	; 0x01
    59ee:	a2 81       	ldd	r26, Z+2	; 0x02
    59f0:	b3 81       	ldd	r27, Z+3	; 0x03
    59f2:	8b 83       	std	Y+3, r24	; 0x03
    59f4:	9c 83       	std	Y+4, r25	; 0x04
    59f6:	ad 83       	std	Y+5, r26	; 0x05
    59f8:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    59fa:	15 c0       	rjmp	.+42     	; 0x5a26 <normalize+0x58>
        value /= 10.0;
    59fc:	20 e0       	ldi	r18, 0x00	; 0
    59fe:	30 e0       	ldi	r19, 0x00	; 0
    5a00:	40 e2       	ldi	r20, 0x20	; 32
    5a02:	51 e4       	ldi	r21, 0x41	; 65
    5a04:	6b 81       	ldd	r22, Y+3	; 0x03
    5a06:	7c 81       	ldd	r23, Y+4	; 0x04
    5a08:	8d 81       	ldd	r24, Y+5	; 0x05
    5a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a0c:	0e 94 36 30 	call	0x606c	; 0x606c <__divsf3>
    5a10:	dc 01       	movw	r26, r24
    5a12:	cb 01       	movw	r24, r22
    5a14:	8b 83       	std	Y+3, r24	; 0x03
    5a16:	9c 83       	std	Y+4, r25	; 0x04
    5a18:	ad 83       	std	Y+5, r26	; 0x05
    5a1a:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    5a1c:	89 81       	ldd	r24, Y+1	; 0x01
    5a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a20:	01 96       	adiw	r24, 0x01	; 1
    5a22:	89 83       	std	Y+1, r24	; 0x01
    5a24:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    5a26:	20 e0       	ldi	r18, 0x00	; 0
    5a28:	30 e0       	ldi	r19, 0x00	; 0
    5a2a:	40 e8       	ldi	r20, 0x80	; 128
    5a2c:	5f e3       	ldi	r21, 0x3F	; 63
    5a2e:	6b 81       	ldd	r22, Y+3	; 0x03
    5a30:	7c 81       	ldd	r23, Y+4	; 0x04
    5a32:	8d 81       	ldd	r24, Y+5	; 0x05
    5a34:	9e 81       	ldd	r25, Y+6	; 0x06
    5a36:	0e 94 90 31 	call	0x6320	; 0x6320 <__gesf2>
    5a3a:	88 23       	and	r24, r24
    5a3c:	fc f6       	brge	.-66     	; 0x59fc <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5a3e:	15 c0       	rjmp	.+42     	; 0x5a6a <normalize+0x9c>
        value *= 10.0;
    5a40:	20 e0       	ldi	r18, 0x00	; 0
    5a42:	30 e0       	ldi	r19, 0x00	; 0
    5a44:	40 e2       	ldi	r20, 0x20	; 32
    5a46:	51 e4       	ldi	r21, 0x41	; 65
    5a48:	6b 81       	ldd	r22, Y+3	; 0x03
    5a4a:	7c 81       	ldd	r23, Y+4	; 0x04
    5a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a50:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5a54:	dc 01       	movw	r26, r24
    5a56:	cb 01       	movw	r24, r22
    5a58:	8b 83       	std	Y+3, r24	; 0x03
    5a5a:	9c 83       	std	Y+4, r25	; 0x04
    5a5c:	ad 83       	std	Y+5, r26	; 0x05
    5a5e:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    5a60:	89 81       	ldd	r24, Y+1	; 0x01
    5a62:	9a 81       	ldd	r25, Y+2	; 0x02
    5a64:	01 97       	sbiw	r24, 0x01	; 1
    5a66:	89 83       	std	Y+1, r24	; 0x01
    5a68:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5a6a:	2d ec       	ldi	r18, 0xCD	; 205
    5a6c:	3c ec       	ldi	r19, 0xCC	; 204
    5a6e:	4c ec       	ldi	r20, 0xCC	; 204
    5a70:	5d e3       	ldi	r21, 0x3D	; 61
    5a72:	6b 81       	ldd	r22, Y+3	; 0x03
    5a74:	7c 81       	ldd	r23, Y+4	; 0x04
    5a76:	8d 81       	ldd	r24, Y+5	; 0x05
    5a78:	9e 81       	ldd	r25, Y+6	; 0x06
    5a7a:	0e 94 31 30 	call	0x6062	; 0x6062 <__cmpsf2>
    5a7e:	88 23       	and	r24, r24
    5a80:	fc f2       	brlt	.-66     	; 0x5a40 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    5a82:	2f 81       	ldd	r18, Y+7	; 0x07
    5a84:	38 85       	ldd	r19, Y+8	; 0x08
    5a86:	8b 81       	ldd	r24, Y+3	; 0x03
    5a88:	9c 81       	ldd	r25, Y+4	; 0x04
    5a8a:	ad 81       	ldd	r26, Y+5	; 0x05
    5a8c:	be 81       	ldd	r27, Y+6	; 0x06
    5a8e:	f9 01       	movw	r30, r18
    5a90:	80 83       	st	Z, r24
    5a92:	91 83       	std	Z+1, r25	; 0x01
    5a94:	a2 83       	std	Z+2, r26	; 0x02
    5a96:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    5a98:	89 81       	ldd	r24, Y+1	; 0x01
    5a9a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5a9c:	28 96       	adiw	r28, 0x08	; 8
    5a9e:	cd bf       	out	0x3d, r28	; 61
    5aa0:	de bf       	out	0x3e, r29	; 62
    5aa2:	df 91       	pop	r29
    5aa4:	cf 91       	pop	r28
    5aa6:	08 95       	ret

00005aa8 <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    5aa8:	cf 92       	push	r12
    5aaa:	df 92       	push	r13
    5aac:	ef 92       	push	r14
    5aae:	ff 92       	push	r15
    5ab0:	cf 93       	push	r28
    5ab2:	df 93       	push	r29
    5ab4:	cd b7       	in	r28, 0x3d	; 61
    5ab6:	de b7       	in	r29, 0x3e	; 62
    5ab8:	2e 97       	sbiw	r28, 0x0e	; 14
    5aba:	cd bf       	out	0x3d, r28	; 61
    5abc:	de bf       	out	0x3e, r29	; 62
    5abe:	89 87       	std	Y+9, r24	; 0x09
    5ac0:	9a 87       	std	Y+10, r25	; 0x0a
    5ac2:	4b 87       	std	Y+11, r20	; 0x0b
    5ac4:	5c 87       	std	Y+12, r21	; 0x0c
    5ac6:	6d 87       	std	Y+13, r22	; 0x0d
    5ac8:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    5aca:	19 82       	std	Y+1, r1	; 0x01
    5acc:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    5ace:	1b 82       	std	Y+3, r1	; 0x03
    5ad0:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5ad2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ad4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ad6:	ad 85       	ldd	r26, Y+13	; 0x0d
    5ad8:	be 85       	ldd	r27, Y+14	; 0x0e
    5ada:	20 e0       	ldi	r18, 0x00	; 0
    5adc:	30 e0       	ldi	r19, 0x00	; 0
    5ade:	a9 01       	movw	r20, r18
    5ae0:	bc 01       	movw	r22, r24
    5ae2:	cd 01       	movw	r24, r26
    5ae4:	0e 94 31 30 	call	0x6062	; 0x6062 <__cmpsf2>
    5ae8:	88 23       	and	r24, r24
    5aea:	59 f4       	brne	.+22     	; 0x5b02 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    5aec:	89 85       	ldd	r24, Y+9	; 0x09
    5aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    5af0:	20 e3       	ldi	r18, 0x30	; 48
    5af2:	fc 01       	movw	r30, r24
    5af4:	20 83       	st	Z, r18
        buffer[1] = '\0';
    5af6:	89 85       	ldd	r24, Y+9	; 0x09
    5af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5afa:	01 96       	adiw	r24, 0x01	; 1
    5afc:	fc 01       	movw	r30, r24
    5afe:	10 82       	st	Z, r1
        return;
    5b00:	18 c1       	rjmp	.+560    	; 0x5d32 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    5b02:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b04:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b06:	ad 85       	ldd	r26, Y+13	; 0x0d
    5b08:	be 85       	ldd	r27, Y+14	; 0x0e
    5b0a:	20 e0       	ldi	r18, 0x00	; 0
    5b0c:	30 e0       	ldi	r19, 0x00	; 0
    5b0e:	a9 01       	movw	r20, r18
    5b10:	bc 01       	movw	r22, r24
    5b12:	cd 01       	movw	r24, r26
    5b14:	0e 94 31 30 	call	0x6062	; 0x6062 <__cmpsf2>
    5b18:	88 23       	and	r24, r24
    5b1a:	9c f4       	brge	.+38     	; 0x5b42 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    5b1c:	89 85       	ldd	r24, Y+9	; 0x09
    5b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b20:	9c 01       	movw	r18, r24
    5b22:	2f 5f       	subi	r18, 0xFF	; 255
    5b24:	3f 4f       	sbci	r19, 0xFF	; 255
    5b26:	29 87       	std	Y+9, r18	; 0x09
    5b28:	3a 87       	std	Y+10, r19	; 0x0a
    5b2a:	2d e2       	ldi	r18, 0x2D	; 45
    5b2c:	fc 01       	movw	r30, r24
    5b2e:	20 83       	st	Z, r18
        value = -value;
    5b30:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b32:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b34:	ad 85       	ldd	r26, Y+13	; 0x0d
    5b36:	be 85       	ldd	r27, Y+14	; 0x0e
    5b38:	b0 58       	subi	r27, 0x80	; 128
    5b3a:	8b 87       	std	Y+11, r24	; 0x0b
    5b3c:	9c 87       	std	Y+12, r25	; 0x0c
    5b3e:	ad 87       	std	Y+13, r26	; 0x0d
    5b40:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    5b42:	ce 01       	movw	r24, r28
    5b44:	0b 96       	adiw	r24, 0x0b	; 11
    5b46:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <normalize>
    5b4a:	89 83       	std	Y+1, r24	; 0x01
    5b4c:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    5b4e:	53 c0       	rjmp	.+166    	; 0x5bf6 <ftoa_fixed+0x14e>
        int digit = value * 10;
    5b50:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b52:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b54:	ad 85       	ldd	r26, Y+13	; 0x0d
    5b56:	be 85       	ldd	r27, Y+14	; 0x0e
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	40 e2       	ldi	r20, 0x20	; 32
    5b5e:	51 e4       	ldi	r21, 0x41	; 65
    5b60:	bc 01       	movw	r22, r24
    5b62:	cd 01       	movw	r24, r26
    5b64:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5b68:	dc 01       	movw	r26, r24
    5b6a:	cb 01       	movw	r24, r22
    5b6c:	bc 01       	movw	r22, r24
    5b6e:	cd 01       	movw	r24, r26
    5b70:	0e 94 a8 30 	call	0x6150	; 0x6150 <__fixsfsi>
    5b74:	dc 01       	movw	r26, r24
    5b76:	cb 01       	movw	r24, r22
    5b78:	8d 83       	std	Y+5, r24	; 0x05
    5b7a:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    5b7c:	89 85       	ldd	r24, Y+9	; 0x09
    5b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b80:	9c 01       	movw	r18, r24
    5b82:	2f 5f       	subi	r18, 0xFF	; 255
    5b84:	3f 4f       	sbci	r19, 0xFF	; 255
    5b86:	29 87       	std	Y+9, r18	; 0x09
    5b88:	3a 87       	std	Y+10, r19	; 0x0a
    5b8a:	2d 81       	ldd	r18, Y+5	; 0x05
    5b8c:	20 5d       	subi	r18, 0xD0	; 208
    5b8e:	fc 01       	movw	r30, r24
    5b90:	20 83       	st	Z, r18
        value = value * 10 - digit;
    5b92:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b94:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b96:	ad 85       	ldd	r26, Y+13	; 0x0d
    5b98:	be 85       	ldd	r27, Y+14	; 0x0e
    5b9a:	20 e0       	ldi	r18, 0x00	; 0
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	40 e2       	ldi	r20, 0x20	; 32
    5ba0:	51 e4       	ldi	r21, 0x41	; 65
    5ba2:	bc 01       	movw	r22, r24
    5ba4:	cd 01       	movw	r24, r26
    5ba6:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5baa:	dc 01       	movw	r26, r24
    5bac:	cb 01       	movw	r24, r22
    5bae:	6c 01       	movw	r12, r24
    5bb0:	7d 01       	movw	r14, r26
    5bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    5bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    5bb6:	09 2e       	mov	r0, r25
    5bb8:	00 0c       	add	r0, r0
    5bba:	aa 0b       	sbc	r26, r26
    5bbc:	bb 0b       	sbc	r27, r27
    5bbe:	bc 01       	movw	r22, r24
    5bc0:	cd 01       	movw	r24, r26
    5bc2:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <__floatsisf>
    5bc6:	dc 01       	movw	r26, r24
    5bc8:	cb 01       	movw	r24, r22
    5bca:	9c 01       	movw	r18, r24
    5bcc:	ad 01       	movw	r20, r26
    5bce:	c7 01       	movw	r24, r14
    5bd0:	b6 01       	movw	r22, r12
    5bd2:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__subsf3>
    5bd6:	dc 01       	movw	r26, r24
    5bd8:	cb 01       	movw	r24, r22
    5bda:	8b 87       	std	Y+11, r24	; 0x0b
    5bdc:	9c 87       	std	Y+12, r25	; 0x0c
    5bde:	ad 87       	std	Y+13, r26	; 0x0d
    5be0:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    5be2:	8b 81       	ldd	r24, Y+3	; 0x03
    5be4:	9c 81       	ldd	r25, Y+4	; 0x04
    5be6:	01 96       	adiw	r24, 0x01	; 1
    5be8:	8b 83       	std	Y+3, r24	; 0x03
    5bea:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    5bec:	89 81       	ldd	r24, Y+1	; 0x01
    5bee:	9a 81       	ldd	r25, Y+2	; 0x02
    5bf0:	01 97       	sbiw	r24, 0x01	; 1
    5bf2:	89 83       	std	Y+1, r24	; 0x01
    5bf4:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    5bf6:	89 81       	ldd	r24, Y+1	; 0x01
    5bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfa:	18 16       	cp	r1, r24
    5bfc:	19 06       	cpc	r1, r25
    5bfe:	0c f4       	brge	.+2      	; 0x5c02 <ftoa_fixed+0x15a>
    5c00:	a7 cf       	rjmp	.-178    	; 0x5b50 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    5c02:	8b 81       	ldd	r24, Y+3	; 0x03
    5c04:	9c 81       	ldd	r25, Y+4	; 0x04
    5c06:	89 2b       	or	r24, r25
    5c08:	51 f4       	brne	.+20     	; 0x5c1e <ftoa_fixed+0x176>
        *buffer++ = '0';
    5c0a:	89 85       	ldd	r24, Y+9	; 0x09
    5c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c0e:	9c 01       	movw	r18, r24
    5c10:	2f 5f       	subi	r18, 0xFF	; 255
    5c12:	3f 4f       	sbci	r19, 0xFF	; 255
    5c14:	29 87       	std	Y+9, r18	; 0x09
    5c16:	3a 87       	std	Y+10, r19	; 0x0a
    5c18:	20 e3       	ldi	r18, 0x30	; 48
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	20 83       	st	Z, r18

    *buffer++ = '.';
    5c1e:	89 85       	ldd	r24, Y+9	; 0x09
    5c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c22:	9c 01       	movw	r18, r24
    5c24:	2f 5f       	subi	r18, 0xFF	; 255
    5c26:	3f 4f       	sbci	r19, 0xFF	; 255
    5c28:	29 87       	std	Y+9, r18	; 0x09
    5c2a:	3a 87       	std	Y+10, r19	; 0x0a
    5c2c:	2e e2       	ldi	r18, 0x2E	; 46
    5c2e:	fc 01       	movw	r30, r24
    5c30:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    5c32:	14 c0       	rjmp	.+40     	; 0x5c5c <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    5c34:	89 85       	ldd	r24, Y+9	; 0x09
    5c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c38:	9c 01       	movw	r18, r24
    5c3a:	2f 5f       	subi	r18, 0xFF	; 255
    5c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3e:	29 87       	std	Y+9, r18	; 0x09
    5c40:	3a 87       	std	Y+10, r19	; 0x0a
    5c42:	20 e3       	ldi	r18, 0x30	; 48
    5c44:	fc 01       	movw	r30, r24
    5c46:	20 83       	st	Z, r18
        --exponent;
    5c48:	89 81       	ldd	r24, Y+1	; 0x01
    5c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c4c:	01 97       	sbiw	r24, 0x01	; 1
    5c4e:	89 83       	std	Y+1, r24	; 0x01
    5c50:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    5c52:	8b 81       	ldd	r24, Y+3	; 0x03
    5c54:	9c 81       	ldd	r25, Y+4	; 0x04
    5c56:	01 96       	adiw	r24, 0x01	; 1
    5c58:	8b 83       	std	Y+3, r24	; 0x03
    5c5a:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    5c5c:	89 81       	ldd	r24, Y+1	; 0x01
    5c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c60:	99 23       	and	r25, r25
    5c62:	0c f0       	brlt	.+2      	; 0x5c66 <ftoa_fixed+0x1be>
    5c64:	58 c0       	rjmp	.+176    	; 0x5d16 <ftoa_fixed+0x26e>
    5c66:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <width.4854>
    5c6a:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <width.4854+0x1>
    5c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    5c70:	3c 81       	ldd	r19, Y+4	; 0x04
    5c72:	28 17       	cp	r18, r24
    5c74:	39 07       	cpc	r19, r25
    5c76:	f4 f2       	brlt	.-68     	; 0x5c34 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    5c78:	4e c0       	rjmp	.+156    	; 0x5d16 <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    5c7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c7e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5c80:	be 85       	ldd	r27, Y+14	; 0x0e
    5c82:	20 e0       	ldi	r18, 0x00	; 0
    5c84:	30 e0       	ldi	r19, 0x00	; 0
    5c86:	40 e2       	ldi	r20, 0x20	; 32
    5c88:	51 e4       	ldi	r21, 0x41	; 65
    5c8a:	bc 01       	movw	r22, r24
    5c8c:	cd 01       	movw	r24, r26
    5c8e:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5c92:	dc 01       	movw	r26, r24
    5c94:	cb 01       	movw	r24, r22
    5c96:	bc 01       	movw	r22, r24
    5c98:	cd 01       	movw	r24, r26
    5c9a:	0e 94 a8 30 	call	0x6150	; 0x6150 <__fixsfsi>
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	cb 01       	movw	r24, r22
    5ca2:	8f 83       	std	Y+7, r24	; 0x07
    5ca4:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5ca6:	89 85       	ldd	r24, Y+9	; 0x09
    5ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5caa:	9c 01       	movw	r18, r24
    5cac:	2f 5f       	subi	r18, 0xFF	; 255
    5cae:	3f 4f       	sbci	r19, 0xFF	; 255
    5cb0:	29 87       	std	Y+9, r18	; 0x09
    5cb2:	3a 87       	std	Y+10, r19	; 0x0a
    5cb4:	2f 81       	ldd	r18, Y+7	; 0x07
    5cb6:	20 5d       	subi	r18, 0xD0	; 208
    5cb8:	fc 01       	movw	r30, r24
    5cba:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5cbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cbe:	9c 85       	ldd	r25, Y+12	; 0x0c
    5cc0:	ad 85       	ldd	r26, Y+13	; 0x0d
    5cc2:	be 85       	ldd	r27, Y+14	; 0x0e
    5cc4:	20 e0       	ldi	r18, 0x00	; 0
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	40 e2       	ldi	r20, 0x20	; 32
    5cca:	51 e4       	ldi	r21, 0x41	; 65
    5ccc:	bc 01       	movw	r22, r24
    5cce:	cd 01       	movw	r24, r26
    5cd0:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5cd4:	dc 01       	movw	r26, r24
    5cd6:	cb 01       	movw	r24, r22
    5cd8:	6c 01       	movw	r12, r24
    5cda:	7d 01       	movw	r14, r26
    5cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    5cde:	98 85       	ldd	r25, Y+8	; 0x08
    5ce0:	09 2e       	mov	r0, r25
    5ce2:	00 0c       	add	r0, r0
    5ce4:	aa 0b       	sbc	r26, r26
    5ce6:	bb 0b       	sbc	r27, r27
    5ce8:	bc 01       	movw	r22, r24
    5cea:	cd 01       	movw	r24, r26
    5cec:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <__floatsisf>
    5cf0:	dc 01       	movw	r26, r24
    5cf2:	cb 01       	movw	r24, r22
    5cf4:	9c 01       	movw	r18, r24
    5cf6:	ad 01       	movw	r20, r26
    5cf8:	c7 01       	movw	r24, r14
    5cfa:	b6 01       	movw	r22, r12
    5cfc:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__subsf3>
    5d00:	dc 01       	movw	r26, r24
    5d02:	cb 01       	movw	r24, r22
    5d04:	8b 87       	std	Y+11, r24	; 0x0b
    5d06:	9c 87       	std	Y+12, r25	; 0x0c
    5d08:	ad 87       	std	Y+13, r26	; 0x0d
    5d0a:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    5d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d10:	01 96       	adiw	r24, 0x01	; 1
    5d12:	8b 83       	std	Y+3, r24	; 0x03
    5d14:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    5d16:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <width.4854>
    5d1a:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <width.4854+0x1>
    5d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    5d20:	3c 81       	ldd	r19, Y+4	; 0x04
    5d22:	28 17       	cp	r18, r24
    5d24:	39 07       	cpc	r19, r25
    5d26:	0c f4       	brge	.+2      	; 0x5d2a <ftoa_fixed+0x282>
    5d28:	a8 cf       	rjmp	.-176    	; 0x5c7a <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    5d2a:	89 85       	ldd	r24, Y+9	; 0x09
    5d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d2e:	fc 01       	movw	r30, r24
    5d30:	10 82       	st	Z, r1
}
    5d32:	2e 96       	adiw	r28, 0x0e	; 14
    5d34:	cd bf       	out	0x3d, r28	; 61
    5d36:	de bf       	out	0x3e, r29	; 62
    5d38:	df 91       	pop	r29
    5d3a:	cf 91       	pop	r28
    5d3c:	ff 90       	pop	r15
    5d3e:	ef 90       	pop	r14
    5d40:	df 90       	pop	r13
    5d42:	cf 90       	pop	r12
    5d44:	08 95       	ret

00005d46 <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    5d46:	cf 92       	push	r12
    5d48:	df 92       	push	r13
    5d4a:	ef 92       	push	r14
    5d4c:	ff 92       	push	r15
    5d4e:	cf 93       	push	r28
    5d50:	df 93       	push	r29
    5d52:	cd b7       	in	r28, 0x3d	; 61
    5d54:	de b7       	in	r29, 0x3e	; 62
    5d56:	2e 97       	sbiw	r28, 0x0e	; 14
    5d58:	cd bf       	out	0x3d, r28	; 61
    5d5a:	de bf       	out	0x3e, r29	; 62
    5d5c:	89 87       	std	Y+9, r24	; 0x09
    5d5e:	9a 87       	std	Y+10, r25	; 0x0a
    5d60:	4b 87       	std	Y+11, r20	; 0x0b
    5d62:	5c 87       	std	Y+12, r21	; 0x0c
    5d64:	6d 87       	std	Y+13, r22	; 0x0d
    5d66:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    5d68:	1b 82       	std	Y+3, r1	; 0x03
    5d6a:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5d6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d70:	ad 85       	ldd	r26, Y+13	; 0x0d
    5d72:	be 85       	ldd	r27, Y+14	; 0x0e
    5d74:	20 e0       	ldi	r18, 0x00	; 0
    5d76:	30 e0       	ldi	r19, 0x00	; 0
    5d78:	a9 01       	movw	r20, r18
    5d7a:	bc 01       	movw	r22, r24
    5d7c:	cd 01       	movw	r24, r26
    5d7e:	0e 94 31 30 	call	0x6062	; 0x6062 <__cmpsf2>
    5d82:	88 23       	and	r24, r24
    5d84:	59 f4       	brne	.+22     	; 0x5d9c <ftoa_sci+0x56>
        buffer[0] = '0';
    5d86:	89 85       	ldd	r24, Y+9	; 0x09
    5d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d8a:	20 e3       	ldi	r18, 0x30	; 48
    5d8c:	fc 01       	movw	r30, r24
    5d8e:	20 83       	st	Z, r18
        buffer[1] = '\0';
    5d90:	89 85       	ldd	r24, Y+9	; 0x09
    5d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d94:	01 96       	adiw	r24, 0x01	; 1
    5d96:	fc 01       	movw	r30, r24
    5d98:	10 82       	st	Z, r1
        return;
    5d9a:	ec c0       	rjmp	.+472    	; 0x5f74 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    5d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5da0:	ad 85       	ldd	r26, Y+13	; 0x0d
    5da2:	be 85       	ldd	r27, Y+14	; 0x0e
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	a9 01       	movw	r20, r18
    5daa:	bc 01       	movw	r22, r24
    5dac:	cd 01       	movw	r24, r26
    5dae:	0e 94 31 30 	call	0x6062	; 0x6062 <__cmpsf2>
    5db2:	88 23       	and	r24, r24
    5db4:	9c f4       	brge	.+38     	; 0x5ddc <ftoa_sci+0x96>
        *buffer++ = '-';
    5db6:	89 85       	ldd	r24, Y+9	; 0x09
    5db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dba:	9c 01       	movw	r18, r24
    5dbc:	2f 5f       	subi	r18, 0xFF	; 255
    5dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5dc0:	29 87       	std	Y+9, r18	; 0x09
    5dc2:	3a 87       	std	Y+10, r19	; 0x0a
    5dc4:	2d e2       	ldi	r18, 0x2D	; 45
    5dc6:	fc 01       	movw	r30, r24
    5dc8:	20 83       	st	Z, r18
        value = -value;
    5dca:	8b 85       	ldd	r24, Y+11	; 0x0b
    5dcc:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dce:	ad 85       	ldd	r26, Y+13	; 0x0d
    5dd0:	be 85       	ldd	r27, Y+14	; 0x0e
    5dd2:	b0 58       	subi	r27, 0x80	; 128
    5dd4:	8b 87       	std	Y+11, r24	; 0x0b
    5dd6:	9c 87       	std	Y+12, r25	; 0x0c
    5dd8:	ad 87       	std	Y+13, r26	; 0x0d
    5dda:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    5ddc:	ce 01       	movw	r24, r28
    5dde:	0b 96       	adiw	r24, 0x0b	; 11
    5de0:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <normalize>
    5de4:	8b 83       	std	Y+3, r24	; 0x03
    5de6:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    5de8:	8b 85       	ldd	r24, Y+11	; 0x0b
    5dea:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dec:	ad 85       	ldd	r26, Y+13	; 0x0d
    5dee:	be 85       	ldd	r27, Y+14	; 0x0e
    5df0:	20 e0       	ldi	r18, 0x00	; 0
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	40 e2       	ldi	r20, 0x20	; 32
    5df6:	51 e4       	ldi	r21, 0x41	; 65
    5df8:	bc 01       	movw	r22, r24
    5dfa:	cd 01       	movw	r24, r26
    5dfc:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5e00:	dc 01       	movw	r26, r24
    5e02:	cb 01       	movw	r24, r22
    5e04:	bc 01       	movw	r22, r24
    5e06:	cd 01       	movw	r24, r26
    5e08:	0e 94 a8 30 	call	0x6150	; 0x6150 <__fixsfsi>
    5e0c:	dc 01       	movw	r26, r24
    5e0e:	cb 01       	movw	r24, r22
    5e10:	8d 83       	std	Y+5, r24	; 0x05
    5e12:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    5e14:	89 85       	ldd	r24, Y+9	; 0x09
    5e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e18:	9c 01       	movw	r18, r24
    5e1a:	2f 5f       	subi	r18, 0xFF	; 255
    5e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e1e:	29 87       	std	Y+9, r18	; 0x09
    5e20:	3a 87       	std	Y+10, r19	; 0x0a
    5e22:	2d 81       	ldd	r18, Y+5	; 0x05
    5e24:	20 5d       	subi	r18, 0xD0	; 208
    5e26:	fc 01       	movw	r30, r24
    5e28:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    5e2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e2e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5e30:	be 85       	ldd	r27, Y+14	; 0x0e
    5e32:	20 e0       	ldi	r18, 0x00	; 0
    5e34:	30 e0       	ldi	r19, 0x00	; 0
    5e36:	40 e2       	ldi	r20, 0x20	; 32
    5e38:	51 e4       	ldi	r21, 0x41	; 65
    5e3a:	bc 01       	movw	r22, r24
    5e3c:	cd 01       	movw	r24, r26
    5e3e:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5e42:	dc 01       	movw	r26, r24
    5e44:	cb 01       	movw	r24, r22
    5e46:	6c 01       	movw	r12, r24
    5e48:	7d 01       	movw	r14, r26
    5e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5e4e:	09 2e       	mov	r0, r25
    5e50:	00 0c       	add	r0, r0
    5e52:	aa 0b       	sbc	r26, r26
    5e54:	bb 0b       	sbc	r27, r27
    5e56:	bc 01       	movw	r22, r24
    5e58:	cd 01       	movw	r24, r26
    5e5a:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <__floatsisf>
    5e5e:	dc 01       	movw	r26, r24
    5e60:	cb 01       	movw	r24, r22
    5e62:	9c 01       	movw	r18, r24
    5e64:	ad 01       	movw	r20, r26
    5e66:	c7 01       	movw	r24, r14
    5e68:	b6 01       	movw	r22, r12
    5e6a:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__subsf3>
    5e6e:	dc 01       	movw	r26, r24
    5e70:	cb 01       	movw	r24, r22
    5e72:	8b 87       	std	Y+11, r24	; 0x0b
    5e74:	9c 87       	std	Y+12, r25	; 0x0c
    5e76:	ad 87       	std	Y+13, r26	; 0x0d
    5e78:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    5e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    5e7e:	01 97       	sbiw	r24, 0x01	; 1
    5e80:	8b 83       	std	Y+3, r24	; 0x03
    5e82:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    5e84:	89 85       	ldd	r24, Y+9	; 0x09
    5e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e88:	9c 01       	movw	r18, r24
    5e8a:	2f 5f       	subi	r18, 0xFF	; 255
    5e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e8e:	29 87       	std	Y+9, r18	; 0x09
    5e90:	3a 87       	std	Y+10, r19	; 0x0a
    5e92:	2e e2       	ldi	r18, 0x2E	; 46
    5e94:	fc 01       	movw	r30, r24
    5e96:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    5e98:	19 82       	std	Y+1, r1	; 0x01
    5e9a:	1a 82       	std	Y+2, r1	; 0x02
    5e9c:	4e c0       	rjmp	.+156    	; 0x5f3a <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    5e9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ea0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ea2:	ad 85       	ldd	r26, Y+13	; 0x0d
    5ea4:	be 85       	ldd	r27, Y+14	; 0x0e
    5ea6:	20 e0       	ldi	r18, 0x00	; 0
    5ea8:	30 e0       	ldi	r19, 0x00	; 0
    5eaa:	40 e2       	ldi	r20, 0x20	; 32
    5eac:	51 e4       	ldi	r21, 0x41	; 65
    5eae:	bc 01       	movw	r22, r24
    5eb0:	cd 01       	movw	r24, r26
    5eb2:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5eb6:	dc 01       	movw	r26, r24
    5eb8:	cb 01       	movw	r24, r22
    5eba:	bc 01       	movw	r22, r24
    5ebc:	cd 01       	movw	r24, r26
    5ebe:	0e 94 a8 30 	call	0x6150	; 0x6150 <__fixsfsi>
    5ec2:	dc 01       	movw	r26, r24
    5ec4:	cb 01       	movw	r24, r22
    5ec6:	8f 83       	std	Y+7, r24	; 0x07
    5ec8:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5eca:	89 85       	ldd	r24, Y+9	; 0x09
    5ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ece:	9c 01       	movw	r18, r24
    5ed0:	2f 5f       	subi	r18, 0xFF	; 255
    5ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed4:	29 87       	std	Y+9, r18	; 0x09
    5ed6:	3a 87       	std	Y+10, r19	; 0x0a
    5ed8:	2f 81       	ldd	r18, Y+7	; 0x07
    5eda:	20 5d       	subi	r18, 0xD0	; 208
    5edc:	fc 01       	movw	r30, r24
    5ede:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5ee0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ee2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ee4:	ad 85       	ldd	r26, Y+13	; 0x0d
    5ee6:	be 85       	ldd	r27, Y+14	; 0x0e
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	40 e2       	ldi	r20, 0x20	; 32
    5eee:	51 e4       	ldi	r21, 0x41	; 65
    5ef0:	bc 01       	movw	r22, r24
    5ef2:	cd 01       	movw	r24, r26
    5ef4:	0e 94 95 31 	call	0x632a	; 0x632a <__mulsf3>
    5ef8:	dc 01       	movw	r26, r24
    5efa:	cb 01       	movw	r24, r22
    5efc:	6c 01       	movw	r12, r24
    5efe:	7d 01       	movw	r14, r26
    5f00:	8f 81       	ldd	r24, Y+7	; 0x07
    5f02:	98 85       	ldd	r25, Y+8	; 0x08
    5f04:	09 2e       	mov	r0, r25
    5f06:	00 0c       	add	r0, r0
    5f08:	aa 0b       	sbc	r26, r26
    5f0a:	bb 0b       	sbc	r27, r27
    5f0c:	bc 01       	movw	r22, r24
    5f0e:	cd 01       	movw	r24, r26
    5f10:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <__floatsisf>
    5f14:	dc 01       	movw	r26, r24
    5f16:	cb 01       	movw	r24, r22
    5f18:	9c 01       	movw	r18, r24
    5f1a:	ad 01       	movw	r20, r26
    5f1c:	c7 01       	movw	r24, r14
    5f1e:	b6 01       	movw	r22, r12
    5f20:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__subsf3>
    5f24:	dc 01       	movw	r26, r24
    5f26:	cb 01       	movw	r24, r22
    5f28:	8b 87       	std	Y+11, r24	; 0x0b
    5f2a:	9c 87       	std	Y+12, r25	; 0x0c
    5f2c:	ad 87       	std	Y+13, r26	; 0x0d
    5f2e:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    5f30:	89 81       	ldd	r24, Y+1	; 0x01
    5f32:	9a 81       	ldd	r25, Y+2	; 0x02
    5f34:	01 96       	adiw	r24, 0x01	; 1
    5f36:	89 83       	std	Y+1, r24	; 0x01
    5f38:	9a 83       	std	Y+2, r25	; 0x02
    5f3a:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <width.4871>
    5f3e:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <width.4871+0x1>
    5f42:	29 81       	ldd	r18, Y+1	; 0x01
    5f44:	3a 81       	ldd	r19, Y+2	; 0x02
    5f46:	28 17       	cp	r18, r24
    5f48:	39 07       	cpc	r19, r25
    5f4a:	0c f4       	brge	.+2      	; 0x5f4e <ftoa_sci+0x208>
    5f4c:	a8 cf       	rjmp	.-176    	; 0x5e9e <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    5f4e:	89 85       	ldd	r24, Y+9	; 0x09
    5f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f52:	9c 01       	movw	r18, r24
    5f54:	2f 5f       	subi	r18, 0xFF	; 255
    5f56:	3f 4f       	sbci	r19, 0xFF	; 255
    5f58:	29 87       	std	Y+9, r18	; 0x09
    5f5a:	3a 87       	std	Y+10, r19	; 0x0a
    5f5c:	25 e6       	ldi	r18, 0x65	; 101
    5f5e:	fc 01       	movw	r30, r24
    5f60:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    5f62:	29 85       	ldd	r18, Y+9	; 0x09
    5f64:	3a 85       	ldd	r19, Y+10	; 0x0a
    5f66:	8b 81       	ldd	r24, Y+3	; 0x03
    5f68:	9c 81       	ldd	r25, Y+4	; 0x04
    5f6a:	4a e0       	ldi	r20, 0x0A	; 10
    5f6c:	50 e0       	ldi	r21, 0x00	; 0
    5f6e:	b9 01       	movw	r22, r18
    5f70:	0e 94 23 32 	call	0x6446	; 0x6446 <itoa>
}
    5f74:	2e 96       	adiw	r28, 0x0e	; 14
    5f76:	cd bf       	out	0x3d, r28	; 61
    5f78:	de bf       	out	0x3e, r29	; 62
    5f7a:	df 91       	pop	r29
    5f7c:	cf 91       	pop	r28
    5f7e:	ff 90       	pop	r15
    5f80:	ef 90       	pop	r14
    5f82:	df 90       	pop	r13
    5f84:	cf 90       	pop	r12
    5f86:	08 95       	ret

00005f88 <__subsf3>:
    5f88:	50 58       	subi	r21, 0x80	; 128

00005f8a <__addsf3>:
    5f8a:	bb 27       	eor	r27, r27
    5f8c:	aa 27       	eor	r26, r26
    5f8e:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__addsf3x>
    5f92:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__fp_round>
    5f96:	0e 94 48 31 	call	0x6290	; 0x6290 <__fp_pscA>
    5f9a:	38 f0       	brcs	.+14     	; 0x5faa <__addsf3+0x20>
    5f9c:	0e 94 4f 31 	call	0x629e	; 0x629e <__fp_pscB>
    5fa0:	20 f0       	brcs	.+8      	; 0x5faa <__addsf3+0x20>
    5fa2:	39 f4       	brne	.+14     	; 0x5fb2 <__addsf3+0x28>
    5fa4:	9f 3f       	cpi	r25, 0xFF	; 255
    5fa6:	19 f4       	brne	.+6      	; 0x5fae <__addsf3+0x24>
    5fa8:	26 f4       	brtc	.+8      	; 0x5fb2 <__addsf3+0x28>
    5faa:	0c 94 45 31 	jmp	0x628a	; 0x628a <__fp_nan>
    5fae:	0e f4       	brtc	.+2      	; 0x5fb2 <__addsf3+0x28>
    5fb0:	e0 95       	com	r30
    5fb2:	e7 fb       	bst	r30, 7
    5fb4:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__fp_inf>

00005fb8 <__addsf3x>:
    5fb8:	e9 2f       	mov	r30, r25
    5fba:	0e 94 67 31 	call	0x62ce	; 0x62ce <__fp_split3>
    5fbe:	58 f3       	brcs	.-42     	; 0x5f96 <__addsf3+0xc>
    5fc0:	ba 17       	cp	r27, r26
    5fc2:	62 07       	cpc	r22, r18
    5fc4:	73 07       	cpc	r23, r19
    5fc6:	84 07       	cpc	r24, r20
    5fc8:	95 07       	cpc	r25, r21
    5fca:	20 f0       	brcs	.+8      	; 0x5fd4 <__addsf3x+0x1c>
    5fcc:	79 f4       	brne	.+30     	; 0x5fec <__addsf3x+0x34>
    5fce:	a6 f5       	brtc	.+104    	; 0x6038 <__addsf3x+0x80>
    5fd0:	0c 94 89 31 	jmp	0x6312	; 0x6312 <__fp_zero>
    5fd4:	0e f4       	brtc	.+2      	; 0x5fd8 <__addsf3x+0x20>
    5fd6:	e0 95       	com	r30
    5fd8:	0b 2e       	mov	r0, r27
    5fda:	ba 2f       	mov	r27, r26
    5fdc:	a0 2d       	mov	r26, r0
    5fde:	0b 01       	movw	r0, r22
    5fe0:	b9 01       	movw	r22, r18
    5fe2:	90 01       	movw	r18, r0
    5fe4:	0c 01       	movw	r0, r24
    5fe6:	ca 01       	movw	r24, r20
    5fe8:	a0 01       	movw	r20, r0
    5fea:	11 24       	eor	r1, r1
    5fec:	ff 27       	eor	r31, r31
    5fee:	59 1b       	sub	r21, r25
    5ff0:	99 f0       	breq	.+38     	; 0x6018 <__addsf3x+0x60>
    5ff2:	59 3f       	cpi	r21, 0xF9	; 249
    5ff4:	50 f4       	brcc	.+20     	; 0x600a <__addsf3x+0x52>
    5ff6:	50 3e       	cpi	r21, 0xE0	; 224
    5ff8:	68 f1       	brcs	.+90     	; 0x6054 <__addsf3x+0x9c>
    5ffa:	1a 16       	cp	r1, r26
    5ffc:	f0 40       	sbci	r31, 0x00	; 0
    5ffe:	a2 2f       	mov	r26, r18
    6000:	23 2f       	mov	r18, r19
    6002:	34 2f       	mov	r19, r20
    6004:	44 27       	eor	r20, r20
    6006:	58 5f       	subi	r21, 0xF8	; 248
    6008:	f3 cf       	rjmp	.-26     	; 0x5ff0 <__addsf3x+0x38>
    600a:	46 95       	lsr	r20
    600c:	37 95       	ror	r19
    600e:	27 95       	ror	r18
    6010:	a7 95       	ror	r26
    6012:	f0 40       	sbci	r31, 0x00	; 0
    6014:	53 95       	inc	r21
    6016:	c9 f7       	brne	.-14     	; 0x600a <__addsf3x+0x52>
    6018:	7e f4       	brtc	.+30     	; 0x6038 <__addsf3x+0x80>
    601a:	1f 16       	cp	r1, r31
    601c:	ba 0b       	sbc	r27, r26
    601e:	62 0b       	sbc	r22, r18
    6020:	73 0b       	sbc	r23, r19
    6022:	84 0b       	sbc	r24, r20
    6024:	ba f0       	brmi	.+46     	; 0x6054 <__addsf3x+0x9c>
    6026:	91 50       	subi	r25, 0x01	; 1
    6028:	a1 f0       	breq	.+40     	; 0x6052 <__addsf3x+0x9a>
    602a:	ff 0f       	add	r31, r31
    602c:	bb 1f       	adc	r27, r27
    602e:	66 1f       	adc	r22, r22
    6030:	77 1f       	adc	r23, r23
    6032:	88 1f       	adc	r24, r24
    6034:	c2 f7       	brpl	.-16     	; 0x6026 <__addsf3x+0x6e>
    6036:	0e c0       	rjmp	.+28     	; 0x6054 <__addsf3x+0x9c>
    6038:	ba 0f       	add	r27, r26
    603a:	62 1f       	adc	r22, r18
    603c:	73 1f       	adc	r23, r19
    603e:	84 1f       	adc	r24, r20
    6040:	48 f4       	brcc	.+18     	; 0x6054 <__addsf3x+0x9c>
    6042:	87 95       	ror	r24
    6044:	77 95       	ror	r23
    6046:	67 95       	ror	r22
    6048:	b7 95       	ror	r27
    604a:	f7 95       	ror	r31
    604c:	9e 3f       	cpi	r25, 0xFE	; 254
    604e:	08 f0       	brcs	.+2      	; 0x6052 <__addsf3x+0x9a>
    6050:	b0 cf       	rjmp	.-160    	; 0x5fb2 <__addsf3+0x28>
    6052:	93 95       	inc	r25
    6054:	88 0f       	add	r24, r24
    6056:	08 f0       	brcs	.+2      	; 0x605a <__addsf3x+0xa2>
    6058:	99 27       	eor	r25, r25
    605a:	ee 0f       	add	r30, r30
    605c:	97 95       	ror	r25
    605e:	87 95       	ror	r24
    6060:	08 95       	ret

00006062 <__cmpsf2>:
    6062:	0e 94 1b 31 	call	0x6236	; 0x6236 <__fp_cmp>
    6066:	08 f4       	brcc	.+2      	; 0x606a <__cmpsf2+0x8>
    6068:	81 e0       	ldi	r24, 0x01	; 1
    606a:	08 95       	ret

0000606c <__divsf3>:
    606c:	0e 94 4a 30 	call	0x6094	; 0x6094 <__divsf3x>
    6070:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__fp_round>
    6074:	0e 94 4f 31 	call	0x629e	; 0x629e <__fp_pscB>
    6078:	58 f0       	brcs	.+22     	; 0x6090 <__divsf3+0x24>
    607a:	0e 94 48 31 	call	0x6290	; 0x6290 <__fp_pscA>
    607e:	40 f0       	brcs	.+16     	; 0x6090 <__divsf3+0x24>
    6080:	29 f4       	brne	.+10     	; 0x608c <__divsf3+0x20>
    6082:	5f 3f       	cpi	r21, 0xFF	; 255
    6084:	29 f0       	breq	.+10     	; 0x6090 <__divsf3+0x24>
    6086:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__fp_inf>
    608a:	51 11       	cpse	r21, r1
    608c:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__fp_szero>
    6090:	0c 94 45 31 	jmp	0x628a	; 0x628a <__fp_nan>

00006094 <__divsf3x>:
    6094:	0e 94 67 31 	call	0x62ce	; 0x62ce <__fp_split3>
    6098:	68 f3       	brcs	.-38     	; 0x6074 <__divsf3+0x8>

0000609a <__divsf3_pse>:
    609a:	99 23       	and	r25, r25
    609c:	b1 f3       	breq	.-20     	; 0x608a <__divsf3+0x1e>
    609e:	55 23       	and	r21, r21
    60a0:	91 f3       	breq	.-28     	; 0x6086 <__divsf3+0x1a>
    60a2:	95 1b       	sub	r25, r21
    60a4:	55 0b       	sbc	r21, r21
    60a6:	bb 27       	eor	r27, r27
    60a8:	aa 27       	eor	r26, r26
    60aa:	62 17       	cp	r22, r18
    60ac:	73 07       	cpc	r23, r19
    60ae:	84 07       	cpc	r24, r20
    60b0:	38 f0       	brcs	.+14     	; 0x60c0 <__divsf3_pse+0x26>
    60b2:	9f 5f       	subi	r25, 0xFF	; 255
    60b4:	5f 4f       	sbci	r21, 0xFF	; 255
    60b6:	22 0f       	add	r18, r18
    60b8:	33 1f       	adc	r19, r19
    60ba:	44 1f       	adc	r20, r20
    60bc:	aa 1f       	adc	r26, r26
    60be:	a9 f3       	breq	.-22     	; 0x60aa <__divsf3_pse+0x10>
    60c0:	35 d0       	rcall	.+106    	; 0x612c <__divsf3_pse+0x92>
    60c2:	0e 2e       	mov	r0, r30
    60c4:	3a f0       	brmi	.+14     	; 0x60d4 <__divsf3_pse+0x3a>
    60c6:	e0 e8       	ldi	r30, 0x80	; 128
    60c8:	32 d0       	rcall	.+100    	; 0x612e <__divsf3_pse+0x94>
    60ca:	91 50       	subi	r25, 0x01	; 1
    60cc:	50 40       	sbci	r21, 0x00	; 0
    60ce:	e6 95       	lsr	r30
    60d0:	00 1c       	adc	r0, r0
    60d2:	ca f7       	brpl	.-14     	; 0x60c6 <__divsf3_pse+0x2c>
    60d4:	2b d0       	rcall	.+86     	; 0x612c <__divsf3_pse+0x92>
    60d6:	fe 2f       	mov	r31, r30
    60d8:	29 d0       	rcall	.+82     	; 0x612c <__divsf3_pse+0x92>
    60da:	66 0f       	add	r22, r22
    60dc:	77 1f       	adc	r23, r23
    60de:	88 1f       	adc	r24, r24
    60e0:	bb 1f       	adc	r27, r27
    60e2:	26 17       	cp	r18, r22
    60e4:	37 07       	cpc	r19, r23
    60e6:	48 07       	cpc	r20, r24
    60e8:	ab 07       	cpc	r26, r27
    60ea:	b0 e8       	ldi	r27, 0x80	; 128
    60ec:	09 f0       	breq	.+2      	; 0x60f0 <__divsf3_pse+0x56>
    60ee:	bb 0b       	sbc	r27, r27
    60f0:	80 2d       	mov	r24, r0
    60f2:	bf 01       	movw	r22, r30
    60f4:	ff 27       	eor	r31, r31
    60f6:	93 58       	subi	r25, 0x83	; 131
    60f8:	5f 4f       	sbci	r21, 0xFF	; 255
    60fa:	3a f0       	brmi	.+14     	; 0x610a <__divsf3_pse+0x70>
    60fc:	9e 3f       	cpi	r25, 0xFE	; 254
    60fe:	51 05       	cpc	r21, r1
    6100:	78 f0       	brcs	.+30     	; 0x6120 <__divsf3_pse+0x86>
    6102:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__fp_inf>
    6106:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__fp_szero>
    610a:	5f 3f       	cpi	r21, 0xFF	; 255
    610c:	e4 f3       	brlt	.-8      	; 0x6106 <__divsf3_pse+0x6c>
    610e:	98 3e       	cpi	r25, 0xE8	; 232
    6110:	d4 f3       	brlt	.-12     	; 0x6106 <__divsf3_pse+0x6c>
    6112:	86 95       	lsr	r24
    6114:	77 95       	ror	r23
    6116:	67 95       	ror	r22
    6118:	b7 95       	ror	r27
    611a:	f7 95       	ror	r31
    611c:	9f 5f       	subi	r25, 0xFF	; 255
    611e:	c9 f7       	brne	.-14     	; 0x6112 <__divsf3_pse+0x78>
    6120:	88 0f       	add	r24, r24
    6122:	91 1d       	adc	r25, r1
    6124:	96 95       	lsr	r25
    6126:	87 95       	ror	r24
    6128:	97 f9       	bld	r25, 7
    612a:	08 95       	ret
    612c:	e1 e0       	ldi	r30, 0x01	; 1
    612e:	66 0f       	add	r22, r22
    6130:	77 1f       	adc	r23, r23
    6132:	88 1f       	adc	r24, r24
    6134:	bb 1f       	adc	r27, r27
    6136:	62 17       	cp	r22, r18
    6138:	73 07       	cpc	r23, r19
    613a:	84 07       	cpc	r24, r20
    613c:	ba 07       	cpc	r27, r26
    613e:	20 f0       	brcs	.+8      	; 0x6148 <__divsf3_pse+0xae>
    6140:	62 1b       	sub	r22, r18
    6142:	73 0b       	sbc	r23, r19
    6144:	84 0b       	sbc	r24, r20
    6146:	ba 0b       	sbc	r27, r26
    6148:	ee 1f       	adc	r30, r30
    614a:	88 f7       	brcc	.-30     	; 0x612e <__divsf3_pse+0x94>
    614c:	e0 95       	com	r30
    614e:	08 95       	ret

00006150 <__fixsfsi>:
    6150:	0e 94 af 30 	call	0x615e	; 0x615e <__fixunssfsi>
    6154:	68 94       	set
    6156:	b1 11       	cpse	r27, r1
    6158:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__fp_szero>
    615c:	08 95       	ret

0000615e <__fixunssfsi>:
    615e:	0e 94 6f 31 	call	0x62de	; 0x62de <__fp_splitA>
    6162:	88 f0       	brcs	.+34     	; 0x6186 <__fixunssfsi+0x28>
    6164:	9f 57       	subi	r25, 0x7F	; 127
    6166:	98 f0       	brcs	.+38     	; 0x618e <__fixunssfsi+0x30>
    6168:	b9 2f       	mov	r27, r25
    616a:	99 27       	eor	r25, r25
    616c:	b7 51       	subi	r27, 0x17	; 23
    616e:	b0 f0       	brcs	.+44     	; 0x619c <__fixunssfsi+0x3e>
    6170:	e1 f0       	breq	.+56     	; 0x61aa <__fixunssfsi+0x4c>
    6172:	66 0f       	add	r22, r22
    6174:	77 1f       	adc	r23, r23
    6176:	88 1f       	adc	r24, r24
    6178:	99 1f       	adc	r25, r25
    617a:	1a f0       	brmi	.+6      	; 0x6182 <__fixunssfsi+0x24>
    617c:	ba 95       	dec	r27
    617e:	c9 f7       	brne	.-14     	; 0x6172 <__fixunssfsi+0x14>
    6180:	14 c0       	rjmp	.+40     	; 0x61aa <__fixunssfsi+0x4c>
    6182:	b1 30       	cpi	r27, 0x01	; 1
    6184:	91 f0       	breq	.+36     	; 0x61aa <__fixunssfsi+0x4c>
    6186:	0e 94 89 31 	call	0x6312	; 0x6312 <__fp_zero>
    618a:	b1 e0       	ldi	r27, 0x01	; 1
    618c:	08 95       	ret
    618e:	0c 94 89 31 	jmp	0x6312	; 0x6312 <__fp_zero>
    6192:	67 2f       	mov	r22, r23
    6194:	78 2f       	mov	r23, r24
    6196:	88 27       	eor	r24, r24
    6198:	b8 5f       	subi	r27, 0xF8	; 248
    619a:	39 f0       	breq	.+14     	; 0x61aa <__fixunssfsi+0x4c>
    619c:	b9 3f       	cpi	r27, 0xF9	; 249
    619e:	cc f3       	brlt	.-14     	; 0x6192 <__fixunssfsi+0x34>
    61a0:	86 95       	lsr	r24
    61a2:	77 95       	ror	r23
    61a4:	67 95       	ror	r22
    61a6:	b3 95       	inc	r27
    61a8:	d9 f7       	brne	.-10     	; 0x61a0 <__fixunssfsi+0x42>
    61aa:	3e f4       	brtc	.+14     	; 0x61ba <__fixunssfsi+0x5c>
    61ac:	90 95       	com	r25
    61ae:	80 95       	com	r24
    61b0:	70 95       	com	r23
    61b2:	61 95       	neg	r22
    61b4:	7f 4f       	sbci	r23, 0xFF	; 255
    61b6:	8f 4f       	sbci	r24, 0xFF	; 255
    61b8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ba:	08 95       	ret

000061bc <__floatunsisf>:
    61bc:	e8 94       	clt
    61be:	09 c0       	rjmp	.+18     	; 0x61d2 <__floatsisf+0x12>

000061c0 <__floatsisf>:
    61c0:	97 fb       	bst	r25, 7
    61c2:	3e f4       	brtc	.+14     	; 0x61d2 <__floatsisf+0x12>
    61c4:	90 95       	com	r25
    61c6:	80 95       	com	r24
    61c8:	70 95       	com	r23
    61ca:	61 95       	neg	r22
    61cc:	7f 4f       	sbci	r23, 0xFF	; 255
    61ce:	8f 4f       	sbci	r24, 0xFF	; 255
    61d0:	9f 4f       	sbci	r25, 0xFF	; 255
    61d2:	99 23       	and	r25, r25
    61d4:	a9 f0       	breq	.+42     	; 0x6200 <__floatsisf+0x40>
    61d6:	f9 2f       	mov	r31, r25
    61d8:	96 e9       	ldi	r25, 0x96	; 150
    61da:	bb 27       	eor	r27, r27
    61dc:	93 95       	inc	r25
    61de:	f6 95       	lsr	r31
    61e0:	87 95       	ror	r24
    61e2:	77 95       	ror	r23
    61e4:	67 95       	ror	r22
    61e6:	b7 95       	ror	r27
    61e8:	f1 11       	cpse	r31, r1
    61ea:	f8 cf       	rjmp	.-16     	; 0x61dc <__floatsisf+0x1c>
    61ec:	fa f4       	brpl	.+62     	; 0x622c <__floatsisf+0x6c>
    61ee:	bb 0f       	add	r27, r27
    61f0:	11 f4       	brne	.+4      	; 0x61f6 <__floatsisf+0x36>
    61f2:	60 ff       	sbrs	r22, 0
    61f4:	1b c0       	rjmp	.+54     	; 0x622c <__floatsisf+0x6c>
    61f6:	6f 5f       	subi	r22, 0xFF	; 255
    61f8:	7f 4f       	sbci	r23, 0xFF	; 255
    61fa:	8f 4f       	sbci	r24, 0xFF	; 255
    61fc:	9f 4f       	sbci	r25, 0xFF	; 255
    61fe:	16 c0       	rjmp	.+44     	; 0x622c <__floatsisf+0x6c>
    6200:	88 23       	and	r24, r24
    6202:	11 f0       	breq	.+4      	; 0x6208 <__floatsisf+0x48>
    6204:	96 e9       	ldi	r25, 0x96	; 150
    6206:	11 c0       	rjmp	.+34     	; 0x622a <__floatsisf+0x6a>
    6208:	77 23       	and	r23, r23
    620a:	21 f0       	breq	.+8      	; 0x6214 <__floatsisf+0x54>
    620c:	9e e8       	ldi	r25, 0x8E	; 142
    620e:	87 2f       	mov	r24, r23
    6210:	76 2f       	mov	r23, r22
    6212:	05 c0       	rjmp	.+10     	; 0x621e <__floatsisf+0x5e>
    6214:	66 23       	and	r22, r22
    6216:	71 f0       	breq	.+28     	; 0x6234 <__floatsisf+0x74>
    6218:	96 e8       	ldi	r25, 0x86	; 134
    621a:	86 2f       	mov	r24, r22
    621c:	70 e0       	ldi	r23, 0x00	; 0
    621e:	60 e0       	ldi	r22, 0x00	; 0
    6220:	2a f0       	brmi	.+10     	; 0x622c <__floatsisf+0x6c>
    6222:	9a 95       	dec	r25
    6224:	66 0f       	add	r22, r22
    6226:	77 1f       	adc	r23, r23
    6228:	88 1f       	adc	r24, r24
    622a:	da f7       	brpl	.-10     	; 0x6222 <__floatsisf+0x62>
    622c:	88 0f       	add	r24, r24
    622e:	96 95       	lsr	r25
    6230:	87 95       	ror	r24
    6232:	97 f9       	bld	r25, 7
    6234:	08 95       	ret

00006236 <__fp_cmp>:
    6236:	99 0f       	add	r25, r25
    6238:	00 08       	sbc	r0, r0
    623a:	55 0f       	add	r21, r21
    623c:	aa 0b       	sbc	r26, r26
    623e:	e0 e8       	ldi	r30, 0x80	; 128
    6240:	fe ef       	ldi	r31, 0xFE	; 254
    6242:	16 16       	cp	r1, r22
    6244:	17 06       	cpc	r1, r23
    6246:	e8 07       	cpc	r30, r24
    6248:	f9 07       	cpc	r31, r25
    624a:	c0 f0       	brcs	.+48     	; 0x627c <__fp_cmp+0x46>
    624c:	12 16       	cp	r1, r18
    624e:	13 06       	cpc	r1, r19
    6250:	e4 07       	cpc	r30, r20
    6252:	f5 07       	cpc	r31, r21
    6254:	98 f0       	brcs	.+38     	; 0x627c <__fp_cmp+0x46>
    6256:	62 1b       	sub	r22, r18
    6258:	73 0b       	sbc	r23, r19
    625a:	84 0b       	sbc	r24, r20
    625c:	95 0b       	sbc	r25, r21
    625e:	39 f4       	brne	.+14     	; 0x626e <__fp_cmp+0x38>
    6260:	0a 26       	eor	r0, r26
    6262:	61 f0       	breq	.+24     	; 0x627c <__fp_cmp+0x46>
    6264:	23 2b       	or	r18, r19
    6266:	24 2b       	or	r18, r20
    6268:	25 2b       	or	r18, r21
    626a:	21 f4       	brne	.+8      	; 0x6274 <__fp_cmp+0x3e>
    626c:	08 95       	ret
    626e:	0a 26       	eor	r0, r26
    6270:	09 f4       	brne	.+2      	; 0x6274 <__fp_cmp+0x3e>
    6272:	a1 40       	sbci	r26, 0x01	; 1
    6274:	a6 95       	lsr	r26
    6276:	8f ef       	ldi	r24, 0xFF	; 255
    6278:	81 1d       	adc	r24, r1
    627a:	81 1d       	adc	r24, r1
    627c:	08 95       	ret

0000627e <__fp_inf>:
    627e:	97 f9       	bld	r25, 7
    6280:	9f 67       	ori	r25, 0x7F	; 127
    6282:	80 e8       	ldi	r24, 0x80	; 128
    6284:	70 e0       	ldi	r23, 0x00	; 0
    6286:	60 e0       	ldi	r22, 0x00	; 0
    6288:	08 95       	ret

0000628a <__fp_nan>:
    628a:	9f ef       	ldi	r25, 0xFF	; 255
    628c:	80 ec       	ldi	r24, 0xC0	; 192
    628e:	08 95       	ret

00006290 <__fp_pscA>:
    6290:	00 24       	eor	r0, r0
    6292:	0a 94       	dec	r0
    6294:	16 16       	cp	r1, r22
    6296:	17 06       	cpc	r1, r23
    6298:	18 06       	cpc	r1, r24
    629a:	09 06       	cpc	r0, r25
    629c:	08 95       	ret

0000629e <__fp_pscB>:
    629e:	00 24       	eor	r0, r0
    62a0:	0a 94       	dec	r0
    62a2:	12 16       	cp	r1, r18
    62a4:	13 06       	cpc	r1, r19
    62a6:	14 06       	cpc	r1, r20
    62a8:	05 06       	cpc	r0, r21
    62aa:	08 95       	ret

000062ac <__fp_round>:
    62ac:	09 2e       	mov	r0, r25
    62ae:	03 94       	inc	r0
    62b0:	00 0c       	add	r0, r0
    62b2:	11 f4       	brne	.+4      	; 0x62b8 <__fp_round+0xc>
    62b4:	88 23       	and	r24, r24
    62b6:	52 f0       	brmi	.+20     	; 0x62cc <__fp_round+0x20>
    62b8:	bb 0f       	add	r27, r27
    62ba:	40 f4       	brcc	.+16     	; 0x62cc <__fp_round+0x20>
    62bc:	bf 2b       	or	r27, r31
    62be:	11 f4       	brne	.+4      	; 0x62c4 <__fp_round+0x18>
    62c0:	60 ff       	sbrs	r22, 0
    62c2:	04 c0       	rjmp	.+8      	; 0x62cc <__fp_round+0x20>
    62c4:	6f 5f       	subi	r22, 0xFF	; 255
    62c6:	7f 4f       	sbci	r23, 0xFF	; 255
    62c8:	8f 4f       	sbci	r24, 0xFF	; 255
    62ca:	9f 4f       	sbci	r25, 0xFF	; 255
    62cc:	08 95       	ret

000062ce <__fp_split3>:
    62ce:	57 fd       	sbrc	r21, 7
    62d0:	90 58       	subi	r25, 0x80	; 128
    62d2:	44 0f       	add	r20, r20
    62d4:	55 1f       	adc	r21, r21
    62d6:	59 f0       	breq	.+22     	; 0x62ee <__fp_splitA+0x10>
    62d8:	5f 3f       	cpi	r21, 0xFF	; 255
    62da:	71 f0       	breq	.+28     	; 0x62f8 <__fp_splitA+0x1a>
    62dc:	47 95       	ror	r20

000062de <__fp_splitA>:
    62de:	88 0f       	add	r24, r24
    62e0:	97 fb       	bst	r25, 7
    62e2:	99 1f       	adc	r25, r25
    62e4:	61 f0       	breq	.+24     	; 0x62fe <__fp_splitA+0x20>
    62e6:	9f 3f       	cpi	r25, 0xFF	; 255
    62e8:	79 f0       	breq	.+30     	; 0x6308 <__fp_splitA+0x2a>
    62ea:	87 95       	ror	r24
    62ec:	08 95       	ret
    62ee:	12 16       	cp	r1, r18
    62f0:	13 06       	cpc	r1, r19
    62f2:	14 06       	cpc	r1, r20
    62f4:	55 1f       	adc	r21, r21
    62f6:	f2 cf       	rjmp	.-28     	; 0x62dc <__fp_split3+0xe>
    62f8:	46 95       	lsr	r20
    62fa:	f1 df       	rcall	.-30     	; 0x62de <__fp_splitA>
    62fc:	08 c0       	rjmp	.+16     	; 0x630e <__fp_splitA+0x30>
    62fe:	16 16       	cp	r1, r22
    6300:	17 06       	cpc	r1, r23
    6302:	18 06       	cpc	r1, r24
    6304:	99 1f       	adc	r25, r25
    6306:	f1 cf       	rjmp	.-30     	; 0x62ea <__fp_splitA+0xc>
    6308:	86 95       	lsr	r24
    630a:	71 05       	cpc	r23, r1
    630c:	61 05       	cpc	r22, r1
    630e:	08 94       	sec
    6310:	08 95       	ret

00006312 <__fp_zero>:
    6312:	e8 94       	clt

00006314 <__fp_szero>:
    6314:	bb 27       	eor	r27, r27
    6316:	66 27       	eor	r22, r22
    6318:	77 27       	eor	r23, r23
    631a:	cb 01       	movw	r24, r22
    631c:	97 f9       	bld	r25, 7
    631e:	08 95       	ret

00006320 <__gesf2>:
    6320:	0e 94 1b 31 	call	0x6236	; 0x6236 <__fp_cmp>
    6324:	08 f4       	brcc	.+2      	; 0x6328 <__gesf2+0x8>
    6326:	8f ef       	ldi	r24, 0xFF	; 255
    6328:	08 95       	ret

0000632a <__mulsf3>:
    632a:	0e 94 a8 31 	call	0x6350	; 0x6350 <__mulsf3x>
    632e:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__fp_round>
    6332:	0e 94 48 31 	call	0x6290	; 0x6290 <__fp_pscA>
    6336:	38 f0       	brcs	.+14     	; 0x6346 <__mulsf3+0x1c>
    6338:	0e 94 4f 31 	call	0x629e	; 0x629e <__fp_pscB>
    633c:	20 f0       	brcs	.+8      	; 0x6346 <__mulsf3+0x1c>
    633e:	95 23       	and	r25, r21
    6340:	11 f0       	breq	.+4      	; 0x6346 <__mulsf3+0x1c>
    6342:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__fp_inf>
    6346:	0c 94 45 31 	jmp	0x628a	; 0x628a <__fp_nan>
    634a:	11 24       	eor	r1, r1
    634c:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__fp_szero>

00006350 <__mulsf3x>:
    6350:	0e 94 67 31 	call	0x62ce	; 0x62ce <__fp_split3>
    6354:	70 f3       	brcs	.-36     	; 0x6332 <__mulsf3+0x8>

00006356 <__mulsf3_pse>:
    6356:	95 9f       	mul	r25, r21
    6358:	c1 f3       	breq	.-16     	; 0x634a <__mulsf3+0x20>
    635a:	95 0f       	add	r25, r21
    635c:	50 e0       	ldi	r21, 0x00	; 0
    635e:	55 1f       	adc	r21, r21
    6360:	62 9f       	mul	r22, r18
    6362:	f0 01       	movw	r30, r0
    6364:	72 9f       	mul	r23, r18
    6366:	bb 27       	eor	r27, r27
    6368:	f0 0d       	add	r31, r0
    636a:	b1 1d       	adc	r27, r1
    636c:	63 9f       	mul	r22, r19
    636e:	aa 27       	eor	r26, r26
    6370:	f0 0d       	add	r31, r0
    6372:	b1 1d       	adc	r27, r1
    6374:	aa 1f       	adc	r26, r26
    6376:	64 9f       	mul	r22, r20
    6378:	66 27       	eor	r22, r22
    637a:	b0 0d       	add	r27, r0
    637c:	a1 1d       	adc	r26, r1
    637e:	66 1f       	adc	r22, r22
    6380:	82 9f       	mul	r24, r18
    6382:	22 27       	eor	r18, r18
    6384:	b0 0d       	add	r27, r0
    6386:	a1 1d       	adc	r26, r1
    6388:	62 1f       	adc	r22, r18
    638a:	73 9f       	mul	r23, r19
    638c:	b0 0d       	add	r27, r0
    638e:	a1 1d       	adc	r26, r1
    6390:	62 1f       	adc	r22, r18
    6392:	83 9f       	mul	r24, r19
    6394:	a0 0d       	add	r26, r0
    6396:	61 1d       	adc	r22, r1
    6398:	22 1f       	adc	r18, r18
    639a:	74 9f       	mul	r23, r20
    639c:	33 27       	eor	r19, r19
    639e:	a0 0d       	add	r26, r0
    63a0:	61 1d       	adc	r22, r1
    63a2:	23 1f       	adc	r18, r19
    63a4:	84 9f       	mul	r24, r20
    63a6:	60 0d       	add	r22, r0
    63a8:	21 1d       	adc	r18, r1
    63aa:	82 2f       	mov	r24, r18
    63ac:	76 2f       	mov	r23, r22
    63ae:	6a 2f       	mov	r22, r26
    63b0:	11 24       	eor	r1, r1
    63b2:	9f 57       	subi	r25, 0x7F	; 127
    63b4:	50 40       	sbci	r21, 0x00	; 0
    63b6:	9a f0       	brmi	.+38     	; 0x63de <__mulsf3_pse+0x88>
    63b8:	f1 f0       	breq	.+60     	; 0x63f6 <__mulsf3_pse+0xa0>
    63ba:	88 23       	and	r24, r24
    63bc:	4a f0       	brmi	.+18     	; 0x63d0 <__mulsf3_pse+0x7a>
    63be:	ee 0f       	add	r30, r30
    63c0:	ff 1f       	adc	r31, r31
    63c2:	bb 1f       	adc	r27, r27
    63c4:	66 1f       	adc	r22, r22
    63c6:	77 1f       	adc	r23, r23
    63c8:	88 1f       	adc	r24, r24
    63ca:	91 50       	subi	r25, 0x01	; 1
    63cc:	50 40       	sbci	r21, 0x00	; 0
    63ce:	a9 f7       	brne	.-22     	; 0x63ba <__mulsf3_pse+0x64>
    63d0:	9e 3f       	cpi	r25, 0xFE	; 254
    63d2:	51 05       	cpc	r21, r1
    63d4:	80 f0       	brcs	.+32     	; 0x63f6 <__mulsf3_pse+0xa0>
    63d6:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__fp_inf>
    63da:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__fp_szero>
    63de:	5f 3f       	cpi	r21, 0xFF	; 255
    63e0:	e4 f3       	brlt	.-8      	; 0x63da <__mulsf3_pse+0x84>
    63e2:	98 3e       	cpi	r25, 0xE8	; 232
    63e4:	d4 f3       	brlt	.-12     	; 0x63da <__mulsf3_pse+0x84>
    63e6:	86 95       	lsr	r24
    63e8:	77 95       	ror	r23
    63ea:	67 95       	ror	r22
    63ec:	b7 95       	ror	r27
    63ee:	f7 95       	ror	r31
    63f0:	e7 95       	ror	r30
    63f2:	9f 5f       	subi	r25, 0xFF	; 255
    63f4:	c1 f7       	brne	.-16     	; 0x63e6 <__mulsf3_pse+0x90>
    63f6:	fe 2b       	or	r31, r30
    63f8:	88 0f       	add	r24, r24
    63fa:	91 1d       	adc	r25, r1
    63fc:	96 95       	lsr	r25
    63fe:	87 95       	ror	r24
    6400:	97 f9       	bld	r25, 7
    6402:	08 95       	ret

00006404 <__tablejump2__>:
    6404:	ee 0f       	add	r30, r30
    6406:	ff 1f       	adc	r31, r31
    6408:	88 1f       	adc	r24, r24
    640a:	8b bf       	out	0x3b, r24	; 59
    640c:	07 90       	elpm	r0, Z+
    640e:	f6 91       	elpm	r31, Z
    6410:	e0 2d       	mov	r30, r0
    6412:	19 94       	eijmp

00006414 <memcpy>:
    6414:	fb 01       	movw	r30, r22
    6416:	dc 01       	movw	r26, r24
    6418:	02 c0       	rjmp	.+4      	; 0x641e <memcpy+0xa>
    641a:	01 90       	ld	r0, Z+
    641c:	0d 92       	st	X+, r0
    641e:	41 50       	subi	r20, 0x01	; 1
    6420:	50 40       	sbci	r21, 0x00	; 0
    6422:	d8 f7       	brcc	.-10     	; 0x641a <memcpy+0x6>
    6424:	08 95       	ret

00006426 <memset>:
    6426:	dc 01       	movw	r26, r24
    6428:	01 c0       	rjmp	.+2      	; 0x642c <memset+0x6>
    642a:	6d 93       	st	X+, r22
    642c:	41 50       	subi	r20, 0x01	; 1
    642e:	50 40       	sbci	r21, 0x00	; 0
    6430:	e0 f7       	brcc	.-8      	; 0x642a <memset+0x4>
    6432:	08 95       	ret

00006434 <strlen>:
    6434:	fc 01       	movw	r30, r24
    6436:	01 90       	ld	r0, Z+
    6438:	00 20       	and	r0, r0
    643a:	e9 f7       	brne	.-6      	; 0x6436 <strlen+0x2>
    643c:	80 95       	com	r24
    643e:	90 95       	com	r25
    6440:	8e 0f       	add	r24, r30
    6442:	9f 1f       	adc	r25, r31
    6444:	08 95       	ret

00006446 <itoa>:
    6446:	45 32       	cpi	r20, 0x25	; 37
    6448:	51 05       	cpc	r21, r1
    644a:	20 f4       	brcc	.+8      	; 0x6454 <itoa+0xe>
    644c:	42 30       	cpi	r20, 0x02	; 2
    644e:	10 f0       	brcs	.+4      	; 0x6454 <itoa+0xe>
    6450:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__itoa_ncheck>
    6454:	fb 01       	movw	r30, r22
    6456:	10 82       	st	Z, r1
    6458:	cb 01       	movw	r24, r22
    645a:	08 95       	ret

0000645c <__itoa_ncheck>:
    645c:	bb 27       	eor	r27, r27
    645e:	4a 30       	cpi	r20, 0x0A	; 10
    6460:	31 f4       	brne	.+12     	; 0x646e <__itoa_ncheck+0x12>
    6462:	99 23       	and	r25, r25
    6464:	22 f4       	brpl	.+8      	; 0x646e <__itoa_ncheck+0x12>
    6466:	bd e2       	ldi	r27, 0x2D	; 45
    6468:	90 95       	com	r25
    646a:	81 95       	neg	r24
    646c:	9f 4f       	sbci	r25, 0xFF	; 255
    646e:	0c 94 3a 32 	jmp	0x6474	; 0x6474 <__utoa_common>

00006472 <__utoa_ncheck>:
    6472:	bb 27       	eor	r27, r27

00006474 <__utoa_common>:
    6474:	fb 01       	movw	r30, r22
    6476:	55 27       	eor	r21, r21
    6478:	aa 27       	eor	r26, r26
    647a:	88 0f       	add	r24, r24
    647c:	99 1f       	adc	r25, r25
    647e:	aa 1f       	adc	r26, r26
    6480:	a4 17       	cp	r26, r20
    6482:	10 f0       	brcs	.+4      	; 0x6488 <__utoa_common+0x14>
    6484:	a4 1b       	sub	r26, r20
    6486:	83 95       	inc	r24
    6488:	50 51       	subi	r21, 0x10	; 16
    648a:	b9 f7       	brne	.-18     	; 0x647a <__utoa_common+0x6>
    648c:	a0 5d       	subi	r26, 0xD0	; 208
    648e:	aa 33       	cpi	r26, 0x3A	; 58
    6490:	08 f0       	brcs	.+2      	; 0x6494 <__utoa_common+0x20>
    6492:	a9 5d       	subi	r26, 0xD9	; 217
    6494:	a1 93       	st	Z+, r26
    6496:	00 97       	sbiw	r24, 0x00	; 0
    6498:	79 f7       	brne	.-34     	; 0x6478 <__utoa_common+0x4>
    649a:	b1 11       	cpse	r27, r1
    649c:	b1 93       	st	Z+, r27
    649e:	11 92       	st	Z+, r1
    64a0:	cb 01       	movw	r24, r22
    64a2:	0c 94 96 34 	jmp	0x692c	; 0x692c <strrev>

000064a6 <sprintf>:
    64a6:	0f 93       	push	r16
    64a8:	1f 93       	push	r17
    64aa:	cf 93       	push	r28
    64ac:	df 93       	push	r29
    64ae:	cd b7       	in	r28, 0x3d	; 61
    64b0:	de b7       	in	r29, 0x3e	; 62
    64b2:	2e 97       	sbiw	r28, 0x0e	; 14
    64b4:	cd bf       	out	0x3d, r28	; 61
    64b6:	de bf       	out	0x3e, r29	; 62
    64b8:	0e 89       	ldd	r16, Y+22	; 0x16
    64ba:	1f 89       	ldd	r17, Y+23	; 0x17
    64bc:	86 e0       	ldi	r24, 0x06	; 6
    64be:	8c 83       	std	Y+4, r24	; 0x04
    64c0:	09 83       	std	Y+1, r16	; 0x01
    64c2:	1a 83       	std	Y+2, r17	; 0x02
    64c4:	8f ef       	ldi	r24, 0xFF	; 255
    64c6:	9f e7       	ldi	r25, 0x7F	; 127
    64c8:	8d 83       	std	Y+5, r24	; 0x05
    64ca:	9e 83       	std	Y+6, r25	; 0x06
    64cc:	ae 01       	movw	r20, r28
    64ce:	46 5e       	subi	r20, 0xE6	; 230
    64d0:	5f 4f       	sbci	r21, 0xFF	; 255
    64d2:	68 8d       	ldd	r22, Y+24	; 0x18
    64d4:	79 8d       	ldd	r23, Y+25	; 0x19
    64d6:	ce 01       	movw	r24, r28
    64d8:	01 96       	adiw	r24, 0x01	; 1
    64da:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <vfprintf>
    64de:	ef 81       	ldd	r30, Y+7	; 0x07
    64e0:	f8 85       	ldd	r31, Y+8	; 0x08
    64e2:	e0 0f       	add	r30, r16
    64e4:	f1 1f       	adc	r31, r17
    64e6:	10 82       	st	Z, r1
    64e8:	2e 96       	adiw	r28, 0x0e	; 14
    64ea:	cd bf       	out	0x3d, r28	; 61
    64ec:	de bf       	out	0x3e, r29	; 62
    64ee:	df 91       	pop	r29
    64f0:	cf 91       	pop	r28
    64f2:	1f 91       	pop	r17
    64f4:	0f 91       	pop	r16
    64f6:	08 95       	ret

000064f8 <vfprintf>:
    64f8:	2f 92       	push	r2
    64fa:	3f 92       	push	r3
    64fc:	4f 92       	push	r4
    64fe:	5f 92       	push	r5
    6500:	6f 92       	push	r6
    6502:	7f 92       	push	r7
    6504:	8f 92       	push	r8
    6506:	9f 92       	push	r9
    6508:	af 92       	push	r10
    650a:	bf 92       	push	r11
    650c:	cf 92       	push	r12
    650e:	df 92       	push	r13
    6510:	ef 92       	push	r14
    6512:	ff 92       	push	r15
    6514:	0f 93       	push	r16
    6516:	1f 93       	push	r17
    6518:	cf 93       	push	r28
    651a:	df 93       	push	r29
    651c:	cd b7       	in	r28, 0x3d	; 61
    651e:	de b7       	in	r29, 0x3e	; 62
    6520:	2b 97       	sbiw	r28, 0x0b	; 11
    6522:	cd bf       	out	0x3d, r28	; 61
    6524:	de bf       	out	0x3e, r29	; 62
    6526:	6c 01       	movw	r12, r24
    6528:	7b 01       	movw	r14, r22
    652a:	8a 01       	movw	r16, r20
    652c:	fc 01       	movw	r30, r24
    652e:	16 82       	std	Z+6, r1	; 0x06
    6530:	17 82       	std	Z+7, r1	; 0x07
    6532:	83 81       	ldd	r24, Z+3	; 0x03
    6534:	81 ff       	sbrs	r24, 1
    6536:	cc c1       	rjmp	.+920    	; 0x68d0 <vfprintf+0x3d8>
    6538:	ce 01       	movw	r24, r28
    653a:	01 96       	adiw	r24, 0x01	; 1
    653c:	3c 01       	movw	r6, r24
    653e:	f6 01       	movw	r30, r12
    6540:	93 81       	ldd	r25, Z+3	; 0x03
    6542:	f7 01       	movw	r30, r14
    6544:	93 fd       	sbrc	r25, 3
    6546:	85 91       	lpm	r24, Z+
    6548:	93 ff       	sbrs	r25, 3
    654a:	81 91       	ld	r24, Z+
    654c:	7f 01       	movw	r14, r30
    654e:	88 23       	and	r24, r24
    6550:	09 f4       	brne	.+2      	; 0x6554 <vfprintf+0x5c>
    6552:	ba c1       	rjmp	.+884    	; 0x68c8 <vfprintf+0x3d0>
    6554:	85 32       	cpi	r24, 0x25	; 37
    6556:	39 f4       	brne	.+14     	; 0x6566 <vfprintf+0x6e>
    6558:	93 fd       	sbrc	r25, 3
    655a:	85 91       	lpm	r24, Z+
    655c:	93 ff       	sbrs	r25, 3
    655e:	81 91       	ld	r24, Z+
    6560:	7f 01       	movw	r14, r30
    6562:	85 32       	cpi	r24, 0x25	; 37
    6564:	29 f4       	brne	.+10     	; 0x6570 <vfprintf+0x78>
    6566:	b6 01       	movw	r22, r12
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    656e:	e7 cf       	rjmp	.-50     	; 0x653e <vfprintf+0x46>
    6570:	91 2c       	mov	r9, r1
    6572:	21 2c       	mov	r2, r1
    6574:	31 2c       	mov	r3, r1
    6576:	ff e1       	ldi	r31, 0x1F	; 31
    6578:	f3 15       	cp	r31, r3
    657a:	d8 f0       	brcs	.+54     	; 0x65b2 <vfprintf+0xba>
    657c:	8b 32       	cpi	r24, 0x2B	; 43
    657e:	79 f0       	breq	.+30     	; 0x659e <vfprintf+0xa6>
    6580:	38 f4       	brcc	.+14     	; 0x6590 <vfprintf+0x98>
    6582:	80 32       	cpi	r24, 0x20	; 32
    6584:	79 f0       	breq	.+30     	; 0x65a4 <vfprintf+0xac>
    6586:	83 32       	cpi	r24, 0x23	; 35
    6588:	a1 f4       	brne	.+40     	; 0x65b2 <vfprintf+0xba>
    658a:	23 2d       	mov	r18, r3
    658c:	20 61       	ori	r18, 0x10	; 16
    658e:	1d c0       	rjmp	.+58     	; 0x65ca <vfprintf+0xd2>
    6590:	8d 32       	cpi	r24, 0x2D	; 45
    6592:	61 f0       	breq	.+24     	; 0x65ac <vfprintf+0xb4>
    6594:	80 33       	cpi	r24, 0x30	; 48
    6596:	69 f4       	brne	.+26     	; 0x65b2 <vfprintf+0xba>
    6598:	23 2d       	mov	r18, r3
    659a:	21 60       	ori	r18, 0x01	; 1
    659c:	16 c0       	rjmp	.+44     	; 0x65ca <vfprintf+0xd2>
    659e:	83 2d       	mov	r24, r3
    65a0:	82 60       	ori	r24, 0x02	; 2
    65a2:	38 2e       	mov	r3, r24
    65a4:	e3 2d       	mov	r30, r3
    65a6:	e4 60       	ori	r30, 0x04	; 4
    65a8:	3e 2e       	mov	r3, r30
    65aa:	2a c0       	rjmp	.+84     	; 0x6600 <vfprintf+0x108>
    65ac:	f3 2d       	mov	r31, r3
    65ae:	f8 60       	ori	r31, 0x08	; 8
    65b0:	1d c0       	rjmp	.+58     	; 0x65ec <vfprintf+0xf4>
    65b2:	37 fc       	sbrc	r3, 7
    65b4:	2d c0       	rjmp	.+90     	; 0x6610 <vfprintf+0x118>
    65b6:	20 ed       	ldi	r18, 0xD0	; 208
    65b8:	28 0f       	add	r18, r24
    65ba:	2a 30       	cpi	r18, 0x0A	; 10
    65bc:	40 f0       	brcs	.+16     	; 0x65ce <vfprintf+0xd6>
    65be:	8e 32       	cpi	r24, 0x2E	; 46
    65c0:	b9 f4       	brne	.+46     	; 0x65f0 <vfprintf+0xf8>
    65c2:	36 fc       	sbrc	r3, 6
    65c4:	81 c1       	rjmp	.+770    	; 0x68c8 <vfprintf+0x3d0>
    65c6:	23 2d       	mov	r18, r3
    65c8:	20 64       	ori	r18, 0x40	; 64
    65ca:	32 2e       	mov	r3, r18
    65cc:	19 c0       	rjmp	.+50     	; 0x6600 <vfprintf+0x108>
    65ce:	36 fe       	sbrs	r3, 6
    65d0:	06 c0       	rjmp	.+12     	; 0x65de <vfprintf+0xe6>
    65d2:	8a e0       	ldi	r24, 0x0A	; 10
    65d4:	98 9e       	mul	r9, r24
    65d6:	20 0d       	add	r18, r0
    65d8:	11 24       	eor	r1, r1
    65da:	92 2e       	mov	r9, r18
    65dc:	11 c0       	rjmp	.+34     	; 0x6600 <vfprintf+0x108>
    65de:	ea e0       	ldi	r30, 0x0A	; 10
    65e0:	2e 9e       	mul	r2, r30
    65e2:	20 0d       	add	r18, r0
    65e4:	11 24       	eor	r1, r1
    65e6:	22 2e       	mov	r2, r18
    65e8:	f3 2d       	mov	r31, r3
    65ea:	f0 62       	ori	r31, 0x20	; 32
    65ec:	3f 2e       	mov	r3, r31
    65ee:	08 c0       	rjmp	.+16     	; 0x6600 <vfprintf+0x108>
    65f0:	8c 36       	cpi	r24, 0x6C	; 108
    65f2:	21 f4       	brne	.+8      	; 0x65fc <vfprintf+0x104>
    65f4:	83 2d       	mov	r24, r3
    65f6:	80 68       	ori	r24, 0x80	; 128
    65f8:	38 2e       	mov	r3, r24
    65fa:	02 c0       	rjmp	.+4      	; 0x6600 <vfprintf+0x108>
    65fc:	88 36       	cpi	r24, 0x68	; 104
    65fe:	41 f4       	brne	.+16     	; 0x6610 <vfprintf+0x118>
    6600:	f7 01       	movw	r30, r14
    6602:	93 fd       	sbrc	r25, 3
    6604:	85 91       	lpm	r24, Z+
    6606:	93 ff       	sbrs	r25, 3
    6608:	81 91       	ld	r24, Z+
    660a:	7f 01       	movw	r14, r30
    660c:	81 11       	cpse	r24, r1
    660e:	b3 cf       	rjmp	.-154    	; 0x6576 <vfprintf+0x7e>
    6610:	98 2f       	mov	r25, r24
    6612:	9f 7d       	andi	r25, 0xDF	; 223
    6614:	95 54       	subi	r25, 0x45	; 69
    6616:	93 30       	cpi	r25, 0x03	; 3
    6618:	28 f4       	brcc	.+10     	; 0x6624 <vfprintf+0x12c>
    661a:	0c 5f       	subi	r16, 0xFC	; 252
    661c:	1f 4f       	sbci	r17, 0xFF	; 255
    661e:	9f e3       	ldi	r25, 0x3F	; 63
    6620:	99 83       	std	Y+1, r25	; 0x01
    6622:	0d c0       	rjmp	.+26     	; 0x663e <vfprintf+0x146>
    6624:	83 36       	cpi	r24, 0x63	; 99
    6626:	31 f0       	breq	.+12     	; 0x6634 <vfprintf+0x13c>
    6628:	83 37       	cpi	r24, 0x73	; 115
    662a:	71 f0       	breq	.+28     	; 0x6648 <vfprintf+0x150>
    662c:	83 35       	cpi	r24, 0x53	; 83
    662e:	09 f0       	breq	.+2      	; 0x6632 <vfprintf+0x13a>
    6630:	59 c0       	rjmp	.+178    	; 0x66e4 <vfprintf+0x1ec>
    6632:	21 c0       	rjmp	.+66     	; 0x6676 <vfprintf+0x17e>
    6634:	f8 01       	movw	r30, r16
    6636:	80 81       	ld	r24, Z
    6638:	89 83       	std	Y+1, r24	; 0x01
    663a:	0e 5f       	subi	r16, 0xFE	; 254
    663c:	1f 4f       	sbci	r17, 0xFF	; 255
    663e:	88 24       	eor	r8, r8
    6640:	83 94       	inc	r8
    6642:	91 2c       	mov	r9, r1
    6644:	53 01       	movw	r10, r6
    6646:	13 c0       	rjmp	.+38     	; 0x666e <vfprintf+0x176>
    6648:	28 01       	movw	r4, r16
    664a:	f2 e0       	ldi	r31, 0x02	; 2
    664c:	4f 0e       	add	r4, r31
    664e:	51 1c       	adc	r5, r1
    6650:	f8 01       	movw	r30, r16
    6652:	a0 80       	ld	r10, Z
    6654:	b1 80       	ldd	r11, Z+1	; 0x01
    6656:	36 fe       	sbrs	r3, 6
    6658:	03 c0       	rjmp	.+6      	; 0x6660 <vfprintf+0x168>
    665a:	69 2d       	mov	r22, r9
    665c:	70 e0       	ldi	r23, 0x00	; 0
    665e:	02 c0       	rjmp	.+4      	; 0x6664 <vfprintf+0x16c>
    6660:	6f ef       	ldi	r22, 0xFF	; 255
    6662:	7f ef       	ldi	r23, 0xFF	; 255
    6664:	c5 01       	movw	r24, r10
    6666:	0e 94 8b 34 	call	0x6916	; 0x6916 <strnlen>
    666a:	4c 01       	movw	r8, r24
    666c:	82 01       	movw	r16, r4
    666e:	f3 2d       	mov	r31, r3
    6670:	ff 77       	andi	r31, 0x7F	; 127
    6672:	3f 2e       	mov	r3, r31
    6674:	16 c0       	rjmp	.+44     	; 0x66a2 <vfprintf+0x1aa>
    6676:	28 01       	movw	r4, r16
    6678:	22 e0       	ldi	r18, 0x02	; 2
    667a:	42 0e       	add	r4, r18
    667c:	51 1c       	adc	r5, r1
    667e:	f8 01       	movw	r30, r16
    6680:	a0 80       	ld	r10, Z
    6682:	b1 80       	ldd	r11, Z+1	; 0x01
    6684:	36 fe       	sbrs	r3, 6
    6686:	03 c0       	rjmp	.+6      	; 0x668e <vfprintf+0x196>
    6688:	69 2d       	mov	r22, r9
    668a:	70 e0       	ldi	r23, 0x00	; 0
    668c:	02 c0       	rjmp	.+4      	; 0x6692 <vfprintf+0x19a>
    668e:	6f ef       	ldi	r22, 0xFF	; 255
    6690:	7f ef       	ldi	r23, 0xFF	; 255
    6692:	c5 01       	movw	r24, r10
    6694:	0e 94 80 34 	call	0x6900	; 0x6900 <strnlen_P>
    6698:	4c 01       	movw	r8, r24
    669a:	f3 2d       	mov	r31, r3
    669c:	f0 68       	ori	r31, 0x80	; 128
    669e:	3f 2e       	mov	r3, r31
    66a0:	82 01       	movw	r16, r4
    66a2:	33 fc       	sbrc	r3, 3
    66a4:	1b c0       	rjmp	.+54     	; 0x66dc <vfprintf+0x1e4>
    66a6:	82 2d       	mov	r24, r2
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	88 16       	cp	r8, r24
    66ac:	99 06       	cpc	r9, r25
    66ae:	b0 f4       	brcc	.+44     	; 0x66dc <vfprintf+0x1e4>
    66b0:	b6 01       	movw	r22, r12
    66b2:	80 e2       	ldi	r24, 0x20	; 32
    66b4:	90 e0       	ldi	r25, 0x00	; 0
    66b6:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    66ba:	2a 94       	dec	r2
    66bc:	f4 cf       	rjmp	.-24     	; 0x66a6 <vfprintf+0x1ae>
    66be:	f5 01       	movw	r30, r10
    66c0:	37 fc       	sbrc	r3, 7
    66c2:	85 91       	lpm	r24, Z+
    66c4:	37 fe       	sbrs	r3, 7
    66c6:	81 91       	ld	r24, Z+
    66c8:	5f 01       	movw	r10, r30
    66ca:	b6 01       	movw	r22, r12
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    66d2:	21 10       	cpse	r2, r1
    66d4:	2a 94       	dec	r2
    66d6:	21 e0       	ldi	r18, 0x01	; 1
    66d8:	82 1a       	sub	r8, r18
    66da:	91 08       	sbc	r9, r1
    66dc:	81 14       	cp	r8, r1
    66de:	91 04       	cpc	r9, r1
    66e0:	71 f7       	brne	.-36     	; 0x66be <vfprintf+0x1c6>
    66e2:	e8 c0       	rjmp	.+464    	; 0x68b4 <vfprintf+0x3bc>
    66e4:	84 36       	cpi	r24, 0x64	; 100
    66e6:	11 f0       	breq	.+4      	; 0x66ec <vfprintf+0x1f4>
    66e8:	89 36       	cpi	r24, 0x69	; 105
    66ea:	41 f5       	brne	.+80     	; 0x673c <vfprintf+0x244>
    66ec:	f8 01       	movw	r30, r16
    66ee:	37 fe       	sbrs	r3, 7
    66f0:	07 c0       	rjmp	.+14     	; 0x6700 <vfprintf+0x208>
    66f2:	60 81       	ld	r22, Z
    66f4:	71 81       	ldd	r23, Z+1	; 0x01
    66f6:	82 81       	ldd	r24, Z+2	; 0x02
    66f8:	93 81       	ldd	r25, Z+3	; 0x03
    66fa:	0c 5f       	subi	r16, 0xFC	; 252
    66fc:	1f 4f       	sbci	r17, 0xFF	; 255
    66fe:	08 c0       	rjmp	.+16     	; 0x6710 <vfprintf+0x218>
    6700:	60 81       	ld	r22, Z
    6702:	71 81       	ldd	r23, Z+1	; 0x01
    6704:	07 2e       	mov	r0, r23
    6706:	00 0c       	add	r0, r0
    6708:	88 0b       	sbc	r24, r24
    670a:	99 0b       	sbc	r25, r25
    670c:	0e 5f       	subi	r16, 0xFE	; 254
    670e:	1f 4f       	sbci	r17, 0xFF	; 255
    6710:	f3 2d       	mov	r31, r3
    6712:	ff 76       	andi	r31, 0x6F	; 111
    6714:	3f 2e       	mov	r3, r31
    6716:	97 ff       	sbrs	r25, 7
    6718:	09 c0       	rjmp	.+18     	; 0x672c <vfprintf+0x234>
    671a:	90 95       	com	r25
    671c:	80 95       	com	r24
    671e:	70 95       	com	r23
    6720:	61 95       	neg	r22
    6722:	7f 4f       	sbci	r23, 0xFF	; 255
    6724:	8f 4f       	sbci	r24, 0xFF	; 255
    6726:	9f 4f       	sbci	r25, 0xFF	; 255
    6728:	f0 68       	ori	r31, 0x80	; 128
    672a:	3f 2e       	mov	r3, r31
    672c:	2a e0       	ldi	r18, 0x0A	; 10
    672e:	30 e0       	ldi	r19, 0x00	; 0
    6730:	a3 01       	movw	r20, r6
    6732:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__ultoa_invert>
    6736:	88 2e       	mov	r8, r24
    6738:	86 18       	sub	r8, r6
    673a:	45 c0       	rjmp	.+138    	; 0x67c6 <vfprintf+0x2ce>
    673c:	85 37       	cpi	r24, 0x75	; 117
    673e:	31 f4       	brne	.+12     	; 0x674c <vfprintf+0x254>
    6740:	23 2d       	mov	r18, r3
    6742:	2f 7e       	andi	r18, 0xEF	; 239
    6744:	b2 2e       	mov	r11, r18
    6746:	2a e0       	ldi	r18, 0x0A	; 10
    6748:	30 e0       	ldi	r19, 0x00	; 0
    674a:	25 c0       	rjmp	.+74     	; 0x6796 <vfprintf+0x29e>
    674c:	93 2d       	mov	r25, r3
    674e:	99 7f       	andi	r25, 0xF9	; 249
    6750:	b9 2e       	mov	r11, r25
    6752:	8f 36       	cpi	r24, 0x6F	; 111
    6754:	c1 f0       	breq	.+48     	; 0x6786 <vfprintf+0x28e>
    6756:	18 f4       	brcc	.+6      	; 0x675e <vfprintf+0x266>
    6758:	88 35       	cpi	r24, 0x58	; 88
    675a:	79 f0       	breq	.+30     	; 0x677a <vfprintf+0x282>
    675c:	b5 c0       	rjmp	.+362    	; 0x68c8 <vfprintf+0x3d0>
    675e:	80 37       	cpi	r24, 0x70	; 112
    6760:	19 f0       	breq	.+6      	; 0x6768 <vfprintf+0x270>
    6762:	88 37       	cpi	r24, 0x78	; 120
    6764:	21 f0       	breq	.+8      	; 0x676e <vfprintf+0x276>
    6766:	b0 c0       	rjmp	.+352    	; 0x68c8 <vfprintf+0x3d0>
    6768:	e9 2f       	mov	r30, r25
    676a:	e0 61       	ori	r30, 0x10	; 16
    676c:	be 2e       	mov	r11, r30
    676e:	b4 fe       	sbrs	r11, 4
    6770:	0d c0       	rjmp	.+26     	; 0x678c <vfprintf+0x294>
    6772:	fb 2d       	mov	r31, r11
    6774:	f4 60       	ori	r31, 0x04	; 4
    6776:	bf 2e       	mov	r11, r31
    6778:	09 c0       	rjmp	.+18     	; 0x678c <vfprintf+0x294>
    677a:	34 fe       	sbrs	r3, 4
    677c:	0a c0       	rjmp	.+20     	; 0x6792 <vfprintf+0x29a>
    677e:	29 2f       	mov	r18, r25
    6780:	26 60       	ori	r18, 0x06	; 6
    6782:	b2 2e       	mov	r11, r18
    6784:	06 c0       	rjmp	.+12     	; 0x6792 <vfprintf+0x29a>
    6786:	28 e0       	ldi	r18, 0x08	; 8
    6788:	30 e0       	ldi	r19, 0x00	; 0
    678a:	05 c0       	rjmp	.+10     	; 0x6796 <vfprintf+0x29e>
    678c:	20 e1       	ldi	r18, 0x10	; 16
    678e:	30 e0       	ldi	r19, 0x00	; 0
    6790:	02 c0       	rjmp	.+4      	; 0x6796 <vfprintf+0x29e>
    6792:	20 e1       	ldi	r18, 0x10	; 16
    6794:	32 e0       	ldi	r19, 0x02	; 2
    6796:	f8 01       	movw	r30, r16
    6798:	b7 fe       	sbrs	r11, 7
    679a:	07 c0       	rjmp	.+14     	; 0x67aa <vfprintf+0x2b2>
    679c:	60 81       	ld	r22, Z
    679e:	71 81       	ldd	r23, Z+1	; 0x01
    67a0:	82 81       	ldd	r24, Z+2	; 0x02
    67a2:	93 81       	ldd	r25, Z+3	; 0x03
    67a4:	0c 5f       	subi	r16, 0xFC	; 252
    67a6:	1f 4f       	sbci	r17, 0xFF	; 255
    67a8:	06 c0       	rjmp	.+12     	; 0x67b6 <vfprintf+0x2be>
    67aa:	60 81       	ld	r22, Z
    67ac:	71 81       	ldd	r23, Z+1	; 0x01
    67ae:	80 e0       	ldi	r24, 0x00	; 0
    67b0:	90 e0       	ldi	r25, 0x00	; 0
    67b2:	0e 5f       	subi	r16, 0xFE	; 254
    67b4:	1f 4f       	sbci	r17, 0xFF	; 255
    67b6:	a3 01       	movw	r20, r6
    67b8:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__ultoa_invert>
    67bc:	88 2e       	mov	r8, r24
    67be:	86 18       	sub	r8, r6
    67c0:	fb 2d       	mov	r31, r11
    67c2:	ff 77       	andi	r31, 0x7F	; 127
    67c4:	3f 2e       	mov	r3, r31
    67c6:	36 fe       	sbrs	r3, 6
    67c8:	0d c0       	rjmp	.+26     	; 0x67e4 <vfprintf+0x2ec>
    67ca:	23 2d       	mov	r18, r3
    67cc:	2e 7f       	andi	r18, 0xFE	; 254
    67ce:	a2 2e       	mov	r10, r18
    67d0:	89 14       	cp	r8, r9
    67d2:	58 f4       	brcc	.+22     	; 0x67ea <vfprintf+0x2f2>
    67d4:	34 fe       	sbrs	r3, 4
    67d6:	0b c0       	rjmp	.+22     	; 0x67ee <vfprintf+0x2f6>
    67d8:	32 fc       	sbrc	r3, 2
    67da:	09 c0       	rjmp	.+18     	; 0x67ee <vfprintf+0x2f6>
    67dc:	83 2d       	mov	r24, r3
    67de:	8e 7e       	andi	r24, 0xEE	; 238
    67e0:	a8 2e       	mov	r10, r24
    67e2:	05 c0       	rjmp	.+10     	; 0x67ee <vfprintf+0x2f6>
    67e4:	b8 2c       	mov	r11, r8
    67e6:	a3 2c       	mov	r10, r3
    67e8:	03 c0       	rjmp	.+6      	; 0x67f0 <vfprintf+0x2f8>
    67ea:	b8 2c       	mov	r11, r8
    67ec:	01 c0       	rjmp	.+2      	; 0x67f0 <vfprintf+0x2f8>
    67ee:	b9 2c       	mov	r11, r9
    67f0:	a4 fe       	sbrs	r10, 4
    67f2:	0f c0       	rjmp	.+30     	; 0x6812 <vfprintf+0x31a>
    67f4:	fe 01       	movw	r30, r28
    67f6:	e8 0d       	add	r30, r8
    67f8:	f1 1d       	adc	r31, r1
    67fa:	80 81       	ld	r24, Z
    67fc:	80 33       	cpi	r24, 0x30	; 48
    67fe:	21 f4       	brne	.+8      	; 0x6808 <vfprintf+0x310>
    6800:	9a 2d       	mov	r25, r10
    6802:	99 7e       	andi	r25, 0xE9	; 233
    6804:	a9 2e       	mov	r10, r25
    6806:	09 c0       	rjmp	.+18     	; 0x681a <vfprintf+0x322>
    6808:	a2 fe       	sbrs	r10, 2
    680a:	06 c0       	rjmp	.+12     	; 0x6818 <vfprintf+0x320>
    680c:	b3 94       	inc	r11
    680e:	b3 94       	inc	r11
    6810:	04 c0       	rjmp	.+8      	; 0x681a <vfprintf+0x322>
    6812:	8a 2d       	mov	r24, r10
    6814:	86 78       	andi	r24, 0x86	; 134
    6816:	09 f0       	breq	.+2      	; 0x681a <vfprintf+0x322>
    6818:	b3 94       	inc	r11
    681a:	a3 fc       	sbrc	r10, 3
    681c:	11 c0       	rjmp	.+34     	; 0x6840 <vfprintf+0x348>
    681e:	a0 fe       	sbrs	r10, 0
    6820:	06 c0       	rjmp	.+12     	; 0x682e <vfprintf+0x336>
    6822:	b2 14       	cp	r11, r2
    6824:	88 f4       	brcc	.+34     	; 0x6848 <vfprintf+0x350>
    6826:	28 0c       	add	r2, r8
    6828:	92 2c       	mov	r9, r2
    682a:	9b 18       	sub	r9, r11
    682c:	0e c0       	rjmp	.+28     	; 0x684a <vfprintf+0x352>
    682e:	b2 14       	cp	r11, r2
    6830:	60 f4       	brcc	.+24     	; 0x684a <vfprintf+0x352>
    6832:	b6 01       	movw	r22, r12
    6834:	80 e2       	ldi	r24, 0x20	; 32
    6836:	90 e0       	ldi	r25, 0x00	; 0
    6838:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    683c:	b3 94       	inc	r11
    683e:	f7 cf       	rjmp	.-18     	; 0x682e <vfprintf+0x336>
    6840:	b2 14       	cp	r11, r2
    6842:	18 f4       	brcc	.+6      	; 0x684a <vfprintf+0x352>
    6844:	2b 18       	sub	r2, r11
    6846:	02 c0       	rjmp	.+4      	; 0x684c <vfprintf+0x354>
    6848:	98 2c       	mov	r9, r8
    684a:	21 2c       	mov	r2, r1
    684c:	a4 fe       	sbrs	r10, 4
    684e:	10 c0       	rjmp	.+32     	; 0x6870 <vfprintf+0x378>
    6850:	b6 01       	movw	r22, r12
    6852:	80 e3       	ldi	r24, 0x30	; 48
    6854:	90 e0       	ldi	r25, 0x00	; 0
    6856:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    685a:	a2 fe       	sbrs	r10, 2
    685c:	17 c0       	rjmp	.+46     	; 0x688c <vfprintf+0x394>
    685e:	a1 fc       	sbrc	r10, 1
    6860:	03 c0       	rjmp	.+6      	; 0x6868 <vfprintf+0x370>
    6862:	88 e7       	ldi	r24, 0x78	; 120
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	02 c0       	rjmp	.+4      	; 0x686c <vfprintf+0x374>
    6868:	88 e5       	ldi	r24, 0x58	; 88
    686a:	90 e0       	ldi	r25, 0x00	; 0
    686c:	b6 01       	movw	r22, r12
    686e:	0c c0       	rjmp	.+24     	; 0x6888 <vfprintf+0x390>
    6870:	8a 2d       	mov	r24, r10
    6872:	86 78       	andi	r24, 0x86	; 134
    6874:	59 f0       	breq	.+22     	; 0x688c <vfprintf+0x394>
    6876:	a1 fe       	sbrs	r10, 1
    6878:	02 c0       	rjmp	.+4      	; 0x687e <vfprintf+0x386>
    687a:	8b e2       	ldi	r24, 0x2B	; 43
    687c:	01 c0       	rjmp	.+2      	; 0x6880 <vfprintf+0x388>
    687e:	80 e2       	ldi	r24, 0x20	; 32
    6880:	a7 fc       	sbrc	r10, 7
    6882:	8d e2       	ldi	r24, 0x2D	; 45
    6884:	b6 01       	movw	r22, r12
    6886:	90 e0       	ldi	r25, 0x00	; 0
    6888:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    688c:	89 14       	cp	r8, r9
    688e:	38 f4       	brcc	.+14     	; 0x689e <vfprintf+0x3a6>
    6890:	b6 01       	movw	r22, r12
    6892:	80 e3       	ldi	r24, 0x30	; 48
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    689a:	9a 94       	dec	r9
    689c:	f7 cf       	rjmp	.-18     	; 0x688c <vfprintf+0x394>
    689e:	8a 94       	dec	r8
    68a0:	f3 01       	movw	r30, r6
    68a2:	e8 0d       	add	r30, r8
    68a4:	f1 1d       	adc	r31, r1
    68a6:	80 81       	ld	r24, Z
    68a8:	b6 01       	movw	r22, r12
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    68b0:	81 10       	cpse	r8, r1
    68b2:	f5 cf       	rjmp	.-22     	; 0x689e <vfprintf+0x3a6>
    68b4:	22 20       	and	r2, r2
    68b6:	09 f4       	brne	.+2      	; 0x68ba <vfprintf+0x3c2>
    68b8:	42 ce       	rjmp	.-892    	; 0x653e <vfprintf+0x46>
    68ba:	b6 01       	movw	r22, r12
    68bc:	80 e2       	ldi	r24, 0x20	; 32
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	0e 94 a6 34 	call	0x694c	; 0x694c <fputc>
    68c4:	2a 94       	dec	r2
    68c6:	f6 cf       	rjmp	.-20     	; 0x68b4 <vfprintf+0x3bc>
    68c8:	f6 01       	movw	r30, r12
    68ca:	86 81       	ldd	r24, Z+6	; 0x06
    68cc:	97 81       	ldd	r25, Z+7	; 0x07
    68ce:	02 c0       	rjmp	.+4      	; 0x68d4 <vfprintf+0x3dc>
    68d0:	8f ef       	ldi	r24, 0xFF	; 255
    68d2:	9f ef       	ldi	r25, 0xFF	; 255
    68d4:	2b 96       	adiw	r28, 0x0b	; 11
    68d6:	cd bf       	out	0x3d, r28	; 61
    68d8:	de bf       	out	0x3e, r29	; 62
    68da:	df 91       	pop	r29
    68dc:	cf 91       	pop	r28
    68de:	1f 91       	pop	r17
    68e0:	0f 91       	pop	r16
    68e2:	ff 90       	pop	r15
    68e4:	ef 90       	pop	r14
    68e6:	df 90       	pop	r13
    68e8:	cf 90       	pop	r12
    68ea:	bf 90       	pop	r11
    68ec:	af 90       	pop	r10
    68ee:	9f 90       	pop	r9
    68f0:	8f 90       	pop	r8
    68f2:	7f 90       	pop	r7
    68f4:	6f 90       	pop	r6
    68f6:	5f 90       	pop	r5
    68f8:	4f 90       	pop	r4
    68fa:	3f 90       	pop	r3
    68fc:	2f 90       	pop	r2
    68fe:	08 95       	ret

00006900 <strnlen_P>:
    6900:	fc 01       	movw	r30, r24
    6902:	05 90       	lpm	r0, Z+
    6904:	61 50       	subi	r22, 0x01	; 1
    6906:	70 40       	sbci	r23, 0x00	; 0
    6908:	01 10       	cpse	r0, r1
    690a:	d8 f7       	brcc	.-10     	; 0x6902 <strnlen_P+0x2>
    690c:	80 95       	com	r24
    690e:	90 95       	com	r25
    6910:	8e 0f       	add	r24, r30
    6912:	9f 1f       	adc	r25, r31
    6914:	08 95       	ret

00006916 <strnlen>:
    6916:	fc 01       	movw	r30, r24
    6918:	61 50       	subi	r22, 0x01	; 1
    691a:	70 40       	sbci	r23, 0x00	; 0
    691c:	01 90       	ld	r0, Z+
    691e:	01 10       	cpse	r0, r1
    6920:	d8 f7       	brcc	.-10     	; 0x6918 <strnlen+0x2>
    6922:	80 95       	com	r24
    6924:	90 95       	com	r25
    6926:	8e 0f       	add	r24, r30
    6928:	9f 1f       	adc	r25, r31
    692a:	08 95       	ret

0000692c <strrev>:
    692c:	dc 01       	movw	r26, r24
    692e:	fc 01       	movw	r30, r24
    6930:	67 2f       	mov	r22, r23
    6932:	71 91       	ld	r23, Z+
    6934:	77 23       	and	r23, r23
    6936:	e1 f7       	brne	.-8      	; 0x6930 <strrev+0x4>
    6938:	32 97       	sbiw	r30, 0x02	; 2
    693a:	04 c0       	rjmp	.+8      	; 0x6944 <strrev+0x18>
    693c:	7c 91       	ld	r23, X
    693e:	6d 93       	st	X+, r22
    6940:	70 83       	st	Z, r23
    6942:	62 91       	ld	r22, -Z
    6944:	ae 17       	cp	r26, r30
    6946:	bf 07       	cpc	r27, r31
    6948:	c8 f3       	brcs	.-14     	; 0x693c <strrev+0x10>
    694a:	08 95       	ret

0000694c <fputc>:
    694c:	0f 93       	push	r16
    694e:	1f 93       	push	r17
    6950:	cf 93       	push	r28
    6952:	df 93       	push	r29
    6954:	fb 01       	movw	r30, r22
    6956:	23 81       	ldd	r18, Z+3	; 0x03
    6958:	21 fd       	sbrc	r18, 1
    695a:	03 c0       	rjmp	.+6      	; 0x6962 <fputc+0x16>
    695c:	8f ef       	ldi	r24, 0xFF	; 255
    695e:	9f ef       	ldi	r25, 0xFF	; 255
    6960:	2c c0       	rjmp	.+88     	; 0x69ba <fputc+0x6e>
    6962:	22 ff       	sbrs	r18, 2
    6964:	16 c0       	rjmp	.+44     	; 0x6992 <fputc+0x46>
    6966:	46 81       	ldd	r20, Z+6	; 0x06
    6968:	57 81       	ldd	r21, Z+7	; 0x07
    696a:	24 81       	ldd	r18, Z+4	; 0x04
    696c:	35 81       	ldd	r19, Z+5	; 0x05
    696e:	42 17       	cp	r20, r18
    6970:	53 07       	cpc	r21, r19
    6972:	44 f4       	brge	.+16     	; 0x6984 <fputc+0x38>
    6974:	a0 81       	ld	r26, Z
    6976:	b1 81       	ldd	r27, Z+1	; 0x01
    6978:	9d 01       	movw	r18, r26
    697a:	2f 5f       	subi	r18, 0xFF	; 255
    697c:	3f 4f       	sbci	r19, 0xFF	; 255
    697e:	20 83       	st	Z, r18
    6980:	31 83       	std	Z+1, r19	; 0x01
    6982:	8c 93       	st	X, r24
    6984:	26 81       	ldd	r18, Z+6	; 0x06
    6986:	37 81       	ldd	r19, Z+7	; 0x07
    6988:	2f 5f       	subi	r18, 0xFF	; 255
    698a:	3f 4f       	sbci	r19, 0xFF	; 255
    698c:	26 83       	std	Z+6, r18	; 0x06
    698e:	37 83       	std	Z+7, r19	; 0x07
    6990:	14 c0       	rjmp	.+40     	; 0x69ba <fputc+0x6e>
    6992:	8b 01       	movw	r16, r22
    6994:	ec 01       	movw	r28, r24
    6996:	fb 01       	movw	r30, r22
    6998:	00 84       	ldd	r0, Z+8	; 0x08
    699a:	f1 85       	ldd	r31, Z+9	; 0x09
    699c:	e0 2d       	mov	r30, r0
    699e:	19 95       	eicall
    69a0:	89 2b       	or	r24, r25
    69a2:	e1 f6       	brne	.-72     	; 0x695c <fputc+0x10>
    69a4:	d8 01       	movw	r26, r16
    69a6:	16 96       	adiw	r26, 0x06	; 6
    69a8:	8d 91       	ld	r24, X+
    69aa:	9c 91       	ld	r25, X
    69ac:	17 97       	sbiw	r26, 0x07	; 7
    69ae:	01 96       	adiw	r24, 0x01	; 1
    69b0:	16 96       	adiw	r26, 0x06	; 6
    69b2:	8d 93       	st	X+, r24
    69b4:	9c 93       	st	X, r25
    69b6:	17 97       	sbiw	r26, 0x07	; 7
    69b8:	ce 01       	movw	r24, r28
    69ba:	df 91       	pop	r29
    69bc:	cf 91       	pop	r28
    69be:	1f 91       	pop	r17
    69c0:	0f 91       	pop	r16
    69c2:	08 95       	ret

000069c4 <__ultoa_invert>:
    69c4:	fa 01       	movw	r30, r20
    69c6:	aa 27       	eor	r26, r26
    69c8:	28 30       	cpi	r18, 0x08	; 8
    69ca:	51 f1       	breq	.+84     	; 0x6a20 <__ultoa_invert+0x5c>
    69cc:	20 31       	cpi	r18, 0x10	; 16
    69ce:	81 f1       	breq	.+96     	; 0x6a30 <__ultoa_invert+0x6c>
    69d0:	e8 94       	clt
    69d2:	6f 93       	push	r22
    69d4:	6e 7f       	andi	r22, 0xFE	; 254
    69d6:	6e 5f       	subi	r22, 0xFE	; 254
    69d8:	7f 4f       	sbci	r23, 0xFF	; 255
    69da:	8f 4f       	sbci	r24, 0xFF	; 255
    69dc:	9f 4f       	sbci	r25, 0xFF	; 255
    69de:	af 4f       	sbci	r26, 0xFF	; 255
    69e0:	b1 e0       	ldi	r27, 0x01	; 1
    69e2:	3e d0       	rcall	.+124    	; 0x6a60 <__ultoa_invert+0x9c>
    69e4:	b4 e0       	ldi	r27, 0x04	; 4
    69e6:	3c d0       	rcall	.+120    	; 0x6a60 <__ultoa_invert+0x9c>
    69e8:	67 0f       	add	r22, r23
    69ea:	78 1f       	adc	r23, r24
    69ec:	89 1f       	adc	r24, r25
    69ee:	9a 1f       	adc	r25, r26
    69f0:	a1 1d       	adc	r26, r1
    69f2:	68 0f       	add	r22, r24
    69f4:	79 1f       	adc	r23, r25
    69f6:	8a 1f       	adc	r24, r26
    69f8:	91 1d       	adc	r25, r1
    69fa:	a1 1d       	adc	r26, r1
    69fc:	6a 0f       	add	r22, r26
    69fe:	71 1d       	adc	r23, r1
    6a00:	81 1d       	adc	r24, r1
    6a02:	91 1d       	adc	r25, r1
    6a04:	a1 1d       	adc	r26, r1
    6a06:	20 d0       	rcall	.+64     	; 0x6a48 <__ultoa_invert+0x84>
    6a08:	09 f4       	brne	.+2      	; 0x6a0c <__ultoa_invert+0x48>
    6a0a:	68 94       	set
    6a0c:	3f 91       	pop	r19
    6a0e:	2a e0       	ldi	r18, 0x0A	; 10
    6a10:	26 9f       	mul	r18, r22
    6a12:	11 24       	eor	r1, r1
    6a14:	30 19       	sub	r19, r0
    6a16:	30 5d       	subi	r19, 0xD0	; 208
    6a18:	31 93       	st	Z+, r19
    6a1a:	de f6       	brtc	.-74     	; 0x69d2 <__ultoa_invert+0xe>
    6a1c:	cf 01       	movw	r24, r30
    6a1e:	08 95       	ret
    6a20:	46 2f       	mov	r20, r22
    6a22:	47 70       	andi	r20, 0x07	; 7
    6a24:	40 5d       	subi	r20, 0xD0	; 208
    6a26:	41 93       	st	Z+, r20
    6a28:	b3 e0       	ldi	r27, 0x03	; 3
    6a2a:	0f d0       	rcall	.+30     	; 0x6a4a <__ultoa_invert+0x86>
    6a2c:	c9 f7       	brne	.-14     	; 0x6a20 <__ultoa_invert+0x5c>
    6a2e:	f6 cf       	rjmp	.-20     	; 0x6a1c <__ultoa_invert+0x58>
    6a30:	46 2f       	mov	r20, r22
    6a32:	4f 70       	andi	r20, 0x0F	; 15
    6a34:	40 5d       	subi	r20, 0xD0	; 208
    6a36:	4a 33       	cpi	r20, 0x3A	; 58
    6a38:	18 f0       	brcs	.+6      	; 0x6a40 <__ultoa_invert+0x7c>
    6a3a:	49 5d       	subi	r20, 0xD9	; 217
    6a3c:	31 fd       	sbrc	r19, 1
    6a3e:	40 52       	subi	r20, 0x20	; 32
    6a40:	41 93       	st	Z+, r20
    6a42:	02 d0       	rcall	.+4      	; 0x6a48 <__ultoa_invert+0x84>
    6a44:	a9 f7       	brne	.-22     	; 0x6a30 <__ultoa_invert+0x6c>
    6a46:	ea cf       	rjmp	.-44     	; 0x6a1c <__ultoa_invert+0x58>
    6a48:	b4 e0       	ldi	r27, 0x04	; 4
    6a4a:	a6 95       	lsr	r26
    6a4c:	97 95       	ror	r25
    6a4e:	87 95       	ror	r24
    6a50:	77 95       	ror	r23
    6a52:	67 95       	ror	r22
    6a54:	ba 95       	dec	r27
    6a56:	c9 f7       	brne	.-14     	; 0x6a4a <__ultoa_invert+0x86>
    6a58:	00 97       	sbiw	r24, 0x00	; 0
    6a5a:	61 05       	cpc	r22, r1
    6a5c:	71 05       	cpc	r23, r1
    6a5e:	08 95       	ret
    6a60:	9b 01       	movw	r18, r22
    6a62:	ac 01       	movw	r20, r24
    6a64:	0a 2e       	mov	r0, r26
    6a66:	06 94       	lsr	r0
    6a68:	57 95       	ror	r21
    6a6a:	47 95       	ror	r20
    6a6c:	37 95       	ror	r19
    6a6e:	27 95       	ror	r18
    6a70:	ba 95       	dec	r27
    6a72:	c9 f7       	brne	.-14     	; 0x6a66 <__ultoa_invert+0xa2>
    6a74:	62 0f       	add	r22, r18
    6a76:	73 1f       	adc	r23, r19
    6a78:	84 1f       	adc	r24, r20
    6a7a:	95 1f       	adc	r25, r21
    6a7c:	a0 1d       	adc	r26, r0
    6a7e:	08 95       	ret

00006a80 <_exit>:
    6a80:	f8 94       	cli

00006a82 <__stop_program>:
    6a82:	ff cf       	rjmp	.-2      	; 0x6a82 <__stop_program>
